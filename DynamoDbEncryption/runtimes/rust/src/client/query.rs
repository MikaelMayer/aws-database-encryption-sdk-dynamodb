// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Do not modify this file. This file is machine generated, and any changes to it will be overwritten.
impl crate::client::Client {
    /// Constructs a fluent builder for the [`Query`](crate::operation::query::builders::QueryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attributes_to_get(impl Into<Option<::std::vec::Vec<::std::string::String>>>)`](crate::operation::query::builders::QueryFluentBuilder::attributes_to_get) / [`set_attributes_to_get(Option<::std::vec::Vec<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::set_attributes_to_get): (undocumented)<br>
    ///   - [`conditional_operator(impl Into<Option<dynamodb::types::ConditionalOperator>>)`](crate::operation::query::builders::QueryFluentBuilder::conditional_operator) / [`set_conditional_operator(Option<dynamodb::types::ConditionalOperator>)`](crate::operation::query::builders::QueryFluentBuilder::set_conditional_operator): (undocumented)<br>
    ///   - [`consistent_read(impl Into<Option<::std::primitive::bool>>)`](crate::operation::query::builders::QueryFluentBuilder::consistent_read) / [`set_consistent_read(Option<::std::primitive::bool>)`](crate::operation::query::builders::QueryFluentBuilder::set_consistent_read): (undocumented)<br>
    ///   - [`exclusive_start_key(impl Into<Option<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>>)`](crate::operation::query::builders::QueryFluentBuilder::exclusive_start_key) / [`set_exclusive_start_key(Option<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>)`](crate::operation::query::builders::QueryFluentBuilder::set_exclusive_start_key): (undocumented)<br>
    ///   - [`expression_attribute_names(impl Into<Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>>)`](crate::operation::query::builders::QueryFluentBuilder::expression_attribute_names) / [`set_expression_attribute_names(Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::set_expression_attribute_names): (undocumented)<br>
    ///   - [`expression_attribute_values(impl Into<Option<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>>)`](crate::operation::query::builders::QueryFluentBuilder::expression_attribute_values) / [`set_expression_attribute_values(Option<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>)`](crate::operation::query::builders::QueryFluentBuilder::set_expression_attribute_values): (undocumented)<br>
    ///   - [`filter_expression(impl Into<Option<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::filter_expression) / [`set_filter_expression(Option<::std::string::String>)`](crate::operation::query::builders::QueryFluentBuilder::set_filter_expression): (undocumented)<br>
    ///   - [`index_name(impl Into<Option<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::index_name) / [`set_index_name(Option<::std::string::String>)`](crate::operation::query::builders::QueryFluentBuilder::set_index_name): (undocumented)<br>
    ///   - [`key_condition_expression(impl Into<Option<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::key_condition_expression) / [`set_key_condition_expression(Option<::std::string::String>)`](crate::operation::query::builders::QueryFluentBuilder::set_key_condition_expression): (undocumented)<br>
    ///   - [`key_conditions(impl Into<Option<::std::collections::HashMap<::std::string::String, dynamodb::types::Condition>>>)`](crate::operation::query::builders::QueryFluentBuilder::key_conditions) / [`set_key_conditions(Option<::std::collections::HashMap<::std::string::String, dynamodb::types::Condition>>)`](crate::operation::query::builders::QueryFluentBuilder::set_key_conditions): (undocumented)<br>
    ///   - [`limit(impl Into<Option<::std::primitive::i32>>)`](crate::operation::query::builders::QueryFluentBuilder::limit) / [`set_limit(Option<::std::primitive::i32>)`](crate::operation::query::builders::QueryFluentBuilder::set_limit): (undocumented)<br>
    ///   - [`projection_expression(impl Into<Option<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::projection_expression) / [`set_projection_expression(Option<::std::string::String>)`](crate::operation::query::builders::QueryFluentBuilder::set_projection_expression): (undocumented)<br>
    ///   - [`query_filter(impl Into<Option<::std::collections::HashMap<::std::string::String, dynamodb::types::Condition>>>)`](crate::operation::query::builders::QueryFluentBuilder::query_filter) / [`set_query_filter(Option<::std::collections::HashMap<::std::string::String, dynamodb::types::Condition>>)`](crate::operation::query::builders::QueryFluentBuilder::set_query_filter): (undocumented)<br>
    ///   - [`return_consumed_capacity(impl Into<Option<dynamodb::types::ReturnConsumedCapacity>>)`](crate::operation::query::builders::QueryFluentBuilder::return_consumed_capacity) / [`set_return_consumed_capacity(Option<dynamodb::types::ReturnConsumedCapacity>)`](crate::operation::query::builders::QueryFluentBuilder::set_return_consumed_capacity): (undocumented)<br>
    ///   - [`scan_index_forward(impl Into<Option<::std::primitive::bool>>)`](crate::operation::query::builders::QueryFluentBuilder::scan_index_forward) / [`set_scan_index_forward(Option<::std::primitive::bool>)`](crate::operation::query::builders::QueryFluentBuilder::set_scan_index_forward): (undocumented)<br>
    ///   - [`select(impl Into<Option<dynamodb::types::Select>>)`](crate::operation::query::builders::QueryFluentBuilder::select) / [`set_select(Option<dynamodb::types::Select>)`](crate::operation::query::builders::QueryFluentBuilder::set_select): (undocumented)<br>
    ///   - [`table_name(impl Into<Option<::std::string::String>>)`](crate::operation::query::builders::QueryFluentBuilder::table_name) / [`set_table_name(Option<::std::string::String>)`](crate::operation::query::builders::QueryFluentBuilder::set_table_name): (undocumented)<br>
    /// - On success, responds with [`QueryOutput`](crate::operation::query::QueryOutput) with field(s):
    ///   - [`consumed_capacity(Option<dynamodb::types::ConsumedCapacity>)`](crate::operation::query::QueryOutput::consumed_capacity): (undocumented)
    ///   - [`count(Option<::std::primitive::i32>)`](crate::operation::query::QueryOutput::count): (undocumented)
    ///   - [`items(Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>>)`](crate::operation::query::QueryOutput::items): (undocumented)
    ///   - [`last_evaluated_key(Option<::std::collections::HashMap<::std::string::String, dynamodb::types::AttributeValue>>)`](crate::operation::query::QueryOutput::last_evaluated_key): (undocumented)
    ///   - [`scanned_count(Option<::std::primitive::i32>)`](crate::operation::query::QueryOutput::scanned_count): (undocumented)
    /// - On failure, responds with [`SdkError<QueryError>`](crate::operation::query::QueryError)
    pub fn query(&self) -> crate::operation::query::builders::QueryFluentBuilder {
        crate::operation::query::builders::QueryFluentBuilder::new(self.clone())
    }
}
