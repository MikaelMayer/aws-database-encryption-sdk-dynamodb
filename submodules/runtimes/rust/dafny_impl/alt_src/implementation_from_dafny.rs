#![allow(warnings, unconditional_panic)]
#![allow(nonstandard_style)]

pub mod concurrent_call;
pub mod dafny_libraries;
pub mod externs_utf8;
pub mod sets;
pub mod time;
pub mod uuid;
pub mod _dafny_externs {
    pub use crate::concurrent_call::*;
    pub use crate::dafny_libraries::*;
    pub use crate::externs_utf8::*;
    pub use crate::sets::*;
    pub use crate::time::*;
    pub use crate::uuid::*;
}

pub mod r#_Wrappers_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::cmp::Eq;
    pub use ::std::convert::AsRef;
    pub use ::std::default::Default;
    pub use ::std::fmt::Debug;
    pub use ::std::hash::Hash;

    pub struct _default {}

    impl _default {
        pub fn Need<_E: ::dafny_runtime::DafnyType>(
            condition: bool,
            error: &_E,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<_E>> {
            if condition {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<_E>::Pass {})
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<_E>::Fail {
                    error: error.clone(),
                })
            }
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Option<T: ::dafny_runtime::DafnyType> {
        None {},
        Some { value: T },
    }

    impl<T: ::dafny_runtime::DafnyType> Option<T> {
        pub fn ToResult(
            self: &::std::rc::Rc<Self>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                T,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut _source0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<T>> = self.clone();
            if matches!(
                (&_source0).as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    T,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Failure {
                    error: ::dafny_runtime::string_utf16_of("Option is None"),
                })
            } else {
                let mut r#___mcc_h0: T = _source0.value().clone();
                let mut v: T = r#___mcc_h0.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    T,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: v.clone(),
                })
            }
        }
        pub fn r#_ToResult_k<_R: ::dafny_runtime::DafnyType>(
            self: &::std::rc::Rc<Self>,
            error: &_R,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<T, _R>> {
            let mut _source1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<T>> = self.clone();
            if matches!(
                (&_source1).as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<T, _R>::Failure {
                    error: error.clone(),
                })
            } else {
                let mut r#___mcc_h0: T = _source1.value().clone();
                let mut v: T = r#___mcc_h0.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<T, _R>::Success {
                    value: v.clone(),
                })
            }
        }
        pub fn UnwrapOr(self: &::std::rc::Rc<Self>, default: &T) -> T {
            let mut _source2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<T>> = self.clone();
            if matches!(
                (&_source2).as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                default.clone()
            } else {
                let mut r#___mcc_h0: T = _source2.value().clone();
                let mut v: T = r#___mcc_h0.clone();
                v.clone()
            }
        }
        pub fn IsFailure(self: &::std::rc::Rc<Self>) -> bool {
            matches!(
                self.as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            )
        }
        pub fn PropagateFailure<_U: ::dafny_runtime::DafnyType>(
            self: &::std::rc::Rc<Self>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<_U>> {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<_U>::None {})
        }
        pub fn Extract(self: &::std::rc::Rc<Self>) -> T {
            self.value().clone()
        }
        pub fn value(&self) -> &T {
            match self {
                Option::None {} => panic!("field does not exist on this variant"),
                Option::Some { value } => value,
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType> Debug for Option<T> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl<T: ::dafny_runtime::DafnyType> DafnyPrint for Option<T> {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Option::None {} => {
                    write!(_formatter, "Wrappers_Compile.Option.None")?;
                    Ok(())
                }
                Option::Some { value } => {
                    write!(_formatter, "Wrappers_Compile.Option.Some(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(value, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType> Option<T> {
        pub fn coerce<r#__T0: ::dafny_runtime::DafnyType>(
            f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
        ) -> ::std::rc::Rc<impl ::std::ops::Fn(Option<T>) -> Option<r#__T0>> {
            ::std::rc::Rc::new(move |this: Self| -> Option<r#__T0> {
                match this {
                    Option::None {} => Option::None {},
                    Option::Some { value } => Option::Some {
                        value: f_0.clone()(value),
                    },
                }
            })
        }
    }

    impl<T: ::dafny_runtime::DafnyType + Eq> Eq for Option<T> {}

    impl<T: ::dafny_runtime::DafnyType + Hash> Hash for Option<T> {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Option::None {} => {}
                Option::Some { value } => ::std::hash::Hash::hash(value, _state),
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType + Default> Default for Option<T> {
        fn default() -> Option<T> {
            Option::None {}
        }
    }

    impl<T: ::dafny_runtime::DafnyType> AsRef<Option<T>> for &Option<T> {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Result<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> {
        Success { value: T },
        Failure { error: R },
    }

    impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Result<T, R> {
        pub fn ToOption(
            self: &::std::rc::Rc<Self>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<T>> {
            let mut _source3: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<T, R>> =
                self.clone();
            if matches!(
                (&_source3).as_ref(),
                crate::r#_Wrappers_Compile::Result::Success { .. }
            ) {
                let mut r#___mcc_h0: T = _source3.value().clone();
                let mut s: T = r#___mcc_h0.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<T>::Some {
                    value: s.clone(),
                })
            } else {
                let mut r#___mcc_h1: R = _source3.error().clone();
                let mut e: R = r#___mcc_h1.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<T>::None {})
            }
        }
        pub fn UnwrapOr(self: &::std::rc::Rc<Self>, default: &T) -> T {
            let mut _source4: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<T, R>> =
                self.clone();
            if matches!(
                (&_source4).as_ref(),
                crate::r#_Wrappers_Compile::Result::Success { .. }
            ) {
                let mut r#___mcc_h0: T = _source4.value().clone();
                let mut s: T = r#___mcc_h0.clone();
                s.clone()
            } else {
                let mut r#___mcc_h1: R = _source4.error().clone();
                let mut e: R = r#___mcc_h1.clone();
                default.clone()
            }
        }
        pub fn IsFailure(self: &::std::rc::Rc<Self>) -> bool {
            matches!(
                self.as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            )
        }
        pub fn PropagateFailure<_U: ::dafny_runtime::DafnyType>(
            self: &::std::rc::Rc<Self>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_U, R>> {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<_U, R>::Failure {
                error: self.error().clone(),
            })
        }
        pub fn MapFailure<_NewR: ::dafny_runtime::DafnyType>(
            self: &::std::rc::Rc<Self>,
            reWrap: &::std::rc::Rc<dyn ::std::ops::Fn(&R) -> _NewR>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<T, _NewR>> {
            let mut _source5: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<T, R>> =
                self.clone();
            if matches!(
                (&_source5).as_ref(),
                crate::r#_Wrappers_Compile::Result::Success { .. }
            ) {
                let mut r#___mcc_h0: T = _source5.value().clone();
                let mut s: T = r#___mcc_h0.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<T, _NewR>::Success {
                    value: s.clone(),
                })
            } else {
                let mut r#___mcc_h1: R = _source5.error().clone();
                let mut e: R = r#___mcc_h1.clone();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<T, _NewR>::Failure {
                    error: reWrap(&e),
                })
            }
        }
        pub fn Extract(self: &::std::rc::Rc<Self>) -> T {
            self.value().clone()
        }
        pub fn value(&self) -> &T {
            match self {
                Result::Success { value } => value,
                Result::Failure { error } => panic!("field does not exist on this variant"),
            }
        }
        pub fn error(&self) -> &R {
            match self {
                Result::Success { value } => panic!("field does not exist on this variant"),
                Result::Failure { error } => error,
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Debug for Result<T, R> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> DafnyPrint for Result<T, R> {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Result::Success { value } => {
                    write!(_formatter, "Wrappers_Compile.Result.Success(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(value, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
                Result::Failure { error } => {
                    write!(_formatter, "Wrappers_Compile.Result.Failure(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(error, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Result<T, R> {
        pub fn coerce<r#__T0: ::dafny_runtime::DafnyType, r#__T1: ::dafny_runtime::DafnyType>(
            f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
            f_1: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T1 + 'static>,
        ) -> ::std::rc::Rc<impl ::std::ops::Fn(Result<T, R>) -> Result<r#__T0, r#__T1>> {
            ::std::rc::Rc::new(move |this: Self| -> Result<r#__T0, r#__T1> {
                match this {
                    Result::Success { value } => Result::Success {
                        value: f_0.clone()(value),
                    },
                    Result::Failure { error } => Result::Failure {
                        error: f_1.clone()(error),
                    },
                }
            })
        }
    }

    impl<T: ::dafny_runtime::DafnyType + Eq, R: ::dafny_runtime::DafnyType + Eq> Eq for Result<T, R> {}

    impl<T: ::dafny_runtime::DafnyType + Hash, R: ::dafny_runtime::DafnyType + Hash> Hash
        for Result<T, R>
    {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Result::Success { value } => ::std::hash::Hash::hash(value, _state),
                Result::Failure { error } => ::std::hash::Hash::hash(error, _state),
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType + Default, R: ::dafny_runtime::DafnyType + Default> Default
        for Result<T, R>
    {
        fn default() -> Result<T, R> {
            Result::Success {
                value: ::std::default::Default::default(),
            }
        }
    }

    impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> AsRef<Result<T, R>>
        for &Result<T, R>
    {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Outcome<E: ::dafny_runtime::DafnyType> {
        Pass {},
        Fail { error: E },
    }

    impl<E: ::dafny_runtime::DafnyType> Outcome<E> {
        pub fn IsFailure(self: &::std::rc::Rc<Self>) -> bool {
            matches!(
                self.as_ref(),
                crate::r#_Wrappers_Compile::Outcome::Fail { .. }
            )
        }
        pub fn PropagateFailure<_U: ::dafny_runtime::DafnyType>(
            self: &::std::rc::Rc<Self>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_U, E>> {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<_U, E>::Failure {
                error: self.error().clone(),
            })
        }
        pub fn error(&self) -> &E {
            match self {
                Outcome::Pass {} => panic!("field does not exist on this variant"),
                Outcome::Fail { error } => error,
            }
        }
    }

    impl<E: ::dafny_runtime::DafnyType> Debug for Outcome<E> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl<E: ::dafny_runtime::DafnyType> DafnyPrint for Outcome<E> {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Outcome::Pass {} => {
                    write!(_formatter, "Wrappers_Compile.Outcome.Pass")?;
                    Ok(())
                }
                Outcome::Fail { error } => {
                    write!(_formatter, "Wrappers_Compile.Outcome.Fail(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(error, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl<E: ::dafny_runtime::DafnyType + Eq> Eq for Outcome<E> {}

    impl<E: ::dafny_runtime::DafnyType + Hash> Hash for Outcome<E> {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Outcome::Pass {} => {}
                Outcome::Fail { error } => ::std::hash::Hash::hash(error, _state),
            }
        }
    }

    impl<E: ::dafny_runtime::DafnyType + Default> Default for Outcome<E> {
        fn default() -> Outcome<E> {
            Outcome::Pass {}
        }
    }

    impl<E: ::dafny_runtime::DafnyType> AsRef<Outcome<E>> for &Outcome<E> {
        fn as_ref(&self) -> Self {
            self
        }
    }
}
pub mod r#_Relations_Compile {}
pub mod r#_Seq_Compile {
    pub struct _default {}

    impl _default {
        pub fn First<_T: ::dafny_runtime::DafnyType>(xs: &::dafny_runtime::Sequence<_T>) -> _T {
            xs.get(&::dafny_runtime::int!(0))
        }
        pub fn DropFirst<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            xs.drop(&::dafny_runtime::int!(1))
        }
        pub fn Last<_T: ::dafny_runtime::DafnyType>(xs: &::dafny_runtime::Sequence<_T>) -> _T {
            xs.get(&(xs.cardinality() - ::dafny_runtime::int!(1)))
        }
        pub fn DropLast<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            xs.take(&(xs.cardinality() - ::dafny_runtime::int!(1)))
        }
        pub fn ToArray<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Object<[_T]> {
            let mut a = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[_T]>>::new();
            let mut _init0: ::std::rc::Rc<dyn ::std::ops::Fn(&::dafny_runtime::DafnyInt) -> _T> = {
                let xs: ::dafny_runtime::Sequence<_T> = xs.clone();
                {
                    let mut xs = xs.clone();
                    ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> _T { xs.get(i) })
                }
            };
            let mut _nw0: ::dafny_runtime::Object<[::std::mem::MaybeUninit<_T>]> =
                ::dafny_runtime::array::placebos_usize_object::<_T>(
                    ::dafny_runtime::DafnyUsize::into_usize(xs.cardinality()),
                );
            for r#__i0_0 in
                ::dafny_runtime::integer_range(0, ::dafny_runtime::rd!(_nw0.clone()).len())
            {
                {
                    let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(r#__i0_0.clone());
                    ::dafny_runtime::md!(_nw0)[__idx0] = ::std::mem::MaybeUninit::new((&_init0)(
                        &::dafny_runtime::int!(r#__i0_0.clone()),
                    ));
                }
            }
            a = ::dafny_runtime::MaybePlacebo::from(::dafny_runtime::array::construct_object(
                _nw0.clone(),
            ));
            return a.read();
        }
        pub fn ToSet<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Set<_T> {
            (&({
                let mut xs = xs.clone();
                ::std::rc::Rc::new(move || -> ::dafny_runtime::Set<_T> {
                    let mut _coll0: ::dafny_runtime::SetBuilder<_T> =
                        ::dafny_runtime::SetBuilder::<_T>::new();
                    for r#__compr_0 in (&xs).iter() {
                        let mut x: _T = r#__compr_0.clone();
                        if xs.contains(&x) {
                            _coll0.add(&x)
                        }
                    }
                    _coll0.build()
                })
            }))()
        }
        pub fn IndexOf<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::dafny_runtime::_System::nat {
            let mut _accumulator: ::dafny_runtime::_System::nat = ::dafny_runtime::int!(0);
            let mut xs = xs.clone();
            let mut v = v.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.get(&::dafny_runtime::int!(0)) == v.clone() {
                    return ::dafny_runtime::int!(0) + _accumulator.clone();
                } else {
                    _accumulator = _accumulator.clone() + ::dafny_runtime::int!(1);
                    let mut _in6: ::dafny_runtime::Sequence<_T> =
                        xs.drop(&::dafny_runtime::int!(1));
                    let mut _in7: _T = v.clone();
                    xs = _in6.clone();
                    v = _in7.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn IndexOfOption<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>>
        {
            if xs.cardinality() == ::dafny_runtime::int!(0) {
                ::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Option::<::dafny_runtime::DafnyInt>::None {},
                )
            } else {
                if xs.get(&::dafny_runtime::int!(0)) == v.clone() {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::DafnyInt,
                    >::Some {
                        value: ::dafny_runtime::int!(0),
                    })
                } else {
                    let mut r#_o_k: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
                    > = crate::r#_Seq_Compile::_default::IndexOfOption::<_T>(
                        &xs.drop(&::dafny_runtime::int!(1)),
                        v,
                    );
                    if matches!(
                        (&r#_o_k).as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::DafnyInt,
                        >::Some {
                            value: r#_o_k.value().clone() + ::dafny_runtime::int!(1),
                        })
                    } else {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::DafnyInt,
                        >::None {})
                    }
                }
            }
        }
        pub fn LastIndexOf<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::dafny_runtime::_System::nat {
            let mut xs = xs.clone();
            let mut v = v.clone();
            'TAIL_CALL_START: loop {
                if xs.get(&(xs.cardinality() - ::dafny_runtime::int!(1))) == v.clone() {
                    return xs.cardinality() - ::dafny_runtime::int!(1);
                } else {
                    let mut _in8: ::dafny_runtime::Sequence<_T> =
                        xs.take(&(xs.cardinality() - ::dafny_runtime::int!(1)));
                    let mut _in9: _T = v.clone();
                    xs = _in8.clone();
                    v = _in9.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn LastIndexOfOption<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>>
        {
            let mut xs = xs.clone();
            let mut v = v.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::DafnyInt,
                    >::None {});
                } else {
                    if xs.get(&(xs.cardinality() - ::dafny_runtime::int!(1))) == v.clone() {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::DafnyInt,
                        >::Some {
                            value: xs.cardinality() - ::dafny_runtime::int!(1),
                        });
                    } else {
                        let mut _in10: ::dafny_runtime::Sequence<_T> =
                            xs.take(&(xs.cardinality() - ::dafny_runtime::int!(1)));
                        let mut _in11: _T = v.clone();
                        xs = _in10.clone();
                        v = _in11.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn Remove<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
            pos: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<_T> {
            xs.take(pos)
                .concat(&xs.drop(&(pos.clone() + ::dafny_runtime::int!(1))))
        }
        pub fn RemoveValue<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::dafny_runtime::Sequence<_T> {
            if !xs.contains(v) {
                xs.clone()
            } else {
                let mut i: ::dafny_runtime::_System::nat =
                    crate::r#_Seq_Compile::_default::IndexOf::<_T>(xs, v);
                xs.take(&i)
                    .concat(&xs.drop(&(i.clone() + ::dafny_runtime::int!(1))))
            }
        }
        pub fn Insert<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
            a: &_T,
            pos: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<_T> {
            xs.take(pos)
                .concat(&::dafny_runtime::seq![a.clone()])
                .concat(&xs.drop(pos))
        }
        pub fn Reverse<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut xs = xs.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.clone().to_array().len() == 0 {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                        xs.get(&(xs.cardinality() - ::dafny_runtime::int!(1)))
                    ]);
                    let mut _in12: ::dafny_runtime::Sequence<_T> = xs.slice(
                        &::dafny_runtime::int!(0),
                        &(xs.cardinality() - ::dafny_runtime::int!(1)),
                    );
                    xs = _in12.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Repeat<_T: ::dafny_runtime::DafnyType>(
            v: &_T,
            length: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut v = v.clone();
            let mut length = length.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if length.clone() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    _accumulator = _accumulator.concat(&::dafny_runtime::seq![v.clone()]);
                    let mut _in13: _T = v.clone();
                    let mut _in14: ::dafny_runtime::DafnyInt =
                        length.clone() - ::dafny_runtime::int!(1);
                    v = _in13.clone();
                    length = _in14.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Unzip<_A: ::dafny_runtime::DafnyType, _B: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<(_A, _B)>,
        ) -> (::dafny_runtime::Sequence<_A>, ::dafny_runtime::Sequence<_B>) {
            if xs.cardinality() == ::dafny_runtime::int!(0) {
                (
                    ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_A>,
                    ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_B>,
                )
            } else {
                let mut r#__let_tmp_rhs0: (
                    ::dafny_runtime::Sequence<_A>,
                    ::dafny_runtime::Sequence<_B>,
                ) = crate::r#_Seq_Compile::_default::Unzip::<_A, _B>(
                    &crate::r#_Seq_Compile::_default::DropLast::<(_A, _B)>(xs),
                );
                let mut a: ::dafny_runtime::Sequence<_A> = r#__let_tmp_rhs0.0.clone();
                let mut b: ::dafny_runtime::Sequence<_B> = r#__let_tmp_rhs0.1.clone();
                (
                    a.concat(&::dafny_runtime::seq![
                        crate::r#_Seq_Compile::_default::Last::<(_A, _B)>(xs)
                            .0
                            .clone()
                    ]),
                    b.concat(&::dafny_runtime::seq![
                        crate::r#_Seq_Compile::_default::Last::<(_A, _B)>(xs)
                            .1
                            .clone()
                    ]),
                )
            }
        }
        pub fn Zip<_A: ::dafny_runtime::DafnyType, _B: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<_A>,
            ys: &::dafny_runtime::Sequence<_B>,
        ) -> ::dafny_runtime::Sequence<(_A, _B)> {
            let mut _accumulator: ::dafny_runtime::Sequence<(_A, _B)> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<(_A, _B)>;
            let mut xs = xs.clone();
            let mut ys = ys.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return (::dafny_runtime::seq![] as ::dafny_runtime::Sequence<(_A, _B)>)
                        .concat(&_accumulator);
                } else {
                    _accumulator = ::dafny_runtime::seq![(
                        crate::r#_Seq_Compile::_default::Last::<_A>(&xs),
                        crate::r#_Seq_Compile::_default::Last::<_B>(&ys)
                    )]
                    .concat(&_accumulator);
                    let mut _in15: ::dafny_runtime::Sequence<_A> =
                        crate::r#_Seq_Compile::_default::DropLast::<_A>(&xs);
                    let mut _in16: ::dafny_runtime::Sequence<_B> =
                        crate::r#_Seq_Compile::_default::DropLast::<_B>(&ys);
                    xs = _in15.clone();
                    ys = _in16.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Max(
            xs: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
        ) -> ::dafny_runtime::DafnyInt {
            if xs.cardinality() == ::dafny_runtime::int!(1) {
                xs.get(&::dafny_runtime::int!(0))
            } else {
                crate::r#_Math_Compile::_default::Max(
                    &xs.get(&::dafny_runtime::int!(0)),
                    &crate::r#_Seq_Compile::_default::Max(&xs.drop(&::dafny_runtime::int!(1))),
                )
            }
        }
        pub fn Min(
            xs: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
        ) -> ::dafny_runtime::DafnyInt {
            if xs.cardinality() == ::dafny_runtime::int!(1) {
                xs.get(&::dafny_runtime::int!(0))
            } else {
                crate::r#_Math_Compile::_default::Min(
                    &xs.get(&::dafny_runtime::int!(0)),
                    &crate::r#_Seq_Compile::_default::Min(&xs.drop(&::dafny_runtime::int!(1))),
                )
            }
        }
        pub fn Flatten<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut xs = xs.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    _accumulator = _accumulator.concat(&xs.get(&::dafny_runtime::int!(0)));
                    let mut _in17: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> =
                        xs.drop(&::dafny_runtime::int!(1));
                    xs = _in17.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn FlattenReverse<_T: ::dafny_runtime::DafnyType>(
            xs: &::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut xs = xs.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return (::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>)
                        .concat(&_accumulator);
                } else {
                    _accumulator =
                        crate::r#_Seq_Compile::_default::Last::<::dafny_runtime::Sequence<_T>>(&xs)
                            .concat(&_accumulator);
                    let mut _in18: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> =
                        crate::r#_Seq_Compile::_default::DropLast::<::dafny_runtime::Sequence<_T>>(
                            &xs,
                        );
                    xs = _in18.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Map<_T: ::dafny_runtime::DafnyType, _R: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> _R>,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_R> {
            {
                let _initializer = {
                    let f: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> _R> = f.clone();
                    let xs: ::dafny_runtime::Sequence<_T> = xs.clone();
                    {
                        let mut f = f.clone();
                        let mut xs = xs.clone();
                        ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> _R {
                            (&f)(&xs.get(i))
                        })
                    }
                };
                ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), xs.cardinality())
                    .map(|i| _initializer(&i))
                    .collect::<::dafny_runtime::Sequence<_>>()
            }
        }
        pub fn MapWithResult<
            _T: ::dafny_runtime::DafnyType,
            _R: ::dafny_runtime::DafnyType,
            _E: ::dafny_runtime::DafnyType,
        >(
            f: &::std::rc::Rc<
                dyn ::std::ops::Fn(
                    &_T,
                )
                    -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_R, _E>>,
            >,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>>
        {
            if xs.cardinality() == ::dafny_runtime::int!(0) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<_R>,
                    _E,
                >::Success {
                    value: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>,
                })
            } else {
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_R, _E>> =
                    f(&xs.get(&::dafny_runtime::int!(0)));
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<_R>>()
                } else {
                    let mut head: _R = valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                    > = crate::r#_Seq_Compile::_default::MapWithResult::<_T, _R, _E>(
                        f,
                        &xs.drop(&::dafny_runtime::int!(1)),
                    );
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<_R>>()
                    } else {
                        let mut tail: ::dafny_runtime::Sequence<_R> = valueOrError1.Extract();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Sequence<_R>,
                            _E,
                        >::Success {
                            value: ::dafny_runtime::seq![head.clone()].concat(&tail),
                        })
                    }
                }
            }
        }
        pub fn Filter<_T: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool>,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut f = f.clone();
            let mut xs = xs.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    _accumulator = _accumulator.concat(
                        &(if (&f)(&xs.get(&::dafny_runtime::int!(0))) {
                            ::dafny_runtime::seq![xs.get(&::dafny_runtime::int!(0))]
                        } else {
                            ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>
                        }),
                    );
                    let mut _in19: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool> = f.clone();
                    let mut _in20: ::dafny_runtime::Sequence<_T> =
                        xs.drop(&::dafny_runtime::int!(1));
                    f = _in19.clone();
                    xs = _in20.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn FoldLeft<_A: ::dafny_runtime::DafnyType, _T: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_A, &_T) -> _A>,
            init: &_A,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> _A {
            let mut f = f.clone();
            let mut init = init.clone();
            let mut xs = xs.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return init.clone();
                } else {
                    let mut _in21: ::std::rc::Rc<dyn ::std::ops::Fn(&_A, &_T) -> _A> = f.clone();
                    let mut _in22: _A = (&f)(&init, &xs.get(&::dafny_runtime::int!(0)));
                    let mut _in23: ::dafny_runtime::Sequence<_T> =
                        xs.drop(&::dafny_runtime::int!(1));
                    f = _in21.clone();
                    init = _in22.clone();
                    xs = _in23.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn FoldRight<_A: ::dafny_runtime::DafnyType, _T: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_A) -> _A>,
            xs: &::dafny_runtime::Sequence<_T>,
            init: &_A,
        ) -> _A {
            if xs.cardinality() == ::dafny_runtime::int!(0) {
                init.clone()
            } else {
                f(
                    &xs.get(&::dafny_runtime::int!(0)),
                    &crate::r#_Seq_Compile::_default::FoldRight::<_A, _T>(
                        f,
                        &xs.drop(&::dafny_runtime::int!(1)),
                        init,
                    ),
                )
            }
        }
        pub fn FlatMap<_T: ::dafny_runtime::DafnyType, _R: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> ::dafny_runtime::Sequence<_R>>,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_R> {
            let mut result = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_R>>::new();
            result = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>
            );
            let mut _lo0: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            for i in ::dafny_runtime::integer_range_down(xs.cardinality(), _lo0.clone()) {
                let mut next: ::dafny_runtime::Sequence<_R> = f(&xs.get(&i));
                result = ::dafny_runtime::MaybePlacebo::from(next.concat(&result.read()));
            }
            return result.read();
        }
        pub fn SetToSeq<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Set<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut xs = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_T>>::new();
            xs = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>
            );
            let mut left: ::dafny_runtime::Set<_T> = s.clone();
            while left.clone() != ::dafny_runtime::set! {} {
                let mut x = ::dafny_runtime::MaybePlacebo::<_T>::new();
                'label_goto__ASSIGN_SUCH_THAT_0: loop {
                    for r#__assign_such_that_0 in (&left).iter().cloned() {
                        x = ::dafny_runtime::MaybePlacebo::from(r#__assign_such_that_0.clone());
                        if left.contains(&x.read()) {
                            break 'label_goto__ASSIGN_SUCH_THAT_0;
                        }
                    }
                    panic!("Halt");
                    break;
                }
                left = left.subtract(&::dafny_runtime::set! {x.read()});
                xs = ::dafny_runtime::MaybePlacebo::from(
                    xs.read().concat(&::dafny_runtime::seq![x.read()]),
                );
            }
            return xs.read();
        }
        pub fn SetToSortedSeq<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Set<_T>,
            R: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut xs = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_T>>::new();
            let mut _out0 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_T>>::new();
            _out0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_Seq_Compile::_default::SetToSeq::<_T>(s),
            );
            xs = ::dafny_runtime::MaybePlacebo::from(_out0.read());
            xs = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_Seq_Compile::r#_MergeSort_Compile::_default::MergeSortBy::<_T>(
                    &xs.read(),
                    R,
                ),
            );
            return xs.read();
        }
    }

    pub mod r#_MergeSort_Compile {
        pub struct _default {}

        impl _default {
            pub fn MergeSortBy<_T: ::dafny_runtime::DafnyType>(
                a: &::dafny_runtime::Sequence<_T>,
                lessThanOrEq: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
            ) -> ::dafny_runtime::Sequence<_T> {
                if a.cardinality() <= ::dafny_runtime::int!(1) {
                    a.clone()
                } else {
                    let mut splitIndex: ::dafny_runtime::DafnyInt =
                        (::dafny_runtime::euclidian_division)(
                            a.cardinality(),
                            ::dafny_runtime::int!(2),
                        );
                    let mut left: ::dafny_runtime::Sequence<_T> = a.take(&splitIndex);
                    let mut right: ::dafny_runtime::Sequence<_T> = a.drop(&splitIndex);
                    let mut leftSorted: ::dafny_runtime::Sequence<_T> =
                        crate::r#_Seq_Compile::r#_MergeSort_Compile::_default::MergeSortBy::<_T>(
                            &left,
                            lessThanOrEq,
                        );
                    let mut rightSorted: ::dafny_runtime::Sequence<_T> =
                        crate::r#_Seq_Compile::r#_MergeSort_Compile::_default::MergeSortBy::<_T>(
                            &right,
                            lessThanOrEq,
                        );
                    crate::r#_Seq_Compile::r#_MergeSort_Compile::_default::MergeSortedWith::<_T>(
                        &leftSorted,
                        &rightSorted,
                        lessThanOrEq,
                    )
                }
            }
            pub fn MergeSortedWith<_T: ::dafny_runtime::DafnyType>(
                left: &::dafny_runtime::Sequence<_T>,
                right: &::dafny_runtime::Sequence<_T>,
                lessThanOrEq: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
            ) -> ::dafny_runtime::Sequence<_T> {
                let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                    ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
                let mut left = left.clone();
                let mut right = right.clone();
                let mut lessThanOrEq = lessThanOrEq.clone();
                let mut _accumulator = _accumulator.clone();
                'TAIL_CALL_START: loop {
                    if left.cardinality() == ::dafny_runtime::int!(0) {
                        return _accumulator.concat(&right);
                    } else {
                        if right.cardinality() == ::dafny_runtime::int!(0) {
                            return _accumulator.concat(&left);
                        } else {
                            if (&lessThanOrEq)(
                                &left.get(&::dafny_runtime::int!(0)),
                                &right.get(&::dafny_runtime::int!(0)),
                            ) {
                                _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                    left.get(&::dafny_runtime::int!(0))
                                ]);
                                let mut _in0: ::dafny_runtime::Sequence<_T> =
                                    left.drop(&::dafny_runtime::int!(1));
                                let mut _in1: ::dafny_runtime::Sequence<_T> = right.clone();
                                let mut _in2: ::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool> =
                                    lessThanOrEq.clone();
                                left = _in0.clone();
                                right = _in1.clone();
                                lessThanOrEq = _in2.clone();
                                continue 'TAIL_CALL_START;
                            } else {
                                _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                    right.get(&::dafny_runtime::int!(0))
                                ]);
                                let mut _in3: ::dafny_runtime::Sequence<_T> = left.clone();
                                let mut _in4: ::dafny_runtime::Sequence<_T> =
                                    right.drop(&::dafny_runtime::int!(1));
                                let mut _in5: ::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool> =
                                    lessThanOrEq.clone();
                                left = _in3.clone();
                                right = _in4.clone();
                                lessThanOrEq = _in5.clone();
                                continue 'TAIL_CALL_START;
                            }
                        }
                    }
                }
            }
        }
    }
}
pub mod r#_Math_Compile {
    pub struct _default {}

    impl _default {
        pub fn Min(
            a: &::dafny_runtime::DafnyInt,
            b: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            if a.clone() < b.clone() {
                a.clone()
            } else {
                b.clone()
            }
        }
        pub fn Max(
            a: &::dafny_runtime::DafnyInt,
            b: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            if a.clone() < b.clone() {
                b.clone()
            } else {
                a.clone()
            }
        }
        pub fn Abs(a: &::dafny_runtime::DafnyInt) -> ::dafny_runtime::DafnyInt {
            if a.clone() >= ::dafny_runtime::int!(0) {
                a.clone()
            } else {
                ::dafny_runtime::int!(0) - a.clone()
            }
        }
    }
}
pub mod r#_BoundedInts_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::default::Default;

    pub struct _default {}

    impl _default {
        pub fn TWO_TO_THE_8() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(256)
        }
        pub fn UINT8_MAX() -> u8 {
            255
        }
        pub fn TWO_TO_THE_16() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"65536")
        }
        pub fn UINT16_MAX() -> u16 {
            65535
        }
        pub fn TWO_TO_THE_32() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"4294967296")
        }
        pub fn UINT32_MAX() -> u32 {
            4294967295
        }
        pub fn TWO_TO_THE_64() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"18446744073709551616")
        }
        pub fn UINT64_MAX() -> u64 {
            18446744073709551615
        }
        pub fn INT8_MIN() -> i8 {
            -128
        }
        pub fn INT8_MAX() -> i8 {
            127
        }
        pub fn INT16_MIN() -> i16 {
            -32768
        }
        pub fn INT16_MAX() -> i16 {
            32767
        }
        pub fn INT32_MIN() -> i32 {
            -2147483648
        }
        pub fn INT32_MAX() -> i32 {
            2147483647
        }
        pub fn INT64_MIN() -> i64 {
            -9223372036854775808
        }
        pub fn INT64_MAX() -> i64 {
            9223372036854775807
        }
        pub fn NAT8_MAX() -> u8 {
            127
        }
        pub fn NAT16_MAX() -> u16 {
            32767
        }
        pub fn NAT32_MAX() -> u32 {
            2147483647
        }
        pub fn NAT64_MAX() -> u64 {
            9223372036854775807
        }
        pub fn TWO_TO_THE_0() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(1)
        }
        pub fn TWO_TO_THE_1() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(2)
        }
        pub fn TWO_TO_THE_2() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(4)
        }
        pub fn TWO_TO_THE_4() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(16)
        }
        pub fn TWO_TO_THE_5() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(32)
        }
        pub fn TWO_TO_THE_24() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"16777216")
        }
        pub fn TWO_TO_THE_40() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"1099511627776")
        }
        pub fn TWO_TO_THE_48() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"281474976710656")
        }
        pub fn TWO_TO_THE_56() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"72057594037927936")
        }
        pub fn TWO_TO_THE_128() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"340282366920938463463374607431768211456")
        }
        pub fn TWO_TO_THE_256() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(
                b"115792089237316195423570985008687907853269984665640564039457584007913129639936"
            )
        }
        pub fn TWO_TO_THE_512() -> ::dafny_runtime::DafnyInt {
            ::dafny_runtime::int!(b"13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096")
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct uint8(pub u8);

    impl uint8 {
        pub fn is(_source: u8) -> bool {
            return true;
        }
    }

    impl Default for uint8 {
        fn default() -> Self {
            uint8(::std::default::Default::default())
        }
    }

    impl DafnyPrint for uint8 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for uint8 {
        type Target = u8;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct uint16(pub u16);

    impl uint16 {
        pub fn is(_source: u16) -> bool {
            return true;
        }
    }

    impl Default for uint16 {
        fn default() -> Self {
            uint16(::std::default::Default::default())
        }
    }

    impl DafnyPrint for uint16 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for uint16 {
        type Target = u16;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct uint32(pub u32);

    impl uint32 {
        pub fn is(_source: u32) -> bool {
            return true;
        }
    }

    impl Default for uint32 {
        fn default() -> Self {
            uint32(::std::default::Default::default())
        }
    }

    impl DafnyPrint for uint32 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for uint32 {
        type Target = u32;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct uint64(pub u64);

    impl uint64 {
        pub fn is(_source: u64) -> bool {
            return true;
        }
    }

    impl Default for uint64 {
        fn default() -> Self {
            uint64(::std::default::Default::default())
        }
    }

    impl DafnyPrint for uint64 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for uint64 {
        type Target = u64;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct int8(pub i8);

    impl int8 {
        pub fn is(_source: i8) -> bool {
            return true;
        }
    }

    impl Default for int8 {
        fn default() -> Self {
            int8(::std::default::Default::default())
        }
    }

    impl DafnyPrint for int8 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for int8 {
        type Target = i8;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct int16(pub i16);

    impl int16 {
        pub fn is(_source: i16) -> bool {
            return true;
        }
    }

    impl Default for int16 {
        fn default() -> Self {
            int16(::std::default::Default::default())
        }
    }

    impl DafnyPrint for int16 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for int16 {
        type Target = i16;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct int32(pub i32);

    impl int32 {
        pub fn is(_source: i32) -> bool {
            return true;
        }
    }

    impl Default for int32 {
        fn default() -> Self {
            int32(::std::default::Default::default())
        }
    }

    impl DafnyPrint for int32 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for int32 {
        type Target = i32;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct int64(pub i64);

    impl int64 {
        pub fn is(_source: i64) -> bool {
            return true;
        }
    }

    impl Default for int64 {
        fn default() -> Self {
            int64(::std::default::Default::default())
        }
    }

    impl DafnyPrint for int64 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for int64 {
        type Target = i64;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct nat8(pub u8);

    impl nat8 {
        pub fn is(_source: u8) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone() && x.clone() < ::dafny_runtime::int!(128);
        }
    }

    impl Default for nat8 {
        fn default() -> Self {
            nat8(::std::default::Default::default())
        }
    }

    impl DafnyPrint for nat8 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for nat8 {
        type Target = u8;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct nat16(pub u16);

    impl nat16 {
        pub fn is(_source: u16) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone()
                && x.clone() < ::dafny_runtime::int!(b"32768");
        }
    }

    impl Default for nat16 {
        fn default() -> Self {
            nat16(::std::default::Default::default())
        }
    }

    impl DafnyPrint for nat16 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for nat16 {
        type Target = u16;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct nat32(pub u32);

    impl nat32 {
        pub fn is(_source: u32) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone()
                && x.clone() < ::dafny_runtime::int!(b"2147483648");
        }
    }

    impl Default for nat32 {
        fn default() -> Self {
            nat32(::std::default::Default::default())
        }
    }

    impl DafnyPrint for nat32 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for nat32 {
        type Target = u32;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct nat64(pub u64);

    impl nat64 {
        pub fn is(_source: u64) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone()
                && x.clone() < ::dafny_runtime::int!(b"9223372036854775808");
        }
    }

    impl Default for nat64 {
        fn default() -> Self {
            nat64(::std::default::Default::default())
        }
    }

    impl DafnyPrint for nat64 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for nat64 {
        type Target = u64;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct opt_byte(pub i16);

    impl opt_byte {
        pub fn is(_source: i16) -> bool {
            let mut c: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(-1) <= c.clone()
                && c.clone() < crate::r#_BoundedInts_Compile::_default::TWO_TO_THE_8();
        }
    }

    impl Default for opt_byte {
        fn default() -> Self {
            opt_byte(::std::default::Default::default())
        }
    }

    impl DafnyPrint for opt_byte {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for opt_byte {
        type Target = i16;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
}
pub mod r#_Unicode_Compile {
    pub struct _default {}

    impl _default {
        pub fn HIGH_SURROGATE_MIN() -> crate::r#_Unicode_Compile::CodePoint {
            (55296) as u32
        }
        pub fn HIGH_SURROGATE_MAX() -> crate::r#_Unicode_Compile::CodePoint {
            (56319) as u32
        }
        pub fn LOW_SURROGATE_MIN() -> crate::r#_Unicode_Compile::CodePoint {
            (56320) as u32
        }
        pub fn LOW_SURROGATE_MAX() -> crate::r#_Unicode_Compile::CodePoint {
            (57343) as u32
        }
        pub fn ASSIGNED_PLANES() -> ::dafny_runtime::Set<u8> {
            ::dafny_runtime::set! {(0) as u8, (1) as u8, (2) as u8, (3) as u8, (14) as u8, (15) as u8, (16) as u8}
        }
    }

    pub type CodePoint = u32;

    pub type HighSurrogateCodePoint = u32;

    pub fn r#__init_HighSurrogateCodePoint() -> u32 {
        crate::r#_Unicode_Compile::_default::HIGH_SURROGATE_MIN()
    }

    pub type LowSurrogateCodePoint = u32;

    pub fn r#__init_LowSurrogateCodePoint() -> u32 {
        crate::r#_Unicode_Compile::_default::LOW_SURROGATE_MIN()
    }

    pub type ScalarValue = u32;

    pub type AssignedCodePoint = u32;
}
pub mod r#_Functions_Compile {}
pub mod r#_Utf8EncodingForm_Compile {
    pub struct _default {}

    impl _default {
        pub fn IsMinimalWellFormedCodeUnitSubsequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            if s.cardinality() == ::dafny_runtime::int!(1) {
                let mut b: bool = crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedSingleCodeUnitSequence(s);
                b
            } else {
                if s.cardinality() == ::dafny_runtime::int!(2) {
                    let mut b: bool = crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedDoubleCodeUnitSequence(s);
                    b
                } else {
                    if s.cardinality() == ::dafny_runtime::int!(3) {
                        let mut b: bool = crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedTripleCodeUnitSequence(s);
                        b
                    } else {
                        if s.cardinality() == ::dafny_runtime::int!(4) {
                            let mut b: bool = crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedQuadrupleCodeUnitSequence(s);
                            b
                        } else {
                            false
                        }
                    }
                }
            }
        }
        pub fn IsWellFormedSingleCodeUnitSequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            let mut firstByte: u8 = s.get(&::dafny_runtime::int!(0));
            true && (((0) as u8) <= firstByte && firstByte <= ((127) as u8))
        }
        pub fn IsWellFormedDoubleCodeUnitSequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            let mut firstByte: u8 = s.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = s.get(&::dafny_runtime::int!(1));
            ((194) as u8) <= firstByte
                && firstByte <= ((223) as u8)
                && (((128) as u8) <= secondByte && secondByte <= ((191) as u8))
        }
        pub fn IsWellFormedTripleCodeUnitSequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            let mut firstByte: u8 = s.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = s.get(&::dafny_runtime::int!(1));
            let mut thirdByte: u8 = s.get(&::dafny_runtime::int!(2));
            (firstByte == (224) as u8
                && (((160) as u8) <= secondByte && secondByte <= ((191) as u8))
                || ((225) as u8) <= firstByte
                    && firstByte <= ((236) as u8)
                    && (((128) as u8) <= secondByte && secondByte <= ((191) as u8))
                || firstByte == (237) as u8
                    && (((128) as u8) <= secondByte && secondByte <= ((159) as u8))
                || ((238) as u8) <= firstByte
                    && firstByte <= ((239) as u8)
                    && (((128) as u8) <= secondByte && secondByte <= ((191) as u8)))
                && (((128) as u8) <= thirdByte && thirdByte <= ((191) as u8))
        }
        pub fn IsWellFormedQuadrupleCodeUnitSequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            let mut firstByte: u8 = s.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = s.get(&::dafny_runtime::int!(1));
            let mut thirdByte: u8 = s.get(&::dafny_runtime::int!(2));
            let mut fourthByte: u8 = s.get(&::dafny_runtime::int!(3));
            (firstByte == (240) as u8
                && (((144) as u8) <= secondByte && secondByte <= ((191) as u8))
                || ((241) as u8) <= firstByte
                    && firstByte <= ((243) as u8)
                    && (((128) as u8) <= secondByte && secondByte <= ((191) as u8))
                || firstByte == (244) as u8
                    && (((128) as u8) <= secondByte && secondByte <= ((143) as u8)))
                && (((128) as u8) <= thirdByte && thirdByte <= ((191) as u8))
                && (((128) as u8) <= fourthByte && fourthByte <= ((191) as u8))
        }
        pub fn SplitPrefixMinimalWellFormedCodeUnitSubsequence(
            s: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            >,
        > {
            if s.cardinality() >= ::dafny_runtime::int!(1)
                && crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedSingleCodeUnitSequence(
                    &s.take(&::dafny_runtime::int!(1)),
                )
            {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<u8>,
                >::Some {
                    value: s.take(&::dafny_runtime::int!(1)),
                })
            } else {
                if s.cardinality() >= ::dafny_runtime::int!(2) && crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedDoubleCodeUnitSequence(&s.take(&::dafny_runtime::int!(2))) {
          ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::Some {
              value: s.take(&::dafny_runtime::int!(2))
            })
        } else {
          if s.cardinality() >= ::dafny_runtime::int!(3) && crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedTripleCodeUnitSequence(&s.take(&::dafny_runtime::int!(3))) {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::Some {
                value: s.take(&::dafny_runtime::int!(3))
              })
          } else {
            if s.cardinality() >= ::dafny_runtime::int!(4) && crate::r#_Utf8EncodingForm_Compile::_default::IsWellFormedQuadrupleCodeUnitSequence(&s.take(&::dafny_runtime::int!(4))) {
              ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::Some {
                  value: s.take(&::dafny_runtime::int!(4))
                })
            } else {
              ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::None {})
            }
          }
        }
            }
        }
        pub fn EncodeScalarValue(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq {
            if v <= ((127) as u32) {
                crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarValueSingleByte(v)
            } else {
                if v <= ((2047) as u32) {
                    crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarValueDoubleByte(v)
                } else {
                    if v <= ((65535) as u32) {
                        crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarValueTripleByte(v)
                    } else {
                        crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarValueQuadrupleByte(
                            v,
                        )
                    }
                }
            }
        }
        pub fn EncodeScalarValueSingleByte(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq {
            let mut x: u8 = (v & (127) as u32) as u8;
            let mut firstByte: u8 = x;
            ::dafny_runtime::seq![firstByte]
        }
        pub fn EncodeScalarValueDoubleByte(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut x: u8 = (v & (63) as u32) as u8;
            let mut y: u8 = ((v & (1984) as u32) >> 6) as u8;
            let mut firstByte: u8 = (192) as u8 | y;
            let mut secondByte: u8 = (128) as u8 | x;
            ::dafny_runtime::seq![firstByte, secondByte]
        }
        pub fn EncodeScalarValueTripleByte(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut x: u8 = (v & (63) as u32) as u8;
            let mut y: u8 = ((v & (4032) as u32) >> 6) as u8;
            let mut z: u8 = ((v & (61440) as u32) >> 12) as u8;
            let mut firstByte: u8 = (224) as u8 | z;
            let mut secondByte: u8 = (128) as u8 | y;
            let mut thirdByte: u8 = (128) as u8 | x;
            ::dafny_runtime::seq![firstByte, secondByte, thirdByte]
        }
        pub fn EncodeScalarValueQuadrupleByte(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut x: u8 = (v & (63) as u32) as u8;
            let mut y: u8 = ((v & (4032) as u32) >> 6) as u8;
            let mut z: u8 = ((v & (61440) as u32) >> 12) as u8;
            let mut u2: u8 = ((v & (196608) as u32) >> 16) as u8;
            let mut u1: u8 = ((v & (1835008) as u32) >> 18) as u8;
            let mut firstByte: u8 = (240) as u8 | u1;
            let mut secondByte: u8 = (128) as u8 | u2 << 4 | z;
            let mut thirdByte: u8 = (128) as u8 | y;
            let mut fourthByte: u8 = (128) as u8 | x;
            ::dafny_runtime::seq![firstByte, secondByte, thirdByte, fourthByte]
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequence(
            m: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            if m.cardinality() == ::dafny_runtime::int!(1) {
                crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceSingleByte(m)
            } else {
                if m.cardinality() == ::dafny_runtime::int!(2) {
                    crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceDoubleByte(m)
                } else {
                    if m.cardinality() == ::dafny_runtime::int!(3) {
                        crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceTripleByte(m)
                    } else {
                        crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceQuadrupleByte(m)
                    }
                }
            }
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceSingleByte(
            m: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstByte: u8 = m.get(&::dafny_runtime::int!(0));
            let mut x: u8 = firstByte;
            x as u32
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceDoubleByte(
            m: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstByte: u8 = m.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = m.get(&::dafny_runtime::int!(1));
            let mut y: u32 = (firstByte & (31) as u8) as u32;
            let mut x: u32 = (secondByte & (63) as u8) as u32;
            y << 6 | x
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceTripleByte(
            m: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstByte: u8 = m.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = m.get(&::dafny_runtime::int!(1));
            let mut thirdByte: u8 = m.get(&::dafny_runtime::int!(2));
            let mut z: u32 = (firstByte & (15) as u8) as u32;
            let mut y: u32 = (secondByte & (63) as u8) as u32;
            let mut x: u32 = (thirdByte & (63) as u8) as u32;
            z << 12 | y << 6 | x
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceQuadrupleByte(
            m: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstByte: u8 = m.get(&::dafny_runtime::int!(0));
            let mut secondByte: u8 = m.get(&::dafny_runtime::int!(1));
            let mut thirdByte: u8 = m.get(&::dafny_runtime::int!(2));
            let mut fourthByte: u8 = m.get(&::dafny_runtime::int!(3));
            let mut u1: u32 = (firstByte & (7) as u8) as u32;
            let mut u2: u32 = ((secondByte & (48) as u8) >> 4) as u32;
            let mut z: u32 = (secondByte & (15) as u8) as u32;
            let mut y: u32 = (thirdByte & (63) as u8) as u32;
            let mut x: u32 = (fourthByte & (63) as u8) as u32;
            u1 << 18 | u2 << 16 | z << 12 | y << 6 | x
        }
        pub fn PartitionCodeUnitSequenceChecked(
            s: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<
                    crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                >,
            >,
        > {
            let mut maybeParts = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<
                            crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >,
                >,
            >::new();
            if s.clone().to_array().len() == 0 {
                maybeParts = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<
                            crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >::Some {
                        value: ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<
                                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                            >,
                    },
                ));
                return maybeParts.read();
            };
            let mut result: ::dafny_runtime::Sequence<
                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                >;
            let mut rest: ::dafny_runtime::Sequence<u8> = s.clone();
            while ::dafny_runtime::int!(0) < rest.cardinality() {
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Option<
                            crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >,
                >::new();
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Utf8EncodingForm_Compile::_default::SplitPrefixMinimalWellFormedCodeUnitSubsequence(&rest));
                if valueOrError0.read().IsFailure() {
                    maybeParts = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Sequence<
                                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                            >>(),
                    );
                    return maybeParts.read();
                };
                let mut prefix: crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq =
                    valueOrError0.read().Extract();
                result = result.concat(&::dafny_runtime::seq![prefix.clone()]);
                rest = rest.drop(&prefix.cardinality());
            }
            maybeParts = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<
                        crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    >,
                >::Some {
                    value: result.clone(),
                },
            ));
            return maybeParts.read();
        }
        pub fn PartitionCodeUnitSequence(
            s: &crate::r#_Utf8EncodingForm_Compile::WellFormedCodeUnitSeq,
        ) -> ::dafny_runtime::Sequence<
            crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        > {
            crate::r#_Utf8EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(s)
                .Extract()
        }
        pub fn IsWellFormedCodeUnitSequence(s: &::dafny_runtime::Sequence<u8>) -> bool {
            matches!(
                (&crate::r#_Utf8EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(
                    s
                ))
                    .as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            )
        }
        pub fn EncodeScalarSequence(
            vs: &::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
        ) -> crate::r#_Utf8EncodingForm_Compile::WellFormedCodeUnitSeq {
            let mut s: crate::r#_Utf8EncodingForm_Compile::WellFormedCodeUnitSeq =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            s = ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            let mut _lo1: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            for i in ::dafny_runtime::integer_range_down(vs.cardinality(), _lo1.clone()) {
                let mut next: crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq =
                    crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarValue(vs.get(&i));
                s = next.concat(&s);
            }
            return s.clone();
        }
        pub fn DecodeCodeUnitSequence(
            s: &crate::r#_Utf8EncodingForm_Compile::WellFormedCodeUnitSeq,
        ) -> ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> {
            let mut parts: ::dafny_runtime::Sequence<
                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = crate::r#_Utf8EncodingForm_Compile::_default::PartitionCodeUnitSequence(s);
            let mut vs: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                crate::r#_Seq_Compile::_default::Map::<
                    crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    crate::r#_Unicode_Compile::ScalarValue,
                >(
                    &(::std::rc::Rc::new(
                        |x0: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq| {
                            crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequence(x0)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>),
                    &parts,
                );
            vs.clone()
        }
        pub fn DecodeCodeUnitSequenceChecked(
            s: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
            >,
        > {
            let mut maybeVs = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                    >,
                >,
            >::new();
            let mut maybeParts: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<
                        crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    >,
                >,
            > = crate::r#_Utf8EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(s);
            if matches!(
                (&maybeParts).as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                maybeVs = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                    >::None {},
                ));
                return maybeVs.read();
            };
            let mut parts: ::dafny_runtime::Sequence<
                crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = maybeParts.value().clone();
            let mut vs: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                crate::r#_Seq_Compile::_default::Map::<
                    crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    crate::r#_Unicode_Compile::ScalarValue,
                >(
                    &(::std::rc::Rc::new(
                        |x0: &crate::r#_Utf8EncodingForm_Compile::MinimalWellFormedCodeUnitSeq| {
                            crate::r#_Utf8EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequence(x0)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>),
                    &parts,
                );
            maybeVs = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                >::Some {
                    value: vs.clone(),
                },
            ));
            return maybeVs.read();
        }
    }

    pub type WellFormedCodeUnitSeq = ::dafny_runtime::Sequence<u8>;

    pub fn r#__init_WellFormedCodeUnitSeq() -> ::dafny_runtime::Sequence<u8> {
        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
    }

    pub type MinimalWellFormedCodeUnitSeq = ::dafny_runtime::Sequence<u8>;
}
pub mod r#_Utf16EncodingForm_Compile {
    pub struct _default {}

    impl _default {
        pub fn IsMinimalWellFormedCodeUnitSubsequence(s: &::dafny_runtime::Sequence<u16>) -> bool {
            if s.cardinality() == ::dafny_runtime::int!(1) {
                crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedSingleCodeUnitSequence(s)
            } else {
                if s.cardinality() == ::dafny_runtime::int!(2) {
                    let mut b: bool = crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedDoubleCodeUnitSequence(s);
                    b
                } else {
                    false
                }
            }
        }
        pub fn IsWellFormedSingleCodeUnitSequence(s: &::dafny_runtime::Sequence<u16>) -> bool {
            let mut firstWord: u16 = s.get(&::dafny_runtime::int!(0));
            ((0) as u16) <= firstWord && firstWord <= ((55295) as u16)
                || ((57344) as u16) <= firstWord && firstWord <= ((65535) as u16)
        }
        pub fn IsWellFormedDoubleCodeUnitSequence(s: &::dafny_runtime::Sequence<u16>) -> bool {
            let mut firstWord: u16 = s.get(&::dafny_runtime::int!(0));
            let mut secondWord: u16 = s.get(&::dafny_runtime::int!(1));
            ((55296) as u16) <= firstWord
                && firstWord <= ((56319) as u16)
                && (((56320) as u16) <= secondWord && secondWord <= ((57343) as u16))
        }
        pub fn SplitPrefixMinimalWellFormedCodeUnitSubsequence(
            s: &::dafny_runtime::Sequence<u16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            >,
        > {
            if s.cardinality() >= ::dafny_runtime::int!(1)
                && crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedSingleCodeUnitSequence(
                    &s.take(&::dafny_runtime::int!(1)),
                )
            {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<u16>,
                >::Some {
                    value: s.take(&::dafny_runtime::int!(1)),
                })
            } else {
                if s.cardinality() >= ::dafny_runtime::int!(2) && crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedDoubleCodeUnitSequence(&s.take(&::dafny_runtime::int!(2))) {
          ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u16>>::Some {
              value: s.take(&::dafny_runtime::int!(2))
            })
        } else {
          ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u16>>::None {})
        }
            }
        }
        pub fn EncodeScalarValue(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq {
            if ((0) as u32) <= v && v <= ((55295) as u32)
                || ((57344) as u32) <= v && v <= ((65535) as u32)
            {
                crate::r#_Utf16EncodingForm_Compile::_default::EncodeScalarValueSingleWord(v)
            } else {
                crate::r#_Utf16EncodingForm_Compile::_default::EncodeScalarValueDoubleWord(v)
            }
        }
        pub fn EncodeScalarValueSingleWord(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq {
            let mut firstWord: u16 = v as u16;
            ::dafny_runtime::seq![firstWord]
        }
        pub fn EncodeScalarValueDoubleWord(
            v: crate::r#_Unicode_Compile::ScalarValue,
        ) -> crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq {
            let mut x2: u16 = (v & (1023) as u32) as u16;
            let mut x1: u8 = ((v & (64512) as u32) >> 10) as u8;
            let mut u: u8 = ((v & (2031616) as u32) >> 16) as u8;
            let mut w: u8 = u - (1) as u8;
            let mut firstWord: u16 = (55296) as u16 | (w as u16) << 6 | x1 as u16;
            let mut secondWord: u16 = (56320) as u16 | x2;
            ::dafny_runtime::seq![firstWord, secondWord]
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequence(
            m: &crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            if m.cardinality() == ::dafny_runtime::int!(1) {
                crate::r#_Utf16EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceSingleWord(m)
            } else {
                crate::r#_Utf16EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequenceDoubleWord(m)
            }
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceSingleWord(
            m: &crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstWord: u16 = m.get(&::dafny_runtime::int!(0));
            let mut x: u16 = firstWord;
            x as u32
        }
        pub fn DecodeMinimalWellFormedCodeUnitSubsequenceDoubleWord(
            m: &crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        ) -> crate::r#_Unicode_Compile::ScalarValue {
            let mut firstWord: u16 = m.get(&::dafny_runtime::int!(0));
            let mut secondWord: u16 = m.get(&::dafny_runtime::int!(1));
            let mut x2: u32 = (secondWord & (1023) as u16) as u32;
            let mut x1: u32 = (firstWord & (63) as u16) as u32;
            let mut w: u32 = ((firstWord & (960) as u16) >> 6) as u32;
            let mut u: u32 = w + (1) as u32;
            let mut v: u32 = u << 16 | x1 << 10 | x2;
            v
        }
        pub fn PartitionCodeUnitSequenceChecked(
            s: &::dafny_runtime::Sequence<u16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<
                    crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                >,
            >,
        > {
            let mut maybeParts = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<
                            crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >,
                >,
            >::new();
            if s.clone().to_array().len() == 0 {
                maybeParts = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<
                            crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >::Some {
                        value: ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<
                                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                            >,
                    },
                ));
                return maybeParts.read();
            };
            let mut result: ::dafny_runtime::Sequence<
                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                >;
            let mut rest: ::dafny_runtime::Sequence<u16> = s.clone();
            while ::dafny_runtime::int!(0) < rest.cardinality() {
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Option<
                            crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                        >,
                    >,
                >::new();
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Utf16EncodingForm_Compile::_default::SplitPrefixMinimalWellFormedCodeUnitSubsequence(&rest));
                if valueOrError0.read().IsFailure() {
                    maybeParts = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Sequence<
                                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                            >>(),
                    );
                    return maybeParts.read();
                };
                let mut prefix: crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq =
                    valueOrError0.read().Extract();
                result = result.concat(&::dafny_runtime::seq![prefix.clone()]);
                rest = rest.drop(&prefix.cardinality());
            }
            maybeParts = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<
                        crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    >,
                >::Some {
                    value: result.clone(),
                },
            ));
            return maybeParts.read();
        }
        pub fn PartitionCodeUnitSequence(
            s: &crate::r#_Utf16EncodingForm_Compile::WellFormedCodeUnitSeq,
        ) -> ::dafny_runtime::Sequence<
            crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
        > {
            crate::r#_Utf16EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(s)
                .Extract()
        }
        pub fn IsWellFormedCodeUnitSequence(s: &::dafny_runtime::Sequence<u16>) -> bool {
            matches!(
                (&crate::r#_Utf16EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(
                    s
                ))
                    .as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            )
        }
        pub fn EncodeScalarSequence(
            vs: &::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
        ) -> crate::r#_Utf16EncodingForm_Compile::WellFormedCodeUnitSeq {
            let mut s: crate::r#_Utf16EncodingForm_Compile::WellFormedCodeUnitSeq =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>;
            s = ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>;
            let mut _lo2: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            for i in ::dafny_runtime::integer_range_down(vs.cardinality(), _lo2.clone()) {
                let mut next: crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq =
                    crate::r#_Utf16EncodingForm_Compile::_default::EncodeScalarValue(vs.get(&i));
                s = next.concat(&s);
            }
            return s.clone();
        }
        pub fn DecodeCodeUnitSequence(
            s: &crate::r#_Utf16EncodingForm_Compile::WellFormedCodeUnitSeq,
        ) -> ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> {
            let mut parts: ::dafny_runtime::Sequence<
                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = crate::r#_Utf16EncodingForm_Compile::_default::PartitionCodeUnitSequence(s);
            let mut vs: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                crate::r#_Seq_Compile::_default::Map::<
                    crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    crate::r#_Unicode_Compile::ScalarValue,
                >(
                    &(::std::rc::Rc::new(
                        |x0: &crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq| {
                            crate::r#_Utf16EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequence(x0)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>),
                    &parts,
                );
            vs.clone()
        }
        pub fn DecodeCodeUnitSequenceChecked(
            s: &::dafny_runtime::Sequence<u16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
            >,
        > {
            let mut maybeVs = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                    >,
                >,
            >::new();
            let mut maybeParts: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<
                        crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    >,
                >,
            > = crate::r#_Utf16EncodingForm_Compile::_default::PartitionCodeUnitSequenceChecked(s);
            if matches!(
                (&maybeParts).as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                maybeVs = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                    >::None {},
                ));
                return maybeVs.read();
            };
            let mut parts: ::dafny_runtime::Sequence<
                crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
            > = maybeParts.value().clone();
            let mut vs: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                crate::r#_Seq_Compile::_default::Map::<
                    crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq,
                    crate::r#_Unicode_Compile::ScalarValue,
                >(
                    &(::std::rc::Rc::new(
                        |x0: &crate::r#_Utf16EncodingForm_Compile::MinimalWellFormedCodeUnitSeq| {
                            crate::r#_Utf16EncodingForm_Compile::_default::DecodeMinimalWellFormedCodeUnitSubsequence(x0)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>),
                    &parts,
                );
            maybeVs = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                >::Some {
                    value: vs.clone(),
                },
            ));
            return maybeVs.read();
        }
    }

    pub type WellFormedCodeUnitSeq = ::dafny_runtime::Sequence<u16>;

    pub fn r#__init_WellFormedCodeUnitSeq() -> ::dafny_runtime::Sequence<u16> {
        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>
    }

    pub type MinimalWellFormedCodeUnitSeq = ::dafny_runtime::Sequence<u16>;
}
pub mod r#_UnicodeStrings_Compile {
    pub struct _default {}

    impl _default {
        pub fn IsWellFormedString(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedCodeUnitSequence(
                &crate::r#_Seq_Compile::_default::Map::<::dafny_runtime::DafnyCharUTF16, u16>(
                    &({
                        ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u16 {
                            c.clone().0 as u16
                        })
                    }),
                    s,
                ),
            )
        }
        pub fn ToUTF8Checked(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>
        {
            let mut asCodeUnits: ::dafny_runtime::Sequence<u16> =
                crate::r#_Seq_Compile::_default::Map::<::dafny_runtime::DafnyCharUTF16, u16>(
                    &({
                        ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u16 {
                            c.clone().0 as u16
                        })
                    }),
                    s,
                );
            let mut valueOrError0: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                >,
            > = crate::r#_Utf16EncodingForm_Compile::_default::DecodeCodeUnitSequenceChecked(
                &asCodeUnits,
            );
            if valueOrError0.IsFailure() {
                valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
            } else {
                let mut utf32: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                    valueOrError0.Extract();
                let mut asUtf8CodeUnits: crate::r#_Utf8EncodingForm_Compile::WellFormedCodeUnitSeq =
                    crate::r#_Utf8EncodingForm_Compile::_default::EncodeScalarSequence(&utf32);
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<u8>,
                >::Some {
                    value: crate::r#_Seq_Compile::_default::Map::<u8, u8>(
                        &({ ::std::rc::Rc::new(move |c: &u8| -> u8 { c.clone() as u8 }) }),
                        &asUtf8CodeUnits,
                    ),
                })
            }
        }
        pub fn FromUTF8Checked(
            bs: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut asCodeUnits: ::dafny_runtime::Sequence<u8> =
                crate::r#_Seq_Compile::_default::Map::<u8, u8>(
                    &({ ::std::rc::Rc::new(move |c: &u8| -> u8 { c.clone() as u8 }) }),
                    bs,
                );
            let mut valueOrError0: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue>,
                >,
            > = crate::r#_Utf8EncodingForm_Compile::_default::DecodeCodeUnitSequenceChecked(
                &asCodeUnits,
            );
            if valueOrError0.IsFailure() {
                valueOrError0
                    .PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>(
                    )
            } else {
                let mut utf32: ::dafny_runtime::Sequence<crate::r#_Unicode_Compile::ScalarValue> =
                    valueOrError0.Extract();
                let mut asUtf16CodeUnits: crate::r#_Utf16EncodingForm_Compile::WellFormedCodeUnitSeq = crate::r#_Utf16EncodingForm_Compile::_default::EncodeScalarSequence(&utf32);
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Some {
                    value: crate::r#_Seq_Compile::_default::Map::<
                        u16,
                        ::dafny_runtime::DafnyCharUTF16,
                    >(
                        &({
                            ::std::rc::Rc::new(move |cu: &u16| -> ::dafny_runtime::DafnyCharUTF16 {
                                ::dafny_runtime::DafnyCharUTF16(cu.clone() as u16)
                            })
                        }),
                        &asUtf16CodeUnits,
                    ),
                })
            }
        }
        pub fn ToUTF16Checked(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u16>>>
        {
            if crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedCodeUnitSequence(
                &crate::r#_Seq_Compile::_default::Map::<::dafny_runtime::DafnyCharUTF16, u16>(
                    &({
                        ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u16 {
                            c.clone().0 as u16
                        })
                    }),
                    s,
                ),
            ) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<u16>,
                >::Some {
                    value: crate::r#_Seq_Compile::_default::Map::<
                        ::dafny_runtime::DafnyCharUTF16,
                        u16,
                    >(
                        &({
                            ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u16 {
                                c.clone().0 as u16
                            })
                        }),
                        s,
                    ),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<u16>,
                >::None {})
            }
        }
        pub fn FromUTF16Checked(
            bs: &::dafny_runtime::Sequence<u16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            if crate::r#_Utf16EncodingForm_Compile::_default::IsWellFormedCodeUnitSequence(
                &crate::r#_Seq_Compile::_default::Map::<u16, u16>(
                    &({ ::std::rc::Rc::new(move |c: &u16| -> u16 { c.clone() as u16 }) }),
                    bs,
                ),
            ) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Some {
                    value: crate::r#_Seq_Compile::_default::Map::<
                        u16,
                        ::dafny_runtime::DafnyCharUTF16,
                    >(
                        &({
                            ::std::rc::Rc::new(move |c: &u16| -> ::dafny_runtime::DafnyCharUTF16 {
                                ::dafny_runtime::DafnyCharUTF16(c.clone() as u16)
                            })
                        }),
                        bs,
                    ),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::None {})
            }
        }
        pub fn ASCIIToUTF8(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            crate::r#_Seq_Compile::_default::Map::<::dafny_runtime::DafnyCharUTF16, u8>(
                &({
                    ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u8 {
                        c.clone().0 as u8
                    })
                }),
                s,
            )
        }
        pub fn ASCIIToUTF16(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u16> {
            crate::r#_Seq_Compile::_default::Map::<::dafny_runtime::DafnyCharUTF16, u16>(
                &({
                    ::std::rc::Rc::new(move |c: &::dafny_runtime::DafnyCharUTF16| -> u16 {
                        c.clone().0 as u16
                    })
                }),
                s,
            )
        }
    }
}
pub mod r#_FileIO_Compile {
    pub struct _default {}

    impl _default {
        pub fn ReadBytesFromFile(
            path: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut isError: bool = <bool as std::default::Default>::default();
            let mut bytesRead =
                ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<u8>>::new();
            let mut errorMsg = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::new();
            let mut _out1: bool = <bool as std::default::Default>::default();
            let mut _out2 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<u8>>::new();
            let mut _out3 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::new();
            let _x =
                crate::_dafny_externs::DafnyLibraries::FileIO::INTERNAL_ReadBytesFromFile(path);
            _out1 = _x.0;
            _out2 = ::dafny_runtime::MaybePlacebo::from(_x.1);
            _out3 = ::dafny_runtime::MaybePlacebo::from(_x.2);
            isError = _out1;
            bytesRead = ::dafny_runtime::MaybePlacebo::from(_out2.read());
            errorMsg = ::dafny_runtime::MaybePlacebo::from(_out3.read());
            res = ::dafny_runtime::MaybePlacebo::from(if isError {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Failure {
                    error: errorMsg.read(),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: bytesRead.read(),
                })
            });
            return res.read();
        }
        pub fn WriteBytesToFile(
            path: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            bytes: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                (),
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        (),
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut isError: bool = <bool as std::default::Default>::default();
            let mut errorMsg = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::new();
            let mut _out4: bool = <bool as std::default::Default>::default();
            let mut _out5 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::new();
            let _x = crate::_dafny_externs::DafnyLibraries::FileIO::INTERNAL_WriteBytesToFile(
                path, bytes,
            );
            _out4 = _x.0;
            _out5 = ::dafny_runtime::MaybePlacebo::from(_x.1);
            isError = _out4;
            errorMsg = ::dafny_runtime::MaybePlacebo::from(_out5.read());
            res = ::dafny_runtime::MaybePlacebo::from(if isError {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    (),
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Failure {
                    error: errorMsg.read(),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    (),
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: (),
                })
            });
            return res.read();
        }
    }
}
pub mod r#_GeneralInternals_Compile {}
pub mod r#_MulInternalsNonlinear_Compile {}
pub mod r#_MulInternals_Compile {
    pub struct _default {}

    impl _default {
        pub fn MulPos(
            x: &::dafny_runtime::DafnyInt,
            y: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            let mut _accumulator: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            let mut x = x.clone();
            let mut y = y.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if x.clone() == ::dafny_runtime::int!(0) {
                    return ::dafny_runtime::int!(0) + _accumulator.clone();
                } else {
                    _accumulator = _accumulator.clone() + y.clone();
                    let mut _in24: ::dafny_runtime::DafnyInt = x.clone() - ::dafny_runtime::int!(1);
                    let mut _in25: ::dafny_runtime::DafnyInt = y.clone();
                    x = _in24.clone();
                    y = _in25.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn MulRecursive(
            x: &::dafny_runtime::DafnyInt,
            y: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            if x.clone() >= ::dafny_runtime::int!(0) {
                crate::r#_MulInternals_Compile::_default::MulPos(x, y)
            } else {
                ::dafny_runtime::int!(-1)
                    * crate::r#_MulInternals_Compile::_default::MulPos(
                        &(::dafny_runtime::int!(-1) * x.clone()),
                        y,
                    )
            }
        }
    }
}
pub mod r#_Mul_Compile {}
pub mod r#_ModInternalsNonlinear_Compile {}
pub mod r#_DivInternalsNonlinear_Compile {}
pub mod r#_ModInternals_Compile {
    pub struct _default {}

    impl _default {
        pub fn ModRecursive(
            x: &::dafny_runtime::DafnyInt,
            d: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            let mut x = x.clone();
            let mut d = d.clone();
            'TAIL_CALL_START: loop {
                if x.clone() < ::dafny_runtime::int!(0) {
                    let mut _in26: ::dafny_runtime::DafnyInt = d.clone() + x.clone();
                    let mut _in27: ::dafny_runtime::DafnyInt = d.clone();
                    x = _in26.clone();
                    d = _in27.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    if x.clone() < d.clone() {
                        return x.clone();
                    } else {
                        let mut _in28: ::dafny_runtime::DafnyInt = x.clone() - d.clone();
                        let mut _in29: ::dafny_runtime::DafnyInt = d.clone();
                        x = _in28.clone();
                        d = _in29.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
    }
}
pub mod r#_DivInternals_Compile {
    pub struct _default {}

    impl _default {
        pub fn DivPos(
            x: &::dafny_runtime::DafnyInt,
            d: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            let mut _accumulator: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            let mut x = x.clone();
            let mut d = d.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if x.clone() < ::dafny_runtime::int!(0) {
                    _accumulator = _accumulator.clone() + ::dafny_runtime::int!(-1);
                    let mut _in30: ::dafny_runtime::DafnyInt = x.clone() + d.clone();
                    let mut _in31: ::dafny_runtime::DafnyInt = d.clone();
                    x = _in30.clone();
                    d = _in31.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    if x.clone() < d.clone() {
                        return ::dafny_runtime::int!(0) + _accumulator.clone();
                    } else {
                        _accumulator = _accumulator.clone() + ::dafny_runtime::int!(1);
                        let mut _in32: ::dafny_runtime::DafnyInt = x.clone() - d.clone();
                        let mut _in33: ::dafny_runtime::DafnyInt = d.clone();
                        x = _in32.clone();
                        d = _in33.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn DivRecursive(
            x: &::dafny_runtime::DafnyInt,
            d: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            if ::dafny_runtime::int!(0) < d.clone() {
                crate::r#_DivInternals_Compile::_default::DivPos(x, d)
            } else {
                ::dafny_runtime::int!(-1)
                    * crate::r#_DivInternals_Compile::_default::DivPos(
                        x,
                        &(::dafny_runtime::int!(-1) * d.clone()),
                    )
            }
        }
    }
}
pub mod r#_DivMod_Compile {}
pub mod r#_Power_Compile {
    pub struct _default {}

    impl _default {
        pub fn Pow(
            b: &::dafny_runtime::DafnyInt,
            e: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::DafnyInt {
            let mut _accumulator: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(1);
            let mut b = b.clone();
            let mut e = e.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if e.clone() == ::dafny_runtime::int!(0) {
                    return ::dafny_runtime::int!(1) * _accumulator.clone();
                } else {
                    _accumulator = _accumulator.clone() * b.clone();
                    let mut _in34: ::dafny_runtime::DafnyInt = b.clone();
                    let mut _in35: ::dafny_runtime::DafnyInt = e.clone() - ::dafny_runtime::int!(1);
                    b = _in34.clone();
                    e = _in35.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
    }
}
pub mod r#_Logarithm_Compile {
    pub struct _default {}

    impl _default {
        pub fn Log(
            base: &::dafny_runtime::_System::nat,
            pow: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::_System::nat {
            let mut _accumulator: ::dafny_runtime::_System::nat = ::dafny_runtime::int!(0);
            let mut base = base.clone();
            let mut pow = pow.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if pow.clone() < base.clone() {
                    return ::dafny_runtime::int!(0) + _accumulator.clone();
                } else {
                    _accumulator = _accumulator.clone() + ::dafny_runtime::int!(1);
                    let mut _in36: ::dafny_runtime::_System::nat = base.clone();
                    let mut _in37: ::dafny_runtime::DafnyInt =
                        (::dafny_runtime::euclidian_division)(pow.clone(), base.clone());
                    base = _in36.clone();
                    pow = _in37.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
    }
}
pub mod r#_StandardLibraryInterop_Compile {
    pub use ::dafny_runtime::UpcastObject;
    pub use ::std::any::Any;

    pub struct WrappersInterop {}

    impl WrappersInterop {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn CreateStringSome(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Some {
                value: s.clone(),
            })
        }
        pub fn CreateStringNone() -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::None {})
        }
        pub fn CreateBooleanSome(
            b: bool,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<bool>> {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<bool>::Some { value: b })
        }
        pub fn CreateBooleanNone() -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<bool>> {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<bool>::None {})
        }
    }

    impl UpcastObject<dyn Any> for WrappersInterop {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }
}
pub mod r#_StandardLibrary_Compile {
    pub struct _default {}

    impl _default {
        pub fn Join<_T: ::dafny_runtime::DafnyType>(
            ss: &::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>,
            joiner: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut ss = ss.clone();
            let mut joiner = joiner.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if ss.cardinality() == ::dafny_runtime::int!(1) {
                    return _accumulator.concat(&ss.get(&::dafny_runtime::int!(0)));
                } else {
                    _accumulator =
                        _accumulator.concat(&ss.get(&::dafny_runtime::int!(0)).concat(&joiner));
                    let mut _in42: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> =
                        ss.drop(&::dafny_runtime::int!(1));
                    let mut _in43: ::dafny_runtime::Sequence<_T> = joiner.clone();
                    ss = _in42.clone();
                    joiner = _in43.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Split<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Sequence<_T>,
            delim: &_T,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> {
            let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>;
            let mut s = s.clone();
            let mut delim = delim.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                let mut i: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
                > = crate::r#_StandardLibrary_Compile::_default::FindIndexMatching::<_T>(
                    &s,
                    &delim,
                    &::dafny_runtime::int!(0),
                );
                if matches!(
                    (&i).as_ref(),
                    crate::r#_Wrappers_Compile::Option::Some { .. }
                ) {
                    _accumulator = _accumulator.concat(&::dafny_runtime::seq![s.take(i.value())]);
                    let mut _in44: ::dafny_runtime::Sequence<_T> =
                        s.drop(&(i.value().clone() + ::dafny_runtime::int!(1)));
                    let mut _in45: _T = delim.clone();
                    s = _in44.clone();
                    delim = _in45.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    return _accumulator.concat(&::dafny_runtime::seq![s.clone()]);
                }
            }
        }
        pub fn SplitOnce<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Sequence<_T>,
            delim: &_T,
        ) -> (::dafny_runtime::Sequence<_T>, ::dafny_runtime::Sequence<_T>) {
            let mut i: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
            > = crate::r#_StandardLibrary_Compile::_default::FindIndexMatching::<_T>(
                s,
                delim,
                &::dafny_runtime::int!(0),
            );
            (
                s.take(i.value()),
                s.drop(&(i.value().clone() + ::dafny_runtime::int!(1))),
            )
        }
        pub fn r#_SplitOnce_q<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Sequence<_T>,
            delim: &_T,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<(
                ::dafny_runtime::Sequence<_T>,
                ::dafny_runtime::Sequence<_T>,
            )>,
        > {
            let mut valueOrError0: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
            > = crate::r#_StandardLibrary_Compile::_default::FindIndexMatching::<_T>(
                s,
                delim,
                &::dafny_runtime::int!(0),
            );
            if valueOrError0.IsFailure() {
                valueOrError0.PropagateFailure::<(::dafny_runtime::Sequence<_T>, ::dafny_runtime::Sequence<_T>)>()
            } else {
                let mut i: ::dafny_runtime::_System::nat = valueOrError0.Extract();
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<(
                    ::dafny_runtime::Sequence<_T>,
                    ::dafny_runtime::Sequence<_T>,
                )>::Some {
                    value: (s.take(&i), s.drop(&(i.clone() + ::dafny_runtime::int!(1)))),
                })
            }
        }
        pub fn FindIndexMatching<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Sequence<_T>,
            c: &_T,
            i: &::dafny_runtime::_System::nat,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>>
        {
            crate::r#_StandardLibrary_Compile::_default::FindIndex::<_T>(
                s,
                {
                    let c: _T = c.clone();
                    &({
                        let mut c = c.clone();
                        ::std::rc::Rc::new(move |x: &_T| -> bool { x.clone() == c.clone() })
                    })
                },
                i,
            )
        }
        pub fn FindIndex<_T: ::dafny_runtime::DafnyType>(
            s: &::dafny_runtime::Sequence<_T>,
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool>,
            i: &::dafny_runtime::_System::nat,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>>
        {
            let mut s = s.clone();
            let mut f = f.clone();
            let mut i = i.clone();
            'TAIL_CALL_START: loop {
                if i.clone() == s.cardinality() {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::_System::nat,
                    >::None {});
                } else {
                    if (&f)(&s.get(&i)) {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::_System::nat,
                        >::Some {
                            value: i.clone(),
                        });
                    } else {
                        let mut _in46: ::dafny_runtime::Sequence<_T> = s.clone();
                        let mut _in47: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool> = f.clone();
                        let mut _in48: ::dafny_runtime::DafnyInt =
                            i.clone() + ::dafny_runtime::int!(1);
                        s = _in46.clone();
                        f = _in47.clone();
                        i = _in48.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn Filter<_T: ::dafny_runtime::DafnyType>(
            s: &::dafny_runtime::Sequence<_T>,
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut s = s.clone();
            let mut f = f.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if s.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    if (&f)(&s.get(&::dafny_runtime::int!(0))) {
                        _accumulator = _accumulator
                            .concat(&::dafny_runtime::seq![s.get(&::dafny_runtime::int!(0))]);
                        let mut _in49: ::dafny_runtime::Sequence<_T> =
                            s.drop(&::dafny_runtime::int!(1));
                        let mut _in50: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool> = f.clone();
                        s = _in49.clone();
                        f = _in50.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        let mut _in51: ::dafny_runtime::Sequence<_T> =
                            s.drop(&::dafny_runtime::int!(1));
                        let mut _in52: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool> = f.clone();
                        s = _in51.clone();
                        f = _in52.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn Min(
            a: &::dafny_runtime::DafnyInt,
            b: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            if a.clone() < b.clone() {
                a.clone()
            } else {
                b.clone()
            }
        }
        pub fn Fill<_T: ::dafny_runtime::DafnyType>(
            value: &_T,
            n: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<_T> {
            {
                let _initializer = {
                    let value: _T = value.clone();
                    {
                        let mut value = value.clone();
                        ::std::rc::Rc::new(move |_v0: &::dafny_runtime::DafnyInt| -> _T {
                            value.clone()
                        })
                    }
                };
                ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), n.clone())
                    .map(|i| _initializer(&i))
                    .collect::<::dafny_runtime::Sequence<_>>()
            }
        }
        pub fn SeqToArray<_T: ::dafny_runtime::DafnyType>(
            s: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Object<[_T]> {
            let mut a = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[_T]>>::new();
            let mut _init1: ::std::rc::Rc<dyn ::std::ops::Fn(&::dafny_runtime::DafnyInt) -> _T> = {
                let s: ::dafny_runtime::Sequence<_T> = s.clone();
                {
                    let mut s = s.clone();
                    ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> _T { s.get(i) })
                }
            };
            let mut _nw1: ::dafny_runtime::Object<[::std::mem::MaybeUninit<_T>]> =
                ::dafny_runtime::array::placebos_usize_object::<_T>(
                    ::dafny_runtime::DafnyUsize::into_usize(s.cardinality()),
                );
            for r#__i0_1 in
                ::dafny_runtime::integer_range(0, ::dafny_runtime::rd!(_nw1.clone()).len())
            {
                {
                    let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(r#__i0_1.clone());
                    ::dafny_runtime::md!(_nw1)[__idx0] = ::std::mem::MaybeUninit::new((&_init1)(
                        &::dafny_runtime::int!(r#__i0_1.clone()),
                    ));
                }
            }
            a = ::dafny_runtime::MaybePlacebo::from(::dafny_runtime::array::construct_object(
                _nw1.clone(),
            ));
            return a.read();
        }
        pub fn LexicographicLessOrEqual<_T: ::dafny_runtime::DafnyTypeEq>(
            a: &::dafny_runtime::Sequence<_T>,
            b: &::dafny_runtime::Sequence<_T>,
            less: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
        ) -> bool {
            ::dafny_runtime::integer_range(::dafny_runtime::int!(0), a.cardinality() + ::dafny_runtime::int!(1)).any(({
          let mut a = a.clone();
          let mut b = b.clone();
          let mut less = less.clone();
          ::std::rc::Rc::new(move |r#__exists_var_0: ::dafny_runtime::DafnyInt| -> bool{
              let mut k: ::dafny_runtime::DafnyInt = r#__exists_var_0.clone();
              ::dafny_runtime::int!(0) <= k.clone() && k.clone() <= a.cardinality() && crate::r#_StandardLibrary_Compile::_default::LexicographicLessOrEqualAux::<_T>(&a, &b, &less, &k)
            })
        }).as_ref())
        }
        pub fn LexicographicLessOrEqualAux<_T: ::dafny_runtime::DafnyTypeEq>(
            a: &::dafny_runtime::Sequence<_T>,
            b: &::dafny_runtime::Sequence<_T>,
            less: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
            lengthOfCommonPrefix: &::dafny_runtime::_System::nat,
        ) -> bool {
            lengthOfCommonPrefix.clone() <= b.cardinality()
                && ::dafny_runtime::integer_range(
                    ::dafny_runtime::int!(0),
                    lengthOfCommonPrefix.clone(),
                )
                .all(
                    ({
                        let mut lengthOfCommonPrefix = lengthOfCommonPrefix.clone();
                        let mut a = a.clone();
                        let mut b = b.clone();
                        ::std::rc::Rc::new(
                            move |r#__forall_var_0: ::dafny_runtime::DafnyInt| -> bool {
                                let mut i: ::dafny_runtime::DafnyInt = r#__forall_var_0.clone();
                                !(::dafny_runtime::int!(0) <= i.clone()
                                    && i.clone() < lengthOfCommonPrefix.clone())
                                    || a.get(&i) == b.get(&i)
                            },
                        )
                    })
                    .as_ref(),
                )
                && (lengthOfCommonPrefix.clone() == a.cardinality()
                    || lengthOfCommonPrefix.clone() < b.cardinality()
                        && less(&a.get(lengthOfCommonPrefix), &b.get(lengthOfCommonPrefix)))
        }
        pub fn SetToOrderedSequence<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Set<::dafny_runtime::Sequence<_T>>,
            less: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> {
            let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>;
            let mut s = s.clone();
            let mut less = less.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if s.clone() == ::dafny_runtime::set! {} {
                    return _accumulator.concat(
                        &(::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>),
                    );
                } else {
                    return (&({
                        let mut s = s.clone();
                        let mut less = less.clone();
                        ::std::rc::Rc::new(move |r#__let_dummy_0: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<_T>>{
                  let mut a = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_T>>::new();
                  'label_goto__ASSIGN_SUCH_THAT_1: loop {
                    for r#__assign_such_that_1 in (&s).iter().cloned() {
                      a = ::dafny_runtime::MaybePlacebo::from(r#__assign_such_that_1.clone());
                      if s.contains(&a.read()) && crate::r#_StandardLibrary_Compile::_default::IsMinimum::<_T>(&a.read(), &s, &less) {
                        break 'label_goto__ASSIGN_SUCH_THAT_1;
                      }
                    }
                    panic!("Halt");
                    break;
                  };
                  ::dafny_runtime::seq![a.read()].concat(&crate::r#_StandardLibrary_Compile::_default::SetToOrderedSequence::<_T>(&s.subtract(&::dafny_runtime::set!{a.read()}), &less))
                })
                    }))(&::dafny_runtime::int!(0));
                }
            }
        }
        pub fn IsMinimum<_T: ::dafny_runtime::DafnyTypeEq>(
            a: &::dafny_runtime::Sequence<_T>,
            s: &::dafny_runtime::Set<::dafny_runtime::Sequence<_T>>,
            less: &::std::rc::Rc<dyn ::std::ops::Fn(&_T, &_T) -> bool>,
        ) -> bool {
            s.contains(a) && s.iter().all(({
          let mut a = a.clone();
          let mut s = s.clone();
          let mut less = less.clone();
          ::std::rc::Rc::new(move |r#__forall_var_1: &::dafny_runtime::Sequence<_T>| -> bool{
              let mut z: ::dafny_runtime::Sequence<_T> = r#__forall_var_1.clone();
              !s.contains(&z) || crate::r#_StandardLibrary_Compile::_default::LexicographicLessOrEqual::<_T>(&a, &z, &less)
            })
        }).as_ref())
        }
    }

    pub mod r#_UInt_Compile {
        pub struct _default {}

        impl _default {
            pub fn UInt8Less(a: u8, b: u8) -> bool {
                a < b
            }
            pub fn HasUint16Len<_T: ::dafny_runtime::DafnyType>(
                s: &::dafny_runtime::Sequence<_T>,
            ) -> bool {
                s.cardinality()
                    < crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UINT16_LIMIT()
            }
            pub fn HasUint32Len<_T: ::dafny_runtime::DafnyType>(
                s: &::dafny_runtime::Sequence<_T>,
            ) -> bool {
                s.cardinality()
                    < crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UINT32_LIMIT()
            }
            pub fn HasUint64Len<_T: ::dafny_runtime::DafnyType>(
                s: &::dafny_runtime::Sequence<_T>,
            ) -> bool {
                s.cardinality()
                    < crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UINT64_LIMIT()
            }
            pub fn UInt16ToSeq(x: u16) -> ::dafny_runtime::Sequence<u8> {
                let mut b0: u8 = (x / 256) as u8;
                let mut b1: u8 = (x % 256) as u8;
                ::dafny_runtime::seq![b0, b1]
            }
            pub fn SeqToUInt16(s: &::dafny_runtime::Sequence<u8>) -> u16 {
                let mut x0: u16 = s.get(&::dafny_runtime::int!(0)) as u16 * 256;
                x0 + s.get(&::dafny_runtime::int!(1)) as u16
            }
            pub fn UInt32ToSeq(x: u32) -> ::dafny_runtime::Sequence<u8> {
                let mut b0: u8 = (x / 16777216) as u8;
                let mut x0: u32 = x - b0 as u32 * 16777216;
                let mut b1: u8 = (x0 / 65536) as u8;
                let mut x1: u32 = x0 - b1 as u32 * 65536;
                let mut b2: u8 = (x1 / 256) as u8;
                let mut b3: u8 = (x1 % 256) as u8;
                ::dafny_runtime::seq![b0, b1, b2, b3]
            }
            pub fn SeqToUInt32(s: &::dafny_runtime::Sequence<u8>) -> u32 {
                let mut x0: u32 = s.get(&::dafny_runtime::int!(0)) as u32 * 16777216;
                let mut x1: u32 = x0 + s.get(&::dafny_runtime::int!(1)) as u32 * 65536;
                let mut x2: u32 = x1 + s.get(&::dafny_runtime::int!(2)) as u32 * 256;
                x2 + s.get(&::dafny_runtime::int!(3)) as u32
            }
            pub fn UInt64ToSeq(x: u64) -> ::dafny_runtime::Sequence<u8> {
                let mut b0: u8 = (x / 72057594037927936) as u8;
                let mut x0: u64 = x - b0 as u64 * 72057594037927936;
                let mut b1: u8 = (x0 / 281474976710656) as u8;
                let mut x1: u64 = x0 - b1 as u64 * 281474976710656;
                let mut b2: u8 = (x1 / 1099511627776) as u8;
                let mut x2: u64 = x1 - b2 as u64 * 1099511627776;
                let mut b3: u8 = (x2 / 4294967296) as u8;
                let mut x3: u64 = x2 - b3 as u64 * 4294967296;
                let mut b4: u8 = (x3 / 16777216) as u8;
                let mut x4: u64 = x3 - b4 as u64 * 16777216;
                let mut b5: u8 = (x4 / 65536) as u8;
                let mut x5: u64 = x4 - b5 as u64 * 65536;
                let mut b6: u8 = (x5 / 256) as u8;
                let mut b7: u8 = (x5 % 256) as u8;
                ::dafny_runtime::seq![b0, b1, b2, b3, b4, b5, b6, b7]
            }
            pub fn SeqToUInt64(s: &::dafny_runtime::Sequence<u8>) -> u64 {
                let mut x0: u64 = s.get(&::dafny_runtime::int!(0)) as u64 * 72057594037927936;
                let mut x1: u64 = x0 + s.get(&::dafny_runtime::int!(1)) as u64 * 281474976710656;
                let mut x2: u64 = x1 + s.get(&::dafny_runtime::int!(2)) as u64 * 1099511627776;
                let mut x3: u64 = x2 + s.get(&::dafny_runtime::int!(3)) as u64 * 4294967296;
                let mut x4: u64 = x3 + s.get(&::dafny_runtime::int!(4)) as u64 * 16777216;
                let mut x5: u64 = x4 + s.get(&::dafny_runtime::int!(5)) as u64 * 65536;
                let mut x6: u64 = x5 + s.get(&::dafny_runtime::int!(6)) as u64 * 256;
                let mut x: u64 = x6 + s.get(&::dafny_runtime::int!(7)) as u64;
                x
            }
            pub fn UINT16_LIMIT() -> ::dafny_runtime::DafnyInt {
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                    crate::r#_BoundedInts_Compile::_default::UINT16_MAX(),
                ) + ::dafny_runtime::int!(1)
            }
            pub fn UINT32_LIMIT() -> ::dafny_runtime::DafnyInt {
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                    crate::r#_BoundedInts_Compile::_default::UINT32_MAX(),
                ) + ::dafny_runtime::int!(1)
            }
            pub fn UINT64_LIMIT() -> ::dafny_runtime::DafnyInt {
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                    crate::r#_BoundedInts_Compile::_default::UINT64_MAX(),
                ) + ::dafny_runtime::int!(1)
            }
            pub fn INT32_MAX_LIMIT() -> ::dafny_runtime::DafnyInt {
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                    crate::r#_BoundedInts_Compile::_default::INT32_MAX(),
                )
            }
            pub fn INT64_MAX_LIMIT() -> ::dafny_runtime::DafnyInt {
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                    crate::r#_BoundedInts_Compile::_default::INT64_MAX(),
                )
            }
        }

        pub type seq16<T: ::dafny_runtime::DafnyType> = ::dafny_runtime::Sequence<T>;

        pub type seq32<T: ::dafny_runtime::DafnyType> = ::dafny_runtime::Sequence<T>;

        pub type seq64<T: ::dafny_runtime::DafnyType> = ::dafny_runtime::Sequence<T>;
    }

    pub mod r#_String_Compile {
        pub struct _default {}

        impl _default {
            pub fn Int2Digits(
                n: &::dafny_runtime::DafnyInt,
                base: &::dafny_runtime::DafnyInt,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> {
                let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                    ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>;
                let mut n = n.clone();
                let mut base = base.clone();
                let mut _accumulator = _accumulator.clone();
                'TAIL_CALL_START: loop {
                    if n.clone() == ::dafny_runtime::int!(0) {
                        return (::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>)
                            .concat(&_accumulator);
                    } else {
                        _accumulator = ::dafny_runtime::seq![(::dafny_runtime::euclidian_modulo)(
                            n.clone(),
                            base.clone()
                        )]
                        .concat(&_accumulator);
                        let mut _in38: ::dafny_runtime::DafnyInt =
                            (::dafny_runtime::euclidian_division)(n.clone(), base.clone());
                        let mut _in39: ::dafny_runtime::DafnyInt = base.clone();
                        n = _in38.clone();
                        base = _in39.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
            pub fn Digits2String(
                digits: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
                chars: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
                let mut digits = digits.clone();
                let mut chars = chars.clone();
                let mut _accumulator = _accumulator.clone();
                'TAIL_CALL_START: loop {
                    if digits.clone().to_array().len() == 0 {
                        return _accumulator.concat(&::dafny_runtime::string_utf16_of(""));
                    } else {
                        _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                            chars.get(&digits.get(&::dafny_runtime::int!(0)))
                        ]);
                        let mut _in40: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                            digits.drop(&::dafny_runtime::int!(1));
                        let mut _in41: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            chars.clone();
                        digits = _in40.clone();
                        chars = _in41.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
            pub fn Int2String(
                n: &::dafny_runtime::DafnyInt,
                chars: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                let mut base: ::dafny_runtime::DafnyInt = chars.cardinality();
                if n.clone() == ::dafny_runtime::int!(0) {
                    ::dafny_runtime::string_utf16_of("0")
                } else {
                    if ::dafny_runtime::int!(0) < n.clone() {
                        crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Digits2String(&crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Int2Digits(n, &base), chars)
                    } else {
                        ::dafny_runtime::string_utf16_of("-").concat(&crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Digits2String(&crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Int2Digits(&(::dafny_runtime::int!(0) - n.clone()), &base), chars))
                    }
                }
            }
            pub fn Base10Int2String(
                n: &::dafny_runtime::DafnyInt,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Int2String(
                    n,
                    &crate::r#_StandardLibrary_Compile::r#_String_Compile::_default::Base10(),
                )
            }
            pub fn Base10() -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(48 as u16),
                    ::dafny_runtime::DafnyCharUTF16(49 as u16),
                    ::dafny_runtime::DafnyCharUTF16(50 as u16),
                    ::dafny_runtime::DafnyCharUTF16(51 as u16),
                    ::dafny_runtime::DafnyCharUTF16(52 as u16),
                    ::dafny_runtime::DafnyCharUTF16(53 as u16),
                    ::dafny_runtime::DafnyCharUTF16(54 as u16),
                    ::dafny_runtime::DafnyCharUTF16(55 as u16),
                    ::dafny_runtime::DafnyCharUTF16(56 as u16),
                    ::dafny_runtime::DafnyCharUTF16(57 as u16)
                ]
            }
        }
    }
}
pub mod UUID {
    pub struct _default {}

    impl _default {
        pub fn CreateBytesSuccess(
            bytes: &::dafny_runtime::Sequence<u8>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Success {
                value: bytes.clone(),
            })
        }
        pub fn CreateBytesFailure(
            error: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Failure {
                error: error.clone(),
            })
        }
        pub fn CreateStringSuccess(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Success {
                value: s.clone(),
            })
        }
        pub fn CreateStringFailure(
            error: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Failure {
                error: error.clone(),
            })
        }
    }
}
pub mod UTF8 {
    pub struct _default {}

    impl _default {
        pub fn CreateEncodeSuccess(
            bytes: &crate::UTF8::ValidUTF8Bytes,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                crate::UTF8::ValidUTF8Bytes,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                crate::UTF8::ValidUTF8Bytes,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Success {
                value: bytes.clone(),
            })
        }
        pub fn CreateEncodeFailure(
            error: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                crate::UTF8::ValidUTF8Bytes,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                crate::UTF8::ValidUTF8Bytes,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Failure {
                error: error.clone(),
            })
        }
        pub fn CreateDecodeSuccess(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Success {
                value: s.clone(),
            })
        }
        pub fn CreateDecodeFailure(
            error: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Failure {
                error: error.clone(),
            })
        }
        pub fn IsASCIIString(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            ::dafny_runtime::integer_range(::dafny_runtime::int!(0), s.cardinality()).all(
                ({
                    let mut s = s.clone();
                    ::std::rc::Rc::new(move |r#__forall_var_2: ::dafny_runtime::DafnyInt| -> bool {
                        let mut i: ::dafny_runtime::DafnyInt = r#__forall_var_2.clone();
                        !(::dafny_runtime::int!(0) <= i.clone() && i.clone() < s.cardinality())
                            || ::dafny_runtime::int!(s.get(&i).0) < ::dafny_runtime::int!(128)
                    })
                })
                .as_ref(),
            )
        }
        pub fn EncodeAscii(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> crate::UTF8::ValidUTF8Bytes {
            let mut _accumulator: crate::UTF8::ValidUTF8Bytes =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            let mut s = s.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if s.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>));
                } else {
                    let mut x: ::dafny_runtime::Sequence<u8> =
                        ::dafny_runtime::seq![s.get(&::dafny_runtime::int!(0)).0 as u8];
                    _accumulator = _accumulator.concat(&x);
                    let mut _in53: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        s.drop(&::dafny_runtime::int!(1));
                    s = _in53.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn Uses1Byte(s: &::dafny_runtime::Sequence<u8>) -> bool {
            0 <= s.get(&::dafny_runtime::int!(0)) && s.get(&::dafny_runtime::int!(0)) <= 127
        }
        pub fn Uses2Bytes(s: &::dafny_runtime::Sequence<u8>) -> bool {
            194 <= s.get(&::dafny_runtime::int!(0))
                && s.get(&::dafny_runtime::int!(0)) <= 223
                && (128 <= s.get(&::dafny_runtime::int!(1))
                    && s.get(&::dafny_runtime::int!(1)) <= 191)
        }
        pub fn Uses3Bytes(s: &::dafny_runtime::Sequence<u8>) -> bool {
            s.get(&::dafny_runtime::int!(0)) == 224
                && (160 <= s.get(&::dafny_runtime::int!(1))
                    && s.get(&::dafny_runtime::int!(1)) <= 191)
                && (128 <= s.get(&::dafny_runtime::int!(2))
                    && s.get(&::dafny_runtime::int!(2)) <= 191)
                || 225 <= s.get(&::dafny_runtime::int!(0))
                    && s.get(&::dafny_runtime::int!(0)) <= 236
                    && (128 <= s.get(&::dafny_runtime::int!(1))
                        && s.get(&::dafny_runtime::int!(1)) <= 191)
                    && (128 <= s.get(&::dafny_runtime::int!(2))
                        && s.get(&::dafny_runtime::int!(2)) <= 191)
                || s.get(&::dafny_runtime::int!(0)) == 237
                    && (128 <= s.get(&::dafny_runtime::int!(1))
                        && s.get(&::dafny_runtime::int!(1)) <= 159)
                    && (128 <= s.get(&::dafny_runtime::int!(2))
                        && s.get(&::dafny_runtime::int!(2)) <= 191)
                || 238 <= s.get(&::dafny_runtime::int!(0))
                    && s.get(&::dafny_runtime::int!(0)) <= 239
                    && (128 <= s.get(&::dafny_runtime::int!(1))
                        && s.get(&::dafny_runtime::int!(1)) <= 191)
                    && (128 <= s.get(&::dafny_runtime::int!(2))
                        && s.get(&::dafny_runtime::int!(2)) <= 191)
        }
        pub fn Uses4Bytes(s: &::dafny_runtime::Sequence<u8>) -> bool {
            s.get(&::dafny_runtime::int!(0)) == 240
                && (144 <= s.get(&::dafny_runtime::int!(1))
                    && s.get(&::dafny_runtime::int!(1)) <= 191)
                && (128 <= s.get(&::dafny_runtime::int!(2))
                    && s.get(&::dafny_runtime::int!(2)) <= 191)
                && (128 <= s.get(&::dafny_runtime::int!(3))
                    && s.get(&::dafny_runtime::int!(3)) <= 191)
                || 241 <= s.get(&::dafny_runtime::int!(0))
                    && s.get(&::dafny_runtime::int!(0)) <= 243
                    && (128 <= s.get(&::dafny_runtime::int!(1))
                        && s.get(&::dafny_runtime::int!(1)) <= 191)
                    && (128 <= s.get(&::dafny_runtime::int!(2))
                        && s.get(&::dafny_runtime::int!(2)) <= 191)
                    && (128 <= s.get(&::dafny_runtime::int!(3))
                        && s.get(&::dafny_runtime::int!(3)) <= 191)
                || s.get(&::dafny_runtime::int!(0)) == 244
                    && (128 <= s.get(&::dafny_runtime::int!(1))
                        && s.get(&::dafny_runtime::int!(1)) <= 143)
                    && (128 <= s.get(&::dafny_runtime::int!(2))
                        && s.get(&::dafny_runtime::int!(2)) <= 191)
                    && (128 <= s.get(&::dafny_runtime::int!(3))
                        && s.get(&::dafny_runtime::int!(3)) <= 191)
        }
        pub fn ValidUTF8Range(
            a: &::dafny_runtime::Sequence<u8>,
            lo: &::dafny_runtime::_System::nat,
            hi: &::dafny_runtime::_System::nat,
        ) -> bool {
            let mut a = a.clone();
            let mut lo = lo.clone();
            let mut hi = hi.clone();
            'TAIL_CALL_START: loop {
                if lo.clone() == hi.clone() {
                    return true;
                } else {
                    let mut r: ::dafny_runtime::Sequence<u8> = a.slice(&lo, &hi);
                    if crate::UTF8::_default::Uses1Byte(&r) {
                        let mut _in54: ::dafny_runtime::Sequence<u8> = a.clone();
                        let mut _in55: ::dafny_runtime::DafnyInt =
                            lo.clone() + ::dafny_runtime::int!(1);
                        let mut _in56: ::dafny_runtime::_System::nat = hi.clone();
                        a = _in54.clone();
                        lo = _in55.clone();
                        hi = _in56.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        if ::dafny_runtime::int!(2) <= r.cardinality()
                            && crate::UTF8::_default::Uses2Bytes(&r)
                        {
                            let mut _in57: ::dafny_runtime::Sequence<u8> = a.clone();
                            let mut _in58: ::dafny_runtime::DafnyInt =
                                lo.clone() + ::dafny_runtime::int!(2);
                            let mut _in59: ::dafny_runtime::_System::nat = hi.clone();
                            a = _in57.clone();
                            lo = _in58.clone();
                            hi = _in59.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            if ::dafny_runtime::int!(3) <= r.cardinality()
                                && crate::UTF8::_default::Uses3Bytes(&r)
                            {
                                let mut _in60: ::dafny_runtime::Sequence<u8> = a.clone();
                                let mut _in61: ::dafny_runtime::DafnyInt =
                                    lo.clone() + ::dafny_runtime::int!(3);
                                let mut _in62: ::dafny_runtime::_System::nat = hi.clone();
                                a = _in60.clone();
                                lo = _in61.clone();
                                hi = _in62.clone();
                                continue 'TAIL_CALL_START;
                            } else {
                                if ::dafny_runtime::int!(4) <= r.cardinality()
                                    && crate::UTF8::_default::Uses4Bytes(&r)
                                {
                                    let mut _in63: ::dafny_runtime::Sequence<u8> = a.clone();
                                    let mut _in64: ::dafny_runtime::DafnyInt =
                                        lo.clone() + ::dafny_runtime::int!(4);
                                    let mut _in65: ::dafny_runtime::_System::nat = hi.clone();
                                    a = _in63.clone();
                                    lo = _in64.clone();
                                    hi = _in65.clone();
                                    continue 'TAIL_CALL_START;
                                } else {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn ValidUTF8Seq(s: &::dafny_runtime::Sequence<u8>) -> bool {
            crate::UTF8::_default::ValidUTF8Range(s, &::dafny_runtime::int!(0), &s.cardinality())
        }
    }

    pub type ValidUTF8Bytes = ::dafny_runtime::Sequence<u8>;

    pub fn r#__init_ValidUTF8Bytes() -> ::dafny_runtime::Sequence<u8> {
        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
    }
}
pub mod Time {
    pub struct _default {}

    impl _default {
        pub fn CreateGetCurrentTimeStampSuccess(
            value: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Success {
                value: value.clone(),
            })
        }
        pub fn CreateGetCurrentTimeStampFailure(
            error: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >::Failure {
                error: error.clone(),
            })
        }
    }
}
pub mod r#_Streams_Compile {
    pub use ::dafny_runtime::UpcastObject;
    pub use ::std::any::Any;

    pub struct SeqReader<T: ::dafny_runtime::DafnyType> {
        pub pos: ::dafny_runtime::_System::nat,
        pub r#__i_data: ::dafny_runtime::Sequence<T>,
    }

    impl<T: ::dafny_runtime::DafnyType> SeqReader<T> {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn _ctor(
            this: &::dafny_runtime::Object<crate::r#_Streams_Compile::SeqReader<T>>,
            s: &::dafny_runtime::Sequence<T>,
        ) -> () {
            let mut _set_pos: bool = false;
            let mut _set__i_data: bool = false;
            ::dafny_runtime::update_field_uninit_object!(
                this.clone(),
                r#__i_data,
                _set__i_data,
                s.clone()
            );
            ::dafny_runtime::update_field_uninit_object!(
                this.clone(),
                pos,
                _set_pos,
                ::dafny_runtime::int!(0)
            );
            return ();
        }
        pub fn ReadElements(
            &mut self,
            n: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<T> {
            let mut elems = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<T>>::new();
            elems = ::dafny_runtime::MaybePlacebo::from(
                self.data().clone().drop(&self.pos.clone()).take(n),
            );
            self.pos = self.pos.clone() + n.clone();
            elems = ::dafny_runtime::MaybePlacebo::from(elems.read());
            return elems.read();
        }
        pub fn ReadExact(
            &mut self,
            n: &::dafny_runtime::_System::nat,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<T>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<T>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            if self.data().clone().cardinality() - self.pos.clone() < n.clone() {
                res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<T>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Failure {
                        error: ::dafny_runtime::string_utf16_of(
                            "IO Error: Not enough elements left on stream.",
                        ),
                    },
                ));
                return res.read();
            } else {
                let mut elements =
                    ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<T>>::new();
                let mut _out6 =
                    ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<T>>::new();
                _out6 = ::dafny_runtime::MaybePlacebo::from(self.ReadElements(n));
                elements = ::dafny_runtime::MaybePlacebo::from(_out6.read());
                res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<T>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: elements.read(),
                    },
                ));
                return res.read();
            };
            return res.read();
        }
        pub fn data(&self) -> ::dafny_runtime::Sequence<T> {
            self.r#__i_data.clone()
        }
    }

    impl<T: ::dafny_runtime::DafnyType> UpcastObject<dyn Any> for SeqReader<T> {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }

    pub struct ByteReader {
        pub r#__i_reader: ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqReader<u8>>,
    }

    impl ByteReader {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn _ctor(
            this: &::dafny_runtime::Object<crate::r#_Streams_Compile::ByteReader>,
            s: &::dafny_runtime::Sequence<u8>,
        ) -> () {
            let mut _set__i_reader: bool = false;
            let mut mr = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqReader<u8>>,
            >::new();
            let mut _nw2: ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqReader<u8>> =
                crate::r#_Streams_Compile::SeqReader::<u8>::_allocate_object();
            crate::r#_Streams_Compile::SeqReader::<u8>::_ctor(&_nw2, s);
            mr = ::dafny_runtime::MaybePlacebo::from(_nw2.clone());
            ::dafny_runtime::update_field_uninit_object!(
                this.clone(),
                r#__i_reader,
                _set__i_reader,
                mr.read()
            );
            return ();
        }
        pub fn ReadByte(
            &mut self,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                u8,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u8,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out7 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out7 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.reader().clone()).ReadExact(&::dafny_runtime::int!(1)),
            );
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out7.read());
            if valueOrError0.read().IsFailure() {
                res = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0.read().PropagateFailure::<u8>(),
                );
                return res.read();
            };
            let mut bytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    u8,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: bytes.get(&::dafny_runtime::int!(0)),
                },
            ));
            return res.read();
        }
        pub fn ReadBytes(
            &mut self,
            n: &::dafny_runtime::_System::nat,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out8 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out8 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.reader().clone()).ReadExact(n),
            );
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out8.read());
            if valueOrError0.read().IsFailure() {
                res = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0
                        .read()
                        .PropagateFailure::<::dafny_runtime::Sequence<u8>>(),
                );
                return res.read();
            };
            let mut bytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: bytes.clone(),
                },
            ));
            return res.read();
        }
        pub fn ReadUInt16(
            &mut self,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                u16,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u16,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out9 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out9 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.reader().clone()).ReadExact(&::dafny_runtime::int!(2)),
            );
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out9.read());
            if valueOrError0.read().IsFailure() {
                res = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0.read().PropagateFailure::<u16>(),
                );
                return res.read();
            };
            let mut bytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            let mut n: u16 =
                crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::SeqToUInt16(&bytes);
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    u16,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: n,
                },
            ));
            return res.read();
        }
        pub fn ReadUInt32(
            &mut self,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                u32,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u32,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out10 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out10 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.reader().clone()).ReadExact(&::dafny_runtime::int!(4)),
            );
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out10.read());
            if valueOrError0.read().IsFailure() {
                res = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0.read().PropagateFailure::<u32>(),
                );
                return res.read();
            };
            let mut bytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            let mut n: u32 =
                crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::SeqToUInt32(&bytes);
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    u32,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: n,
                },
            ));
            return res.read();
        }
        pub fn ReadUInt64(
            &mut self,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                u64,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u64,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out11 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out11 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.reader().clone()).ReadExact(&::dafny_runtime::int!(8)),
            );
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out11.read());
            if valueOrError0.read().IsFailure() {
                res = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0.read().PropagateFailure::<u64>(),
                );
                return res.read();
            };
            let mut bytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            let mut n: u64 =
                crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::SeqToUInt64(&bytes);
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    u64,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: n,
                },
            ));
            return res.read();
        }
        pub fn IsDoneReading(&mut self) -> bool {
            let mut b: bool = <bool as std::default::Default>::default();
            b = ::dafny_runtime::rd!(self.reader().clone().clone())
                .data()
                .clone()
                .cardinality()
                == ::dafny_runtime::rd!(self.reader().clone().clone())
                    .pos
                    .clone();
            return b;
        }
        pub fn GetSizeRead(&mut self) -> ::dafny_runtime::_System::nat {
            let mut n = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            n = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::rd!(self.reader().clone().clone())
                    .pos
                    .clone(),
            );
            return n.read();
        }
        pub fn reader(&self) -> ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqReader<u8>> {
            self.r#__i_reader.clone()
        }
    }

    impl UpcastObject<dyn Any> for ByteReader {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }

    pub struct SeqWriter<T: ::dafny_runtime::DafnyType> {
        pub data: ::dafny_runtime::Sequence<T>,
    }

    impl<T: ::dafny_runtime::DafnyType> SeqWriter<T> {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn _ctor(
            this: &::dafny_runtime::Object<crate::r#_Streams_Compile::SeqWriter<T>>,
        ) -> () {
            let mut _set_data: bool = false;
            ::dafny_runtime::update_field_uninit_object!(
                this.clone(),
                data,
                _set_data,
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<T>
            );
            return ();
        }
        pub fn WriteElements(
            &mut self,
            elems: &::dafny_runtime::Sequence<T>,
        ) -> ::dafny_runtime::_System::nat {
            let mut n = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            self.data = self.data.clone().concat(elems);
            n = ::dafny_runtime::MaybePlacebo::from(elems.cardinality());
            return n.read();
        }
    }

    impl<T: ::dafny_runtime::DafnyType> UpcastObject<dyn Any> for SeqWriter<T> {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }

    pub struct ByteWriter {
        pub r#__i_writer: ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqWriter<u8>>,
    }

    impl ByteWriter {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn _ctor(this: &::dafny_runtime::Object<crate::r#_Streams_Compile::ByteWriter>) -> () {
            let mut _set__i_writer: bool = false;
            let mut mw = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqWriter<u8>>,
            >::new();
            let mut _nw3: ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqWriter<u8>> =
                crate::r#_Streams_Compile::SeqWriter::<u8>::_allocate_object();
            crate::r#_Streams_Compile::SeqWriter::<u8>::_ctor(&_nw3);
            mw = ::dafny_runtime::MaybePlacebo::from(_nw3.clone());
            ::dafny_runtime::update_field_uninit_object!(
                this.clone(),
                r#__i_writer,
                _set__i_writer,
                mw.read()
            );
            return ();
        }
        pub fn WriteByte(&mut self, n: u8) -> ::dafny_runtime::_System::nat {
            let mut r = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            let mut _out12 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            _out12 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.writer().clone())
                    .WriteElements(&::dafny_runtime::seq![n]),
            );
            r = ::dafny_runtime::MaybePlacebo::from(_out12.read());
            return r.read();
        }
        pub fn WriteBytes(
            &mut self,
            s: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::_System::nat {
            let mut r = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            let mut _out13 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            _out13 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.writer().clone()).WriteElements(s),
            );
            r = ::dafny_runtime::MaybePlacebo::from(_out13.read());
            return r.read();
        }
        pub fn WriteUInt16(&mut self, n: u16) -> ::dafny_runtime::_System::nat {
            let mut r = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            let mut _out14 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            _out14 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.writer().clone()).WriteElements(
                    &crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt16ToSeq(n),
                ),
            );
            r = ::dafny_runtime::MaybePlacebo::from(_out14.read());
            return r.read();
        }
        pub fn WriteUInt32(&mut self, n: u32) -> ::dafny_runtime::_System::nat {
            let mut r = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            let mut _out15 = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::_System::nat>::new();
            _out15 = ::dafny_runtime::MaybePlacebo::from(
                ::dafny_runtime::md!(self.writer().clone()).WriteElements(
                    &crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt32ToSeq(n),
                ),
            );
            r = ::dafny_runtime::MaybePlacebo::from(_out15.read());
            return r.read();
        }
        pub fn GetDataWritten(&self) -> ::dafny_runtime::Sequence<u8> {
            ::dafny_runtime::rd!(self.writer().clone().clone())
                .data
                .clone()
        }
        pub fn GetSizeWritten(&self) -> ::dafny_runtime::_System::nat {
            ::dafny_runtime::rd!(self.writer().clone().clone())
                .data
                .clone()
                .cardinality()
        }
        pub fn writer(&self) -> ::dafny_runtime::Object<crate::r#_Streams_Compile::SeqWriter<u8>> {
            self.r#__i_writer.clone()
        }
    }

    impl UpcastObject<dyn Any> for ByteWriter {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }
}
pub mod r#_Sorting_Compile {
    pub struct _default {}

    impl _default {
        pub fn LexicographicByteSeqBelow(
            x: &::dafny_runtime::Sequence<u8>,
            y: &::dafny_runtime::Sequence<u8>,
        ) -> bool {
            crate::r#_Sorting_Compile::_default::LexicographicByteSeqBelowAux(
                x,
                y,
                &::dafny_runtime::int!(0),
            )
        }
        pub fn LexicographicByteSeqBelowAux(
            x: &::dafny_runtime::Sequence<u8>,
            y: &::dafny_runtime::Sequence<u8>,
            n: &::dafny_runtime::_System::nat,
        ) -> bool {
            n.clone() == x.cardinality()
                || n.clone() != y.cardinality() && x.get(n) < y.get(n)
                || n.clone() != y.cardinality()
                    && x.get(n) == y.get(n)
                    && crate::r#_Sorting_Compile::_default::LexicographicByteSeqBelowAux(
                        x,
                        y,
                        &(n.clone() + ::dafny_runtime::int!(1)),
                    )
        }
        pub fn SelectionSort<_Data: ::dafny_runtime::DafnyType>(
            a: &::dafny_runtime::Object<[_Data]>,
            below: &::std::rc::Rc<dyn ::std::ops::Fn(&_Data, &_Data) -> bool>,
        ) -> () {
            let mut m: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(0);
            while m.clone() < ::dafny_runtime::int!(::dafny_runtime::rd!(a.clone()).len()) {
                let mut mindex = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::DafnyInt>::new();
                let mut n = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::DafnyInt>::new();
                let mut _rhs0: ::dafny_runtime::DafnyInt = m.clone();
                let mut _rhs1: ::dafny_runtime::DafnyInt = m.clone() + ::dafny_runtime::int!(1);
                mindex = ::dafny_runtime::MaybePlacebo::from(_rhs0.clone());
                n = ::dafny_runtime::MaybePlacebo::from(_rhs1.clone());
                while n.read() < ::dafny_runtime::int!(::dafny_runtime::rd!(a.clone()).len()) {
                    if !below(
                        &::dafny_runtime::rd!(a)
                            [::dafny_runtime::DafnyUsize::into_usize(mindex.read())]
                        .clone(),
                        &::dafny_runtime::rd!(a)[::dafny_runtime::DafnyUsize::into_usize(n.read())]
                            .clone(),
                    ) {
                        mindex = ::dafny_runtime::MaybePlacebo::from(n.read());
                    };
                    n = ::dafny_runtime::MaybePlacebo::from(n.read() + ::dafny_runtime::int!(1));
                }
                let mut _rhs2: _Data = ::dafny_runtime::rd!(a)
                    [::dafny_runtime::DafnyUsize::into_usize(mindex.read())]
                .clone();
                let mut _rhs3: _Data = ::dafny_runtime::rd!(a)
                    [::dafny_runtime::DafnyUsize::into_usize(m.clone())]
                .clone();
                let mut _lhs0: ::dafny_runtime::Object<[_Data]> = a.clone();
                let mut _lhs1: ::dafny_runtime::DafnyInt = m.clone();
                let mut _lhs2: ::dafny_runtime::Object<[_Data]> = a.clone();
                let mut _lhs3: ::dafny_runtime::DafnyInt = mindex.read();
                {
                    let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(_lhs1.clone());
                    ::dafny_runtime::md!(_lhs0)[__idx0] = _rhs2.clone();
                };
                {
                    let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(_lhs3.clone());
                    ::dafny_runtime::md!(_lhs2)[__idx0] = _rhs3.clone();
                };
                m = m.clone() + ::dafny_runtime::int!(1);
            }
            return ();
        }
    }
}
pub mod SortedSets {
    pub use crate::_dafny_externs::SortedSets::*;
}
pub mod r#_HexStrings_Compile {
    pub struct _default {}

    impl _default {
        pub fn HexChar(x: u8) -> ::dafny_runtime::DafnyCharUTF16 {
            if x < 10 {
                ::dafny_runtime::DafnyCharUTF16(48 as u16)
                    + ::dafny_runtime::DafnyCharUTF16(x as u16)
            } else {
                ::dafny_runtime::DafnyCharUTF16(97 as u16)
                    + ::dafny_runtime::DafnyCharUTF16((x - 10) as u16)
            }
        }
        pub fn IsLooseHexChar(ch: &::dafny_runtime::DafnyCharUTF16) -> bool {
            ::dafny_runtime::DafnyCharUTF16(48 as u16) <= ch.clone()
                && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                || ::dafny_runtime::DafnyCharUTF16(97 as u16) <= ch.clone()
                    && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(102 as u16)
                || ::dafny_runtime::DafnyCharUTF16(65 as u16) <= ch.clone()
                    && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(70 as u16)
        }
        pub fn IsHexChar(ch: &::dafny_runtime::DafnyCharUTF16) -> bool {
            ::dafny_runtime::DafnyCharUTF16(48 as u16) <= ch.clone()
                && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                || ::dafny_runtime::DafnyCharUTF16(97 as u16) <= ch.clone()
                    && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(102 as u16)
        }
        pub fn IsHexString(s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            ::dafny_runtime::itertools::Itertools::unique(s.iter()).all(
                ({
                    let mut s = s.clone();
                    ::std::rc::Rc::new(
                        move |r#__forall_var_3: ::dafny_runtime::DafnyCharUTF16| -> bool {
                            let mut ch: ::dafny_runtime::DafnyCharUTF16 = r#__forall_var_3.clone();
                            !s.contains(&ch)
                                || crate::r#_HexStrings_Compile::_default::IsHexChar(&ch)
                        },
                    )
                })
                .as_ref(),
            )
        }
        pub fn IsLooseHexString(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            ::dafny_runtime::itertools::Itertools::unique(s.iter()).all(
                ({
                    let mut s = s.clone();
                    ::std::rc::Rc::new(
                        move |r#__forall_var_4: ::dafny_runtime::DafnyCharUTF16| -> bool {
                            let mut ch: ::dafny_runtime::DafnyCharUTF16 = r#__forall_var_4.clone();
                            !s.contains(&ch)
                                || crate::r#_HexStrings_Compile::_default::IsLooseHexChar(&ch)
                        },
                    )
                })
                .as_ref(),
            )
        }
        pub fn HexVal(ch: &::dafny_runtime::DafnyCharUTF16) -> u8 {
            if ::dafny_runtime::DafnyCharUTF16(48 as u16) <= ch.clone()
                && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
            {
                ch.clone().0 as u8 - ::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8
            } else {
                if ::dafny_runtime::DafnyCharUTF16(97 as u16) <= ch.clone()
                    && ch.clone() <= ::dafny_runtime::DafnyCharUTF16(102 as u16)
                {
                    ch.clone().0 as u8 - ::dafny_runtime::DafnyCharUTF16(97 as u16).0 as u8 + 10
                } else {
                    ch.clone().0 as u8 - ::dafny_runtime::DafnyCharUTF16(65 as u16).0 as u8 + 10
                }
            }
        }
        pub fn HexStr(x: u8) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if x < 16 {
                let mut res: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(48 as u16),
                    crate::r#_HexStrings_Compile::_default::HexChar(x)
                ];
                res.clone()
            } else {
                let mut res: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                    crate::r#_HexStrings_Compile::_default::HexChar(x / 16),
                    crate::r#_HexStrings_Compile::_default::HexChar(x % 16)
                ];
                res.clone()
            }
        }
        pub fn HexValue(x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> u8 {
            crate::r#_HexStrings_Compile::_default::HexVal(&x.get(&::dafny_runtime::int!(0))) * 16
                + crate::r#_HexStrings_Compile::_default::HexVal(&x.get(&::dafny_runtime::int!(1)))
        }
        pub fn ToHexString(
            val: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
            let mut val = val.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if val.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator.concat(
                        &(::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>),
                    );
                } else {
                    _accumulator =
                        _accumulator.concat(&crate::r#_HexStrings_Compile::_default::HexStr(
                            val.get(&::dafny_runtime::int!(0)),
                        ));
                    let mut _in66: ::dafny_runtime::Sequence<u8> =
                        val.drop(&::dafny_runtime::int!(1));
                    val = _in66.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn FromHexString(
            data: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            let mut data = data.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if data.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>));
                } else {
                    if (::dafny_runtime::euclidian_modulo)(
                        data.cardinality(),
                        ::dafny_runtime::int!(2),
                    ) == ::dafny_runtime::int!(1)
                    {
                        _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                            crate::r#_HexStrings_Compile::_default::HexVal(
                                &data.get(&::dafny_runtime::int!(0))
                            )
                        ]);
                        let mut _in67: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            data.drop(&::dafny_runtime::int!(1));
                        data = _in67.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                            crate::r#_HexStrings_Compile::_default::HexValue(
                                &data.take(&::dafny_runtime::int!(2))
                            )
                        ]);
                        let mut _in68: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            data.drop(&::dafny_runtime::int!(2));
                        data = _in68.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
    }

    pub type HexString = ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;

    pub type LooseHexString = ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
}
pub mod r#_GetOpt_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::cmp::Eq;
    pub use ::std::convert::AsRef;
    pub use ::std::default::Default;
    pub use ::std::fmt::Debug;
    pub use ::std::hash::Hash;

    pub struct _default {}

    impl _default {
        pub fn Example(
            args: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                bool,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        bool,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut MyOptions: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    help: ::dafny_runtime::string_utf16_of("Does foo things"),
                    short: crate::r#_GetOpt_Compile::_default::NullChar(),
                    solo: false,
                    inherit: false,
                    vis: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Visibility::Normal {}),
                    shortAlias: ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    longAlias: ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    help: ::dafny_runtime::string_utf16_of("Does bar things to thingy"),
                    argName: ::dafny_runtime::string_utf16_of("thingy"),
                    short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                    unused: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Unused::UnusedOk {}),
                    inherit: false,
                    vis: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Visibility::Normal {}),
                    shortAlias: ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    longAlias: ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                    positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                    options: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                        name: ::dafny_runtime::string_utf16_of("command"),
                        help: ::dafny_runtime::string_utf16_of("Does command stuff"),
                        params: ::dafny_runtime::seq![
                            ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                                name: ::dafny_runtime::string_utf16_of("two"),
                                help: ::dafny_runtime::string_utf16_of("Does bar things to thingy"),
                                argName: ::dafny_runtime::string_utf16_of("thingy"),
                                short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                                unused: ::std::rc::Rc::new(
                                    crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                                ),
                                inherit: false,
                                vis: ::std::rc::Rc::new(
                                    crate::r#_GetOpt_Compile::Visibility::Normal {}
                                ),
                                shortAlias: ::dafny_runtime::seq![]
                                    as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                longAlias: ::dafny_runtime::seq![]
                                    as ::dafny_runtime::Sequence<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                positional: ::std::rc::Rc::new(
                                    crate::r#_GetOpt_Compile::Tri::No {}
                                )
                            }),
                            ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                                name: ::dafny_runtime::string_utf16_of("foo"),
                                help: ::dafny_runtime::string_utf16_of("Does foo things"),
                                short: crate::r#_GetOpt_Compile::_default::NullChar(),
                                solo: false,
                                inherit: false,
                                vis: ::std::rc::Rc::new(
                                    crate::r#_GetOpt_Compile::Visibility::Normal {}
                                ),
                                shortAlias: ::dafny_runtime::seq![]
                                    as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                longAlias: ::dafny_runtime::seq![]
                                    as ::dafny_runtime::Sequence<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >
                            })
                        ]
                    })
                })
            ];
            let mut opts: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("myProg"),
                    help: ::dafny_runtime::string_utf16_of("does prog stuff"),
                    params: MyOptions.clone(),
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(&opts, args),
            );
            if valueOrError0.read().IsFailure() {
                output = ::dafny_runtime::MaybePlacebo::from(
                    valueOrError0.read().PropagateFailure::<bool>(),
                );
                return output.read();
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut h: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::NeedsHelp(
                &opts,
                &x,
                &::dafny_runtime::string_utf16_of(""),
            );
            if matches!(
                (&h).as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(h.value()));
                output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                    crate::r#_Wrappers_Compile::Result::<
                        bool,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: true,
                    },
                ));
                return output.read();
            };
            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<
                    bool,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: true,
                },
            ));
            return output.read();
        }
        pub fn Filter<_T: ::dafny_runtime::DafnyType>(
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool>,
            xs: &::dafny_runtime::Sequence<_T>,
        ) -> ::dafny_runtime::Sequence<_T> {
            let mut _accumulator: ::dafny_runtime::Sequence<_T> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>;
            let mut f = f.clone();
            let mut xs = xs.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>));
                } else {
                    _accumulator = _accumulator.concat(
                        &(if (&f)(&xs.get(&::dafny_runtime::int!(0))) {
                            ::dafny_runtime::seq![xs.get(&::dafny_runtime::int!(0))]
                        } else {
                            ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_T>
                        }),
                    );
                    let mut _in69: ::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> bool> = f.clone();
                    let mut _in70: ::dafny_runtime::Sequence<_T> =
                        xs.drop(&::dafny_runtime::int!(1));
                    f = _in69.clone();
                    xs = _in70.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn NeedsHelp(
            opts: &::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
            args: &::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
            prefix: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut opts = opts.clone();
            let mut args = args.clone();
            let mut prefix = prefix.clone();
            'TAIL_CALL_START: loop {
                if args.params().cardinality() != ::dafny_runtime::int!(0)
                    && args.params().get(&::dafny_runtime::int!(0)).name().clone()
                        == crate::r#_GetOpt_Compile::_default::HELP_STR()
                {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: crate::r#_GetOpt_Compile::_default::GetHelp(&opts, &prefix),
                    });
                } else {
                    if matches!(
                        args.subcommand().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        let mut valueOrError0: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
                        > = crate::r#_GetOpt_Compile::_default::GetSubOptions(
                            opts.params(),
                            args.subcommand().value().command(),
                            &::dafny_runtime::int!(0),
                        );
                        if valueOrError0.IsFailure() {
                            return valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>();
                        } else {
                            let mut pos: ::dafny_runtime::_System::nat = valueOrError0.Extract();
                            let mut _in71: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                                opts.params().get(&pos).options().clone();
                            let mut _in72: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                                args.subcommand().value().clone();
                            let mut _in73: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = prefix
                                .concat(args.command())
                                .concat(&::dafny_runtime::string_utf16_of(" "));
                            opts = _in71.clone();
                            args = _in72.clone();
                            prefix = _in73.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::None {});
                    }
                }
            }
        }
        pub fn GetHelp(
            opts: &::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
            prefix: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut newOpts: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            > = opts.params().concat(&::dafny_runtime::seq![
                crate::r#_GetOpt_Compile::_default::HELP_PARAM()
            ]);
            let mut longLen: ::dafny_runtime::_System::nat =
                crate::r#_GetOpt_Compile::_default::GetLongLen(&newOpts, &::dafny_runtime::int!(6));
            let mut commandLen: ::dafny_runtime::_System::nat =
                crate::r#_GetOpt_Compile::_default::GetCommandLen(
                    &newOpts,
                    &::dafny_runtime::int!(0),
                );
            if commandLen.clone() == ::dafny_runtime::int!(0) {
                ::dafny_runtime::string_utf16_of("USAGE : ")
                    .concat(prefix)
                    .concat(opts.name())
                    .concat(&::dafny_runtime::string_utf16_of(" [args...]\n"))
                    .concat(opts.help())
                    .concat(&::dafny_runtime::string_utf16_of("\n"))
                    .concat(&crate::r#_GetOpt_Compile::_default::GetHelp2(
                        &newOpts, &longLen,
                    ))
            } else {
                ::dafny_runtime::string_utf16_of("USAGE : ")
                    .concat(opts.name())
                    .concat(&::dafny_runtime::string_utf16_of(
                        " [args...] command [args...]\n",
                    ))
                    .concat(opts.help())
                    .concat(&::dafny_runtime::string_utf16_of("\n"))
                    .concat(&::dafny_runtime::string_utf16_of("\nAvailable Commands:\n"))
                    .concat(&crate::r#_GetOpt_Compile::_default::GetCmdHelp(
                        &newOpts,
                        &commandLen,
                    ))
                    .concat(&::dafny_runtime::string_utf16_of("\nAvailable Options:\n"))
                    .concat(&crate::r#_GetOpt_Compile::_default::GetHelp2(
                        &newOpts, &longLen,
                    ))
            }
        }
        pub fn OptValue(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            arg: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut args = args.clone();
            let mut arg = arg.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {});
                } else {
                    if args.get(&::dafny_runtime::int!(0)).name().clone() == arg.clone() {
                        return args.get(&::dafny_runtime::int!(0)).value().clone();
                    } else {
                        let mut _in74: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in75: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            arg.clone();
                        args = _in74.clone();
                        arg = _in75.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn FlagCount(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            arg: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::_System::nat {
            let mut _accumulator: ::dafny_runtime::_System::nat = ::dafny_runtime::int!(0);
            let mut args = args.clone();
            let mut arg = arg.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return ::dafny_runtime::int!(0) + _accumulator.clone();
                } else {
                    if args.get(&::dafny_runtime::int!(0)).name().clone() == arg.clone() {
                        _accumulator = _accumulator.clone() + ::dafny_runtime::int!(1);
                        let mut _in76: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in77: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            arg.clone();
                        args = _in76.clone();
                        arg = _in77.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        let mut _in78: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in79: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            arg.clone();
                        args = _in78.clone();
                        arg = _in79.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn OptMapLast(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::dafny_runtime::Map<
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        > {
            let mut args = args.clone();
            let mut theMap = theMap.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return theMap.clone();
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        let mut _in80: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in81: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = theMap.update_index(
                            args.get(&::dafny_runtime::int!(0)).name(),
                            args.get(&::dafny_runtime::int!(0)).value().value(),
                        );
                        args = _in80.clone();
                        theMap = _in81.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        let mut _in82: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in83: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = theMap.clone();
                        args = _in82.clone();
                        theMap = _in83.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn FlagsSet(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theSet: &::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::dafny_runtime::Set<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            let mut args = args.clone();
            let mut theSet = theSet.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return theSet.clone();
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        let mut _in84: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in85: ::dafny_runtime::Set<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = theSet.clone();
                        args = _in84.clone();
                        theSet = _in85.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        let mut _in86: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in87: ::dafny_runtime::Set<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>> = theSet.merge(&::dafny_runtime::set!{args.get(&::dafny_runtime::int!(0)).name().clone()});
                        args = _in86.clone();
                        theSet = _in87.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn OptMapList(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >,
        ) -> ::dafny_runtime::Map<
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
        > {
            let mut args = args.clone();
            let mut theMap = theMap.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return theMap.clone();
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        if theMap.contains(args.get(&::dafny_runtime::int!(0)).name()) {
                            let mut _in88: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in89: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            > = theMap.update_index(
                                args.get(&::dafny_runtime::int!(0)).name(),
                                &theMap
                                    .get(args.get(&::dafny_runtime::int!(0)).name())
                                    .concat(&::dafny_runtime::seq![args
                                        .get(&::dafny_runtime::int!(0))
                                        .value()
                                        .value()
                                        .clone()]),
                            );
                            args = _in88.clone();
                            theMap = _in89.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            let mut _in90: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in91: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            > = theMap.update_index(
                                args.get(&::dafny_runtime::int!(0)).name(),
                                &::dafny_runtime::seq![args
                                    .get(&::dafny_runtime::int!(0))
                                    .value()
                                    .value()
                                    .clone()],
                            );
                            args = _in90.clone();
                            theMap = _in91.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        let mut _in92: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in93: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = theMap.clone();
                        args = _in92.clone();
                        theMap = _in93.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn FlagMapCount(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::_System::nat,
            >,
        ) -> ::dafny_runtime::Map<
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::dafny_runtime::_System::nat,
        > {
            let mut args = args.clone();
            let mut theMap = theMap.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return theMap.clone();
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        let mut _in94: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in95: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::_System::nat,
                        > = theMap.clone();
                        args = _in94.clone();
                        theMap = _in95.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        if theMap.contains(args.get(&::dafny_runtime::int!(0)).name()) {
                            let mut _in96: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in97: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::dafny_runtime::_System::nat,
                            > = theMap.update_index(
                                args.get(&::dafny_runtime::int!(0)).name(),
                                &(theMap.get(args.get(&::dafny_runtime::int!(0)).name())
                                    + ::dafny_runtime::int!(1)),
                            );
                            args = _in96.clone();
                            theMap = _in97.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            let mut _in98: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in99: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::dafny_runtime::_System::nat,
                            > = theMap.update_index(
                                args.get(&::dafny_runtime::int!(0)).name(),
                                &::dafny_runtime::int!(1),
                            );
                            args = _in98.clone();
                            theMap = _in99.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
            }
        }
        pub fn FlagSetCheck(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theSet: &::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Set<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut args = args.clone();
            let mut theSet = theSet.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Set<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: theSet.clone(),
                    });
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        if theSet.contains(args.get(&::dafny_runtime::int!(0)).name()) {
                            return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                ::dafny_runtime::Set<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >::Failure {
                                error: ::dafny_runtime::string_utf16_of("Duplicate arg : ")
                                    .concat(args.get(&::dafny_runtime::int!(0)).name()),
                            });
                        } else {
                            let mut _in100: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in101: ::dafny_runtime::Set<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>> = theSet.merge(&::dafny_runtime::set!{args.get(&::dafny_runtime::int!(0)).name().clone()});
                            args = _in100.clone();
                            theSet = _in101.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        let mut _in102: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in103: ::dafny_runtime::Set<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = theSet.clone();
                        args = _in102.clone();
                        theSet = _in103.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn OptMapCheck(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            theMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Map<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut args = args.clone();
            let mut theMap = theMap.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: theMap.clone(),
                    });
                } else {
                    if matches!(
                        args.get(&::dafny_runtime::int!(0)).value().as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        if theMap.contains(args.get(&::dafny_runtime::int!(0)).name()) {
                            return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >::Failure {
                                error: ::dafny_runtime::string_utf16_of("Duplicate arg : ")
                                    .concat(args.get(&::dafny_runtime::int!(0)).name()),
                            });
                        } else {
                            let mut _in104: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.drop(&::dafny_runtime::int!(1));
                            let mut _in105: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = theMap.update_index(
                                args.get(&::dafny_runtime::int!(0)).name(),
                                args.get(&::dafny_runtime::int!(0)).value().value(),
                            );
                            args = _in104.clone();
                            theMap = _in105.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        let mut _in106: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in107: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = theMap.clone();
                        args = _in106.clone();
                        theMap = _in107.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn GetHelpHelp(
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(
                opt.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) {
                ::dafny_runtime::string_utf16_of("")
            } else {
                if matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Flag { .. }) {
                    opt.help().clone()
                } else {
                    opt.help().concat(
                        &(if opt.Required() {
                            ::dafny_runtime::string_utf16_of(" (required)")
                        } else {
                            if opt.HasDefault() {
                                ::dafny_runtime::string_utf16_of(" (default : ")
                                    .concat(opt.unused().val())
                                    .concat(&::dafny_runtime::string_utf16_of(")"))
                            } else {
                                ::dafny_runtime::string_utf16_of("")
                            }
                        }),
                    )
                }
            }
        }
        pub fn OneHelp(
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            longLen: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(
                opt.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) || !opt.ShowHelp()
            {
                ::dafny_runtime::string_utf16_of("")
            } else {
                crate::r#_GetOpt_Compile::_default::GetShortHelp(opt)
                    .concat(&::dafny_runtime::string_utf16_of("  "))
                    .concat(&crate::r#_GetOpt_Compile::_default::GetLongHelp(
                        opt, longLen,
                    ))
                    .concat(&::dafny_runtime::string_utf16_of("  "))
                    .concat(&crate::r#_GetOpt_Compile::_default::GetHelpHelp(opt))
                    .concat(&::dafny_runtime::string_utf16_of("\n"))
            }
        }
        pub fn GetCommandHelp(
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            commandLen: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut name: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if opt
                .options()
                .name()
                .cardinality()
                < commandLen.clone()
            {
                opt.options().name().concat(&({
              let _initializer = {
                    ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                            ::dafny_runtime::DafnyCharUTF16(32 as u16)
                          })
                  };
              ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), commandLen.clone() - opt.options().name().cardinality()).map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()
              }))
            } else {
                opt.options().name().clone()
            };
            name.concat(&::dafny_runtime::string_utf16_of("  "))
                .concat(opt.options().help())
                .concat(&::dafny_runtime::string_utf16_of("\n"))
        }
        pub fn GetShortHelp(
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                || matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Flag { .. })
            {
                if opt.short().clone() != crate::r#_GetOpt_Compile::_default::NullChar() {
                    ::dafny_runtime::string_utf16_of("-")
                        .concat(&::dafny_runtime::seq![opt.short().clone()])
                } else {
                    ::dafny_runtime::string_utf16_of("  ")
                }
            } else {
                ::dafny_runtime::string_utf16_of("")
            }
        }
        pub fn GetLongHelp(
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            longLen: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                || matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Flag { .. })
            {
                let mut tmp: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    ::dafny_runtime::string_utf16_of("--")
                        .concat(opt.name())
                        .concat(
                            &(if matches!(opt.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                            {
                                ::dafny_runtime::string_utf16_of("=").concat(opt.argName())
                            } else {
                                ::dafny_runtime::string_utf16_of("")
                            }),
                        );
                if tmp.cardinality() < longLen.clone() {
                    tmp.concat(&({
              let _initializer = {
                    ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                            ::dafny_runtime::DafnyCharUTF16(32 as u16)
                          })
                  };
              ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), longLen.clone() - tmp.cardinality()).map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()
              }))
                } else {
                    tmp.clone()
                }
            } else {
                ::dafny_runtime::string_utf16_of("")
            }
        }
        pub fn GetHelp2(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            longLen: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
            let mut opts = opts.clone();
            let mut longLen = longLen.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator.concat(&::dafny_runtime::string_utf16_of(""));
                } else {
                    let mut x: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_GetOpt_Compile::_default::OneHelp(
                            &opts.get(&::dafny_runtime::int!(0)),
                            &longLen,
                        );
                    _accumulator = _accumulator.concat(&x);
                    let mut _in108: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = opts.drop(&::dafny_runtime::int!(1));
                    let mut _in109: ::dafny_runtime::_System::nat = longLen.clone();
                    opts = _in108.clone();
                    longLen = _in109.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn GetCmdHelp(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            commandLen: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut _accumulator: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
            let mut opts = opts.clone();
            let mut commandLen = commandLen.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator.concat(&::dafny_runtime::string_utf16_of(""));
                } else {
                    let mut x: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if matches!(
                        (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Command { .. }
                    ) {
                        crate::r#_GetOpt_Compile::_default::GetCommandHelp(
                            &opts.get(&::dafny_runtime::int!(0)),
                            &commandLen,
                        )
                    } else {
                        ::dafny_runtime::string_utf16_of("")
                    };
                    _accumulator = _accumulator.concat(&x);
                    let mut _in110: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = opts.drop(&::dafny_runtime::int!(1));
                    let mut _in111: ::dafny_runtime::_System::nat = commandLen.clone();
                    opts = _in110.clone();
                    commandLen = _in111.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn GetLongLen(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            max: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::_System::nat {
            let mut opts = opts.clone();
            let mut max = max.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return max.clone();
                } else {
                    let mut x: ::dafny_runtime::DafnyInt =
                        crate::r#_GetOpt_Compile::_default::GetLongHelp(
                            &opts.get(&::dafny_runtime::int!(0)),
                            &::dafny_runtime::int!(0),
                        )
                        .cardinality();
                    let mut newMax: ::dafny_runtime::DafnyInt = if max.clone() < x.clone() {
                        x.clone()
                    } else {
                        max.clone()
                    };
                    let mut _in112: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = opts.drop(&::dafny_runtime::int!(1));
                    let mut _in113: ::dafny_runtime::DafnyInt = newMax.clone();
                    opts = _in112.clone();
                    max = _in113.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn GetCommandLen(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            max: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::_System::nat {
            let mut opts = opts.clone();
            let mut max = max.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return max.clone();
                } else {
                    let mut x: ::dafny_runtime::DafnyInt = if matches!(
                        (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Command { .. }
                    ) {
                        opts.get(&::dafny_runtime::int!(0))
                            .options()
                            .name()
                            .cardinality()
                    } else {
                        ::dafny_runtime::int!(0)
                    };
                    let mut newMax: ::dafny_runtime::DafnyInt = if max.clone() < x.clone() {
                        x.clone()
                    } else {
                        max.clone()
                    };
                    let mut _in114: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = opts.drop(&::dafny_runtime::int!(1));
                    let mut _in115: ::dafny_runtime::DafnyInt = newMax.clone();
                    opts = _in114.clone();
                    max = _in115.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn AddShortAlias(
            aliases: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            shortMap: &::dafny_runtime::Map<
                ::dafny_runtime::DafnyCharUTF16,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            name: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Map<
                    ::dafny_runtime::DafnyCharUTF16,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut aliases = aliases.clone();
            let mut shortMap = shortMap.clone();
            let mut name = name.clone();
            'TAIL_CALL_START: loop {
                if aliases.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Map<
                            ::dafny_runtime::DafnyCharUTF16,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: shortMap.clone(),
                    });
                } else {
                    if shortMap.contains(&aliases.get(&::dafny_runtime::int!(0))) {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Map<
                                ::dafny_runtime::DafnyCharUTF16,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Failure {
                            error: ::dafny_runtime::string_utf16_of("Short alias '")
                                .concat(
                                    &aliases.slice(
                                        &::dafny_runtime::int!(0),
                                        &::dafny_runtime::int!(1),
                                    ),
                                )
                                .concat(&::dafny_runtime::string_utf16_of("' for '"))
                                .concat(&name)
                                .concat(&::dafny_runtime::string_utf16_of(
                                    "' already in use as a short option.",
                                )),
                        });
                    } else {
                        let mut _in116: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            aliases.drop(&::dafny_runtime::int!(1));
                        let mut _in117: ::dafny_runtime::Map<
                            ::dafny_runtime::DafnyCharUTF16,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = shortMap.update_index(&aliases.get(&::dafny_runtime::int!(0)), &name);
                        let mut _in118: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            name.clone();
                        aliases = _in116.clone();
                        shortMap = _in117.clone();
                        name = _in118.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn AddLongAlias(
            aliases: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            longMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            >,
            opt: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Map<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                >,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut aliases = aliases.clone();
            let mut longMap = longMap.clone();
            let mut opt = opt.clone();
            'TAIL_CALL_START: loop {
                if aliases.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        >,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: longMap.clone(),
                    });
                } else {
                    if longMap.contains(&aliases.get(&::dafny_runtime::int!(0))) {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            >,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Failure {
                            error: ::dafny_runtime::string_utf16_of("Long alias '")
                                .concat(&aliases.get(&::dafny_runtime::int!(0)))
                                .concat(&::dafny_runtime::string_utf16_of(
                                    "' already in use as a long option.",
                                )),
                        });
                    } else {
                        let mut _in119: ::dafny_runtime::Sequence<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = aliases.drop(&::dafny_runtime::int!(1));
                        let mut _in120: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        > = longMap.update_index(&aliases.get(&::dafny_runtime::int!(0)), &opt);
                        let mut _in121: ::std::rc::Rc<crate::r#_GetOpt_Compile::Param> =
                            opt.clone();
                        aliases = _in119.clone();
                        longMap = _in120.clone();
                        opt = _in121.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn GetMaps(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            longMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            >,
            shortMap: &::dafny_runtime::Map<
                ::dafny_runtime::DafnyCharUTF16,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            commandMap: &crate::r#_GetOpt_Compile::CommandMap,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                (
                    ::dafny_runtime::Map<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    >,
                    ::dafny_runtime::Map<
                        ::dafny_runtime::DafnyCharUTF16,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                    crate::r#_GetOpt_Compile::CommandMap,
                ),
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut opts = opts.clone();
            let mut longMap = longMap.clone();
            let mut shortMap = shortMap.clone();
            let mut commandMap = commandMap.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        (
                            ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            >,
                            ::dafny_runtime::Map<
                                ::dafny_runtime::DafnyCharUTF16,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                            crate::r#_GetOpt_Compile::CommandMap,
                        ),
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: (longMap.clone(), shortMap.clone(), commandMap.clone()),
                    });
                } else {
                    let mut opt: ::std::rc::Rc<crate::r#_GetOpt_Compile::Param> =
                        opts.get(&::dafny_runtime::int!(0));
                    if matches!(
                        (&opt).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Command { .. }
                    ) {
                        let mut valueOrError0: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Outcome<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = crate::r#_Wrappers_Compile::_default::Need::<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >(
                            !commandMap.contains(opt.options().name()),
                            &::dafny_runtime::string_utf16_of("Duplicate command in options : ")
                                .concat(opt.options().name()),
                        );
                        if valueOrError0.IsFailure() {
                            return valueOrError0.PropagateFailure::<(
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                >,
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::DafnyCharUTF16,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                crate::r#_GetOpt_Compile::CommandMap,
                            )>();
                        } else {
                            let mut _in122: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = opts.drop(&::dafny_runtime::int!(1));
                            let mut _in123: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = longMap.clone();
                            let mut _in124: ::dafny_runtime::Map<
                                ::dafny_runtime::DafnyCharUTF16,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = shortMap.clone();
                            let mut _in125: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
                            > = commandMap.update_index(opt.options().name(), opt.options());
                            opts = _in122.clone();
                            longMap = _in123.clone();
                            shortMap = _in124.clone();
                            commandMap = _in125.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        let mut valueOrError1: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Outcome<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = crate::r#_Wrappers_Compile::_default::Need::<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >(
                            !longMap.contains(opt.name()),
                            &::dafny_runtime::string_utf16_of("Duplicate long name in options : ")
                                .concat(opt.name()),
                        );
                        if valueOrError1.IsFailure() {
                            return valueOrError1.PropagateFailure::<(
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                >,
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::DafnyCharUTF16,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                crate::r#_GetOpt_Compile::CommandMap,
                            )>();
                        } else {
                            let mut newLongMap: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = longMap.update_index(opt.name(), &opt);
                            let mut valueOrError2: ::std::rc::Rc<
                                crate::r#_Wrappers_Compile::Result<
                                    ::dafny_runtime::Map<
                                        ::dafny_runtime::DafnyCharUTF16,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            > = crate::r#_GetOpt_Compile::_default::AddShortAlias(
                                &opt.ShortAlias(),
                                &shortMap,
                                opt.name(),
                            );
                            if valueOrError2.IsFailure() {
                                return valueOrError2.PropagateFailure::<(
                                    ::dafny_runtime::Map<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                    >,
                                    ::dafny_runtime::Map<
                                        ::dafny_runtime::DafnyCharUTF16,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                    crate::r#_GetOpt_Compile::CommandMap,
                                )>();
                            } else {
                                let mut newShortMap: ::dafny_runtime::Map<
                                    ::dafny_runtime::DafnyCharUTF16,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                > = valueOrError2.Extract();
                                let mut valueOrError3: ::std::rc::Rc<
                                    crate::r#_Wrappers_Compile::Result<
                                        ::dafny_runtime::Map<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        >,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                > = crate::r#_GetOpt_Compile::_default::AddLongAlias(
                                    &opt.LongAlias(),
                                    &newLongMap,
                                    &opt,
                                );
                                if valueOrError3.IsFailure() {
                                    return valueOrError3.PropagateFailure::<(
                                        ::dafny_runtime::Map<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        >,
                                        ::dafny_runtime::Map<
                                            ::dafny_runtime::DafnyCharUTF16,
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                        crate::r#_GetOpt_Compile::CommandMap,
                                    )>();
                                } else {
                                    let mut newLongMap: ::dafny_runtime::Map<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                    > = valueOrError3.Extract();
                                    if opt.short().clone()
                                        != crate::r#_GetOpt_Compile::_default::NullChar()
                                    {
                                        let mut short: ::dafny_runtime::DafnyCharUTF16 =
                                            opt.short().clone();
                                        if newShortMap.contains(&short) {
                                            return ::std::rc::Rc::new(
                                                crate::r#_Wrappers_Compile::Result::<
                                                    (
                                                        ::dafny_runtime::Map<
                                                            ::dafny_runtime::Sequence<
                                                                ::dafny_runtime::DafnyCharUTF16,
                                                            >,
                                                            ::std::rc::Rc<
                                                                crate::r#_GetOpt_Compile::Param,
                                                            >,
                                                        >,
                                                        ::dafny_runtime::Map<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                            ::dafny_runtime::Sequence<
                                                                ::dafny_runtime::DafnyCharUTF16,
                                                            >,
                                                        >,
                                                        crate::r#_GetOpt_Compile::CommandMap,
                                                    ),
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >::Failure {
                                                    error: ::dafny_runtime::string_utf16_of(
                                                        "Duplicate short char in options : '",
                                                    )
                                                    .concat(&::dafny_runtime::seq![short.clone()])
                                                    .concat(&::dafny_runtime::string_utf16_of(
                                                        "' for ",
                                                    ))
                                                    .concat(opt.name())
                                                    .concat(&::dafny_runtime::string_utf16_of(
                                                        " and ",
                                                    ))
                                                    .concat(&newShortMap.get(&short)),
                                                },
                                            );
                                        } else {
                                            let mut _in126: ::dafny_runtime::Sequence<
                                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                            > = opts.drop(&::dafny_runtime::int!(1));
                                            let mut _in127: ::dafny_runtime::Map<
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                            > = newLongMap.update_index(opt.name(), &opt);
                                            let mut _in128: ::dafny_runtime::Map<
                                                ::dafny_runtime::DafnyCharUTF16,
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            > = newShortMap.update_index(&short, opt.name());
                                            let mut _in129: crate::r#_GetOpt_Compile::CommandMap =
                                                commandMap.clone();
                                            opts = _in126.clone();
                                            longMap = _in127.clone();
                                            shortMap = _in128.clone();
                                            commandMap = _in129.clone();
                                            continue 'TAIL_CALL_START;
                                        }
                                    } else {
                                        let mut _in130: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        > = opts.drop(&::dafny_runtime::int!(1));
                                        let mut _in131: ::dafny_runtime::Map<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        > = newLongMap.update_index(opt.name(), &opt);
                                        let mut _in132: ::dafny_runtime::Map<
                                            ::dafny_runtime::DafnyCharUTF16,
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        > = newShortMap.clone();
                                        let mut _in133: crate::r#_GetOpt_Compile::CommandMap =
                                            commandMap.clone();
                                        opts = _in130.clone();
                                        longMap = _in131.clone();
                                        shortMap = _in132.clone();
                                        commandMap = _in133.clone();
                                        continue 'TAIL_CALL_START;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn Print<_T: ::dafny_runtime::DafnyType>(
            x: &_T,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Outcome<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut _hresult = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Outcome<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            print!("{}", ::dafny_runtime::DafnyPrintWrapper(x));
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            _hresult = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Outcome::<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Pass {},
            ));
            return _hresult.read();
        }
        pub fn ArgExists(
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            name: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            let mut args = args.clone();
            let mut name = name.clone();
            'TAIL_CALL_START: loop {
                if args.cardinality() == ::dafny_runtime::int!(0) {
                    return false;
                } else {
                    if args.get(&::dafny_runtime::int!(0)).name().clone() == name.clone() {
                        return true;
                    } else {
                        let mut _in134: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = args.drop(&::dafny_runtime::int!(1));
                        let mut _in135: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            name.clone();
                        args = _in134.clone();
                        name = _in135.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn PostProcess2(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            args: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            newArgs: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut opts = opts.clone();
            let mut args = args.clone();
            let mut newArgs = newArgs.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: newArgs.clone(),
                    });
                } else {
                    if matches!(
                        (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Opt { .. }
                    ) && opts.get(&::dafny_runtime::int!(0)).Required()
                        && !crate::r#_GetOpt_Compile::_default::ArgExists(
                            &args,
                            opts.get(&::dafny_runtime::int!(0)).name(),
                        )
                    {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            >,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Failure {
                            error: ::dafny_runtime::string_utf16_of("Option '")
                                .concat(opts.get(&::dafny_runtime::int!(0)).name())
                                .concat(&::dafny_runtime::string_utf16_of(
                                    "' is required, but was not used.",
                                )),
                        });
                    } else {
                        if matches!(
                            (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                            crate::r#_GetOpt_Compile::Param::Opt { .. }
                        ) && opts.get(&::dafny_runtime::int!(0)).HasDefault()
                            && !crate::r#_GetOpt_Compile::_default::ArgExists(
                                &args,
                                opts.get(&::dafny_runtime::int!(0)).name(),
                            )
                        {
                            let mut _in136: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = opts.drop(&::dafny_runtime::int!(1));
                            let mut _in137: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.clone();
                            let mut _in138: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = newArgs.concat(&::dafny_runtime::seq![::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::OneArg::OneArg {
                                    name: opts.get(&::dafny_runtime::int!(0)).name().clone(),
                                    value: ::std::rc::Rc::new(
                                        crate::r#_Wrappers_Compile::Option::<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Some {
                                            value: opts
                                                .get(&::dafny_runtime::int!(0))
                                                .unused()
                                                .val()
                                                .clone()
                                        }
                                    )
                                }
                            )]);
                            opts = _in136.clone();
                            args = _in137.clone();
                            newArgs = _in138.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            let mut _in139: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = opts.drop(&::dafny_runtime::int!(1));
                            let mut _in140: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = args.clone();
                            let mut _in141: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = newArgs.clone();
                            opts = _in139.clone();
                            args = _in140.clone();
                            newArgs = _in141.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
            }
        }
        pub fn GetSubOptions(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            name: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            pos: &::dafny_runtime::_System::nat,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>>
        {
            let mut opts = opts.clone();
            let mut name = name.clone();
            let mut pos = pos.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == pos.clone() {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::_System::nat,
                    >::None {});
                } else {
                    if matches!(
                        (&opts.get(&pos)).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Command { .. }
                    ) && opts.get(&pos).options().name().clone() == name.clone()
                    {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::_System::nat,
                        >::Some {
                            value: pos.clone(),
                        });
                    } else {
                        let mut _in142: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        > = opts.clone();
                        let mut _in143: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            name.clone();
                        let mut _in144: ::dafny_runtime::DafnyInt =
                            pos.clone() + ::dafny_runtime::int!(1);
                        opts = _in142.clone();
                        name = _in143.clone();
                        pos = _in144.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn PostProcess(
            opts: &::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
            args: &::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut valueOrError0: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::PostProcess2(
                opts.params(),
                args.params(),
                &(::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>),
            );
            if valueOrError0.IsFailure() {
                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
            } else {
                let mut newParams: ::dafny_runtime::Sequence<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                > = valueOrError0.Extract();
                if matches!(
                    args.subcommand().as_ref(),
                    crate::r#_Wrappers_Compile::Option::Some { .. }
                ) {
                    let mut optPos: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Option<::dafny_runtime::_System::nat>,
                    > = crate::r#_GetOpt_Compile::_default::GetSubOptions(
                        opts.params(),
                        args.subcommand().value().command(),
                        &::dafny_runtime::int!(0),
                    );
                    if matches!(
                        (&optPos).as_ref(),
                        crate::r#_Wrappers_Compile::Option::Some { .. }
                    ) {
                        let mut valueOrError1: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = crate::r#_GetOpt_Compile::_default::PostProcess(
                            opts.params().get(optPos.value()).options(),
                            args.subcommand().value(),
                        );
                        if valueOrError1.IsFailure() {
                            valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                        } else {
                            let mut sub: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                                valueOrError1.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >::Success {
                                value: {
                                    let r#__pat_let1_0: ::std::rc::Rc<
                                        crate::r#_GetOpt_Compile::Parsed,
                                    > = args.clone();
                                    {
                                        let r#_dt__update__tmp_h0: ::std::rc::Rc<
                                            crate::r#_GetOpt_Compile::Parsed,
                                        > = r#__pat_let1_0.clone();
                                        {
                                            let r#__pat_let2_0: ::std::rc::Rc<
                                                crate::r#_Wrappers_Compile::Option<
                                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                                >,
                                            > = ::std::rc::Rc::new(
                                                crate::r#_Wrappers_Compile::Option::<
                                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                                >::Some {
                                                    value: sub.clone(),
                                                },
                                            );
                                            {
                                                let r#_dt__update_hsubcommand_h0: ::std::rc::Rc<
                                                    crate::r#_Wrappers_Compile::Option<
                                                        ::std::rc::Rc<
                                                            crate::r#_GetOpt_Compile::Parsed,
                                                        >,
                                                    >,
                                                > = r#__pat_let2_0.clone();
                                                {
                                                    let r#__pat_let3_0: ::dafny_runtime::Sequence<
                                                        ::std::rc::Rc<
                                                            crate::r#_GetOpt_Compile::OneArg,
                                                        >,
                                                    > = args.params().concat(&newParams);
                                                    {
                                                        let r#_dt__update_hparams_h0: ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>> = r#__pat_let3_0.clone();
                                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Parsed::Parsed {
                                    command: r#_dt__update__tmp_h0.command().clone(),
                                    params: r#_dt__update_hparams_h0.clone(),
                                    files: r#_dt__update__tmp_h0.files().clone(),
                                    subcommand: r#_dt__update_hsubcommand_h0.clone()
                                  })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                            })
                        }
                    } else {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Failure {
                            error: ::dafny_runtime::string_utf16_of(
                                "Internal error in GetOpt::PostProcess",
                            ),
                        })
                    }
                } else {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: {
                            let r#__pat_let4_0: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                                args.clone();
                            {
                                let r#_dt__update__tmp_h1: ::std::rc::Rc<
                                    crate::r#_GetOpt_Compile::Parsed,
                                > = r#__pat_let4_0.clone();
                                {
                                    let r#__pat_let5_0: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                    > = args.params().concat(&newParams);
                                    {
                                        let r#_dt__update_hparams_h1: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        > = r#__pat_let5_0.clone();
                                        ::std::rc::Rc::new(
                                            crate::r#_GetOpt_Compile::Parsed::Parsed {
                                                command: r#_dt__update__tmp_h1.command().clone(),
                                                params: r#_dt__update_hparams_h1.clone(),
                                                files: r#_dt__update__tmp_h1.files().clone(),
                                                subcommand: r#_dt__update__tmp_h1
                                                    .subcommand()
                                                    .clone(),
                                            },
                                        )
                                    }
                                }
                            }
                        },
                    })
                }
            }
        }
        pub fn AllDigits(s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            let mut s = s.clone();
            'TAIL_CALL_START: loop {
                if s.cardinality() == ::dafny_runtime::int!(0) {
                    return true;
                } else {
                    if ::dafny_runtime::DafnyCharUTF16(48 as u16)
                        <= s.get(&::dafny_runtime::int!(0))
                        && s.get(&::dafny_runtime::int!(0))
                            <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                    {
                        let mut _in145: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            s.drop(&::dafny_runtime::int!(1));
                        s = _in145.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        return false;
                    }
                }
            }
        }
        pub fn ValidPositional(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            if s.cardinality() == ::dafny_runtime::int!(0) {
                true
            } else {
                if s.get(&::dafny_runtime::int!(0)) != ::dafny_runtime::DafnyCharUTF16(45 as u16) {
                    true
                } else {
                    crate::r#_GetOpt_Compile::_default::AllDigits(
                        &s.drop(&::dafny_runtime::int!(1)),
                    )
                }
            }
        }
        pub fn TestPositionals(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            optional: &::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Outcome<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut opts = opts.clone();
            let mut optional = optional.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Pass {});
                } else {
                    if !matches!(
                        (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Opt { .. }
                    ) {
                        let mut _in146: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        > = opts.drop(&::dafny_runtime::int!(1));
                        let mut _in147: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Option<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = optional.clone();
                        opts = _in146.clone();
                        optional = _in147.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        if opts.get(&::dafny_runtime::int!(0)).positional().clone()
                            == ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        {
                            let mut _in148: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = opts.drop(&::dafny_runtime::int!(1));
                            let mut _in149: ::std::rc::Rc<
                                crate::r#_Wrappers_Compile::Option<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            > = optional.clone();
                            opts = _in148.clone();
                            optional = _in149.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            if opts.get(&::dafny_runtime::int!(0)).positional().clone()
                                == ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Maybe {})
                            {
                                let mut _in150: ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                > = opts.drop(&::dafny_runtime::int!(1));
                                let mut _in151: ::std::rc::Rc<
                                    crate::r#_Wrappers_Compile::Option<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                > = ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >::Some {
                                    value: opts.get(&::dafny_runtime::int!(0)).name().clone(),
                                });
                                opts = _in150.clone();
                                optional = _in151.clone();
                                continue 'TAIL_CALL_START;
                            } else {
                                if matches!(
                                    (&optional).as_ref(),
                                    crate::r#_Wrappers_Compile::Option::None { .. }
                                ) {
                                    let mut _in152: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                    > = opts.drop(&::dafny_runtime::int!(1));
                                    let mut _in153: ::std::rc::Rc<
                                        crate::r#_Wrappers_Compile::Option<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                    > = optional.clone();
                                    opts = _in152.clone();
                                    optional = _in153.clone();
                                    continue 'TAIL_CALL_START;
                                } else {
                                    return ::std::rc::Rc::new(
                                        crate::r#_Wrappers_Compile::Outcome::<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Fail {
                                            error: ::dafny_runtime::string_utf16_of(
                                                "Required positional argument '",
                                            )
                                            .concat(opts.get(&::dafny_runtime::int!(0)).name())
                                            .concat(&::dafny_runtime::string_utf16_of(
                                                "' follows optional positional argument '",
                                            ))
                                            .concat(optional.value())
                                            .concat(&::dafny_runtime::string_utf16_of("'.")),
                                        },
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn GetPositionals(
            opts: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            args: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            params: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                (
                    ::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                    ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                ),
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut opts = opts.clone();
            let mut args = args.clone();
            let mut params = params.clone();
            'TAIL_CALL_START: loop {
                if opts.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        (
                            ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            >,
                        ),
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: (args.clone(), params.clone()),
                    });
                } else {
                    if !matches!(
                        (&opts.get(&::dafny_runtime::int!(0))).as_ref(),
                        crate::r#_GetOpt_Compile::Param::Opt { .. }
                    ) {
                        let mut _in154: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        > = opts.drop(&::dafny_runtime::int!(1));
                        let mut _in155: ::dafny_runtime::Sequence<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = args.clone();
                        let mut _in156: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        > = params.clone();
                        opts = _in154.clone();
                        args = _in155.clone();
                        params = _in156.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        if opts.get(&::dafny_runtime::int!(0)).positional().clone()
                            == ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        {
                            let mut _in157: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = opts.drop(&::dafny_runtime::int!(1));
                            let mut _in158: ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = args.clone();
                            let mut _in159: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = params.clone();
                            opts = _in157.clone();
                            args = _in158.clone();
                            params = _in159.clone();
                            continue 'TAIL_CALL_START;
                        } else {
                            if opts.get(&::dafny_runtime::int!(0)).positional().clone()
                                == ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Yes {})
                            {
                                if args.cardinality() == ::dafny_runtime::int!(0) {
                                    return ::std::rc::Rc::new(
                                        crate::r#_Wrappers_Compile::Result::<
                                            (
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                                ::dafny_runtime::Sequence<
                                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                                >,
                                            ),
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Failure {
                                            error: ::dafny_runtime::string_utf16_of(
                                                "Positional arg '",
                                            )
                                            .concat(opts.get(&::dafny_runtime::int!(0)).name())
                                            .concat(&::dafny_runtime::string_utf16_of(
                                                "' is required, but we've run out of arguments.",
                                            )),
                                        },
                                    );
                                } else {
                                    if crate::r#_GetOpt_Compile::_default::ValidPositional(
                                        &args.get(&::dafny_runtime::int!(0)),
                                    ) {
                                        let mut _in160: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        > = opts.drop(&::dafny_runtime::int!(1));
                                        let mut _in161: ::dafny_runtime::Sequence<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        > = args.drop(&::dafny_runtime::int!(1));
                                        let mut _in162: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        > = params.concat(&::dafny_runtime::seq![
                                            ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::OneArg::OneArg {
                                                    name: opts
                                                        .get(&::dafny_runtime::int!(0))
                                                        .name()
                                                        .clone(),
                                                    value: ::std::rc::Rc::new(
                                                        crate::r#_Wrappers_Compile::Option::<
                                                            ::dafny_runtime::Sequence<
                                                                ::dafny_runtime::DafnyCharUTF16,
                                                            >,
                                                        >::Some {
                                                            value: args
                                                                .get(&::dafny_runtime::int!(0))
                                                        }
                                                    )
                                                }
                                            )
                                        ]);
                                        opts = _in160.clone();
                                        args = _in161.clone();
                                        params = _in162.clone();
                                        continue 'TAIL_CALL_START;
                                    } else {
                                        return ::std::rc::Rc::new(
                                            crate::r#_Wrappers_Compile::Result::<
                                                (
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::Sequence<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                        >,
                                                    >,
                                                    ::dafny_runtime::Sequence<
                                                        ::std::rc::Rc<
                                                            crate::r#_GetOpt_Compile::OneArg,
                                                        >,
                                                    >,
                                                ),
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            >::Failure {
                                                error: ::dafny_runtime::string_utf16_of(
                                                    "Positional arg ",
                                                )
                                                .concat(opts.get(&::dafny_runtime::int!(0)).name())
                                                .concat(&::dafny_runtime::string_utf16_of(
                                                    " matched with invalid positional value '",
                                                ))
                                                .concat(&args.get(&::dafny_runtime::int!(0)))
                                                .concat(&::dafny_runtime::string_utf16_of("'.")),
                                            },
                                        );
                                    }
                                }
                            } else {
                                if args.cardinality() == ::dafny_runtime::int!(0) {
                                    return ::std::rc::Rc::new(
                                        crate::r#_Wrappers_Compile::Result::<
                                            (
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                                ::dafny_runtime::Sequence<
                                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                                >,
                                            ),
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Success {
                                            value: (args.clone(), params.clone()),
                                        },
                                    );
                                } else {
                                    if crate::r#_GetOpt_Compile::_default::ValidPositional(
                                        &args.get(&::dafny_runtime::int!(0)),
                                    ) {
                                        let mut _in163: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        > = opts.drop(&::dafny_runtime::int!(1));
                                        let mut _in164: ::dafny_runtime::Sequence<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        > = args.drop(&::dafny_runtime::int!(1));
                                        let mut _in165: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        > = params.concat(&::dafny_runtime::seq![
                                            ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::OneArg::OneArg {
                                                    name: opts
                                                        .get(&::dafny_runtime::int!(0))
                                                        .name()
                                                        .clone(),
                                                    value: ::std::rc::Rc::new(
                                                        crate::r#_Wrappers_Compile::Option::<
                                                            ::dafny_runtime::Sequence<
                                                                ::dafny_runtime::DafnyCharUTF16,
                                                            >,
                                                        >::Some {
                                                            value: args
                                                                .get(&::dafny_runtime::int!(0))
                                                        }
                                                    )
                                                }
                                            )
                                        ]);
                                        opts = _in163.clone();
                                        args = _in164.clone();
                                        params = _in165.clone();
                                        continue 'TAIL_CALL_START;
                                    } else {
                                        return ::std::rc::Rc::new(
                                            crate::r#_Wrappers_Compile::Result::<
                                                (
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::Sequence<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                        >,
                                                    >,
                                                    ::dafny_runtime::Sequence<
                                                        ::std::rc::Rc<
                                                            crate::r#_GetOpt_Compile::OneArg,
                                                        >,
                                                    >,
                                                ),
                                                ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            >::Success {
                                                value: (args.clone(), params.clone()),
                                            },
                                        );
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn GetOptions(
            opts: &::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
            args: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut newOpts: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            > = opts.params().concat(&::dafny_runtime::seq![
                crate::r#_GetOpt_Compile::_default::HELP_PARAM()
            ]);
            let mut inherits: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            > = crate::r#_GetOpt_Compile::_default::Filter::<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            >(
                &({
                    ::std::rc::Rc::new(
                        move |o: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>| -> bool {
                            o.Inherits()
                        },
                    )
                }),
                &newOpts,
            );
            let mut valueOrError0: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Outcome<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::TestPositionals(
                &newOpts,
                &::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::None {}),
            );
            if valueOrError0.IsFailure() {
                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
            } else {
                let mut valueOrError1: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        (
                            ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            >,
                        ),
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                > = crate::r#_GetOpt_Compile::_default::GetPositionals(
                    &newOpts,
                    &args.drop(&::dafny_runtime::int!(1)),
                    &(::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                        >),
                );
                if valueOrError1.IsFailure() {
                    valueOrError1
                        .PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                } else {
                    let mut r#__let_tmp_rhs1: (
                        ::dafny_runtime::Sequence<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                        ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                    ) = valueOrError1.Extract();
                    let mut newArgs: ::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    > = r#__let_tmp_rhs1.0.clone();
                    let mut params: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                    > = r#__let_tmp_rhs1.1.clone();
                    let mut valueOrError2: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            (
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                >,
                                ::dafny_runtime::Map<
                                    ::dafny_runtime::DafnyCharUTF16,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                crate::r#_GetOpt_Compile::CommandMap,
                            ),
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                    > = crate::r#_GetOpt_Compile::_default::GetMaps(
                        &newOpts,
                        &::dafny_runtime::map![],
                        &::dafny_runtime::map![],
                        &::dafny_runtime::map![],
                    );
                    if valueOrError2.IsFailure() {
                        valueOrError2
                            .PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                    } else {
                        let mut r#__let_tmp_rhs2: (
                            ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            >,
                            ::dafny_runtime::Map<
                                ::dafny_runtime::DafnyCharUTF16,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                            crate::r#_GetOpt_Compile::CommandMap,
                        ) = valueOrError2.Extract();
                        let mut longMap: ::dafny_runtime::Map<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                        > = r#__let_tmp_rhs2.0.clone();
                        let mut shortMap: ::dafny_runtime::Map<
                            ::dafny_runtime::DafnyCharUTF16,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        > = r#__let_tmp_rhs2.1.clone();
                        let mut commandMap: crate::r#_GetOpt_Compile::CommandMap =
                            r#__let_tmp_rhs2.2.clone();
                        let mut context: ::std::rc::Rc<crate::r#_GetOpt_Compile::Context> =
                            ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Context::Context {
                                longMap: longMap.clone(),
                                shortMap: shortMap.clone(),
                                inherits: inherits.clone(),
                                commands: commandMap.clone(),
                                command: args.get(&::dafny_runtime::int!(0)),
                            });
                        let mut valueOrError3: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = crate::r#_GetOpt_Compile::_default::GetOptions2(
                            &newArgs,
                            &context,
                            &params,
                            &(::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >),
                        );
                        if valueOrError3.IsFailure() {
                            valueOrError3.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                        } else {
                            let mut result: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                                valueOrError3.Extract();
                            crate::r#_GetOpt_Compile::_default::PostProcess(opts, &result)
                        }
                    }
                }
            }
        }
        pub fn IndexOf<_T: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Sequence<_T>,
            v: &_T,
        ) -> ::dafny_runtime::_System::nat {
            let mut _accumulator: ::dafny_runtime::_System::nat = ::dafny_runtime::int!(0);
            let mut xs = xs.clone();
            let mut v = v.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if xs.get(&::dafny_runtime::int!(0)) == v.clone() {
                    return ::dafny_runtime::int!(0) + _accumulator.clone();
                } else {
                    _accumulator = _accumulator.clone() + ::dafny_runtime::int!(1);
                    let mut _in166: ::dafny_runtime::Sequence<_T> =
                        xs.drop(&::dafny_runtime::int!(1));
                    let mut _in167: _T = v.clone();
                    xs = _in166.clone();
                    v = _in167.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn SplitOnce<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Sequence<_T>,
            delim: &_T,
        ) -> (::dafny_runtime::Sequence<_T>, ::dafny_runtime::Sequence<_T>) {
            let mut i: ::dafny_runtime::_System::nat =
                crate::r#_GetOpt_Compile::_default::IndexOf::<_T>(s, delim);
            (s.take(&i), s.drop(&(i.clone() + ::dafny_runtime::int!(1))))
        }
        pub fn GetOptions2(
            args: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            context: &::std::rc::Rc<crate::r#_GetOpt_Compile::Context>,
            parms: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            files: &::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            if args.cardinality() == ::dafny_runtime::int!(0) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Parsed::Parsed {
                        command: context.command().clone(),
                        params: parms.clone(),
                        files: files.clone(),
                        subcommand: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        >::None {}),
                    }),
                })
            } else {
                if context
                    .commands()
                    .contains(&args.get(&::dafny_runtime::int!(0)))
                {
                    let mut inherits: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = crate::r#_GetOpt_Compile::_default::Filter::<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    >(
                        &({
                            ::std::rc::Rc::new(
                                move |o: &::std::rc::Rc<crate::r#_GetOpt_Compile::Param>| -> bool {
                                    o.Inherits()
                                },
                            )
                        }),
                        context
                            .commands()
                            .get(&args.get(&::dafny_runtime::int!(0)))
                            .params(),
                    );
                    let mut newOpts: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                    > = context
                        .commands()
                        .get(&args.get(&::dafny_runtime::int!(0)))
                        .params()
                        .concat(context.inherits());
                    let mut valueOrError0: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Outcome<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >,
                    > = crate::r#_GetOpt_Compile::_default::TestPositionals(
                        &newOpts,
                        &::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::None {}),
                    );
                    if valueOrError0.IsFailure() {
                        valueOrError0
                            .PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                    } else {
                        let mut valueOrError1: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                (
                                    ::dafny_runtime::Sequence<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                    ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                    >,
                                ),
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        > = crate::r#_GetOpt_Compile::_default::GetPositionals(
                            &newOpts,
                            &args.drop(&::dafny_runtime::int!(1)),
                            &(::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                >),
                        );
                        if valueOrError1.IsFailure() {
                            valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                        } else {
                            let mut r#__let_tmp_rhs3: (
                                ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                >,
                            ) = valueOrError1.Extract();
                            let mut newArgs: ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = r#__let_tmp_rhs3.0.clone();
                            let mut params: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = r#__let_tmp_rhs3.1.clone();
                            let mut valueOrError2: ::std::rc::Rc<
                                crate::r#_Wrappers_Compile::Result<
                                    (
                                        ::dafny_runtime::Map<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                        >,
                                        ::dafny_runtime::Map<
                                            ::dafny_runtime::DafnyCharUTF16,
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                        crate::r#_GetOpt_Compile::CommandMap,
                                    ),
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            > = crate::r#_GetOpt_Compile::_default::GetMaps(
                                &newOpts,
                                &::dafny_runtime::map![],
                                &::dafny_runtime::map![],
                                &::dafny_runtime::map![],
                            );
                            if valueOrError2.IsFailure() {
                                valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                            } else {
                                let mut r#__let_tmp_rhs4: (
                                    ::dafny_runtime::Map<
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                    >,
                                    ::dafny_runtime::Map<
                                        ::dafny_runtime::DafnyCharUTF16,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                    crate::r#_GetOpt_Compile::CommandMap,
                                ) = valueOrError2.Extract();
                                let mut longMap: ::dafny_runtime::Map<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                                > = r#__let_tmp_rhs4.0.clone();
                                let mut shortMap: ::dafny_runtime::Map<
                                    ::dafny_runtime::DafnyCharUTF16,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                > = r#__let_tmp_rhs4.1.clone();
                                let mut commandSet: crate::r#_GetOpt_Compile::CommandMap =
                                    r#__let_tmp_rhs4.2.clone();
                                let mut newContext: ::std::rc::Rc<
                                    crate::r#_GetOpt_Compile::Context,
                                > = ::std::rc::Rc::new(
                                    crate::r#_GetOpt_Compile::Context::Context {
                                        longMap: longMap.clone(),
                                        shortMap: shortMap.clone(),
                                        inherits: context.inherits().concat(&inherits),
                                        commands: commandSet.clone(),
                                        command: args.get(&::dafny_runtime::int!(0)),
                                    },
                                );
                                let mut lostArgs: ::dafny_runtime::DafnyInt =
                                    args.cardinality() - newArgs.cardinality();
                                let mut valueOrError3: ::std::rc::Rc<
                                    crate::r#_Wrappers_Compile::Result<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >,
                                > = crate::r#_GetOpt_Compile::_default::GetOptions2(
                                    &args.drop(&lostArgs),
                                    &newContext,
                                    &params,
                                    &(::dafny_runtime::seq![]
                                        as ::dafny_runtime::Sequence<
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >),
                                );
                                if valueOrError3.IsFailure() {
                                    valueOrError3.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                                } else {
                                    let mut result: ::std::rc::Rc<
                                        crate::r#_GetOpt_Compile::Parsed,
                                    > = valueOrError3.Extract();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >::Success {
                                        value: ::std::rc::Rc::new(
                                            crate::r#_GetOpt_Compile::Parsed::Parsed {
                                                command: context.command().clone(),
                                                params: parms.clone(),
                                                files: files.clone(),
                                                subcommand: ::std::rc::Rc::new(
                                                    crate::r#_Wrappers_Compile::Option::<
                                                        ::std::rc::Rc<
                                                            crate::r#_GetOpt_Compile::Parsed,
                                                        >,
                                                    >::Some {
                                                        value: result.clone(),
                                                    },
                                                ),
                                            },
                                        ),
                                    })
                                }
                            }
                        }
                    }
                } else {
                    if args.get(&::dafny_runtime::int!(0)) == ::dafny_runtime::string_utf16_of("--")
                    {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Success {
                            value: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Parsed::Parsed {
                                command: context.command().clone(),
                                params: parms.clone(),
                                files: files.concat(&args.drop(&::dafny_runtime::int!(1))),
                                subcommand: ::std::rc::Rc::new(
                                    crate::r#_Wrappers_Compile::Option::<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                    >::None {},
                                ),
                            }),
                        })
                    } else {
                        if ::dafny_runtime::string_utf16_of("--")
                            < args.get(&::dafny_runtime::int!(0))
                        {
                            let mut longOpt: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = args
                                .get(&::dafny_runtime::int!(0))
                                .drop(&::dafny_runtime::int!(2));
                            if longOpt.contains(&::dafny_runtime::DafnyCharUTF16(61 as u16)) {
                                let mut r#__let_tmp_rhs5: (
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ) = crate::r#_GetOpt_Compile::_default::SplitOnce::<
                                    ::dafny_runtime::DafnyCharUTF16,
                                >(
                                    &longOpt, &::dafny_runtime::DafnyCharUTF16(61 as u16)
                                );
                                let mut opt: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyCharUTF16,
                                > = r#__let_tmp_rhs5.0.clone();
                                let mut arg: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyCharUTF16,
                                > = r#__let_tmp_rhs5.1.clone();
                                if context.longMap().contains(&opt) {
                                    if context.longMap().get(&opt).NeedsArg() {
                                        crate::r#_GetOpt_Compile::_default::GetOptions2(
                                            &args.drop(&::dafny_runtime::int!(1)),
                                            context,
                                            &parms.concat(&context.longMap().get(&opt).MakeArg(
                                                &::std::rc::Rc::new(
                                                    crate::r#_Wrappers_Compile::Option::<
                                                        ::dafny_runtime::Sequence<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                        >,
                                                    >::Some {
                                                        value: arg.clone(),
                                                    },
                                                ),
                                            )),
                                            files,
                                        )
                                    } else {
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Failure {
                                            error: ::dafny_runtime::string_utf16_of("Option ")
                                                .concat(&opt)
                                                .concat(&::dafny_runtime::string_utf16_of(
                                                    " does not take an argument, but it got one.",
                                                )),
                                        })
                                    }
                                } else {
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >::Failure {
                                        error: ::dafny_runtime::string_utf16_of("Option ")
                                            .concat(&opt)
                                            .concat(&::dafny_runtime::string_utf16_of(
                                                " not recognized.",
                                            )),
                                    })
                                }
                            } else {
                                if context.longMap().contains(&longOpt) {
                                    let mut opt: ::std::rc::Rc<crate::r#_GetOpt_Compile::Param> =
                                        context.longMap().get(&longOpt);
                                    if opt.NeedsArg() {
                                        if args.cardinality() < ::dafny_runtime::int!(2) {
                                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Failure {
                          error: ::dafny_runtime::string_utf16_of("Option ").concat(&longOpt).concat(&::dafny_runtime::string_utf16_of(" requires an argument, but didn't get one."))
                        })
                                        } else {
                                            crate::r#_GetOpt_Compile::_default::GetOptions2(
                                                &args.drop(&::dafny_runtime::int!(2)),
                                                context,
                                                &parms.concat(&opt.MakeArg(&::std::rc::Rc::new(
                                                    crate::r#_Wrappers_Compile::Option::<
                                                        ::dafny_runtime::Sequence<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                        >,
                                                    >::Some {
                                                        value: args.get(&::dafny_runtime::int!(1)),
                                                    },
                                                ))),
                                                files,
                                            )
                                        }
                                    } else {
                                        if matches!(
                                            (&opt).as_ref(),
                                            crate::r#_GetOpt_Compile::Param::Flag { .. }
                                        ) && opt.solo().clone()
                                            && (args.cardinality() != ::dafny_runtime::int!(1)
                                                || parms.cardinality() != ::dafny_runtime::int!(0)
                                                || files.cardinality() != ::dafny_runtime::int!(0))
                                        {
                                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Failure {
                          error: ::dafny_runtime::string_utf16_of("Option '").concat(&longOpt).concat(&::dafny_runtime::string_utf16_of("' used with other stuff, but must only be used alone."))
                        })
                                        } else {
                                            crate::r#_GetOpt_Compile::_default::GetOptions2(
                                                &args.drop(&::dafny_runtime::int!(1)),
                                                context,
                                                &parms.concat(&opt.MakeArg(&::std::rc::Rc::new(
                                                    crate::r#_Wrappers_Compile::Option::<
                                                        ::dafny_runtime::Sequence<
                                                            ::dafny_runtime::DafnyCharUTF16,
                                                        >,
                                                    >::None {},
                                                ))),
                                                files,
                                            )
                                        }
                                    }
                                } else {
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                    >::Failure {
                                        error: ::dafny_runtime::string_utf16_of("Option ")
                                            .concat(&longOpt)
                                            .concat(&::dafny_runtime::string_utf16_of(
                                                " not recognized.",
                                            )),
                                    })
                                }
                            }
                        } else {
                            if ::dafny_runtime::string_utf16_of("-")
                                == args.get(&::dafny_runtime::int!(0))
                            {
                                crate::r#_GetOpt_Compile::_default::GetOptions2(
                                    &args.drop(&::dafny_runtime::int!(1)),
                                    context,
                                    parms,
                                    &files.concat(&::dafny_runtime::seq![
                                        args.get(&::dafny_runtime::int!(0))
                                    ]),
                                )
                            } else {
                                if ::dafny_runtime::string_utf16_of("-")
                                    < args.get(&::dafny_runtime::int!(0))
                                {
                                    let mut valueOrError4: ::std::rc::Rc<
                                        crate::r#_Wrappers_Compile::Result<
                                            (
                                                ::dafny_runtime::Sequence<
                                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                                >,
                                                ::std::rc::Rc<
                                                    crate::r#_Wrappers_Compile::Option<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            ),
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                    > = crate::r#_GetOpt_Compile::_default::GetShort(
                                        &args
                                            .get(&::dafny_runtime::int!(0))
                                            .drop(&::dafny_runtime::int!(1)),
                                        context.longMap(),
                                        context.shortMap(),
                                        &(::dafny_runtime::seq![]
                                            as ::dafny_runtime::Sequence<
                                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                            >),
                                    );
                                    if valueOrError4.IsFailure() {
                                        valueOrError4.PropagateFailure::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>()
                                    } else {
                                        let mut r#__let_tmp_rhs6: (
                                            ::dafny_runtime::Sequence<
                                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                            >,
                                            ::std::rc::Rc<
                                                crate::r#_Wrappers_Compile::Option<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            >,
                                        ) = valueOrError4.Extract();
                                        let mut newParms: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        > = r#__let_tmp_rhs6.0.clone();
                                        let mut nextParm: ::std::rc::Rc<
                                            crate::r#_Wrappers_Compile::Option<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        > = r#__let_tmp_rhs6.1.clone();
                                        if matches!(
                                            (&nextParm).as_ref(),
                                            crate::r#_Wrappers_Compile::Option::None { .. }
                                        ) {
                                            crate::r#_GetOpt_Compile::_default::GetOptions2(
                                                &args.drop(&::dafny_runtime::int!(1)),
                                                context,
                                                &parms.concat(&newParms),
                                                files,
                                            )
                                        } else {
                                            if args.cardinality() == ::dafny_runtime::int!(1) {
                                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Failure {
                            error: ::dafny_runtime::string_utf16_of("Short option ").concat(&::dafny_runtime::seq![nextParm.value().clone()]).concat(&::dafny_runtime::string_utf16_of(" requires argument but didn't get one."))
                          })
                                            } else {
                                                let mut longOpt: ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                > = context.shortMap().get(nextParm.value());
                                                let mut opt: ::std::rc::Rc<
                                                    crate::r#_GetOpt_Compile::Param,
                                                > = context.longMap().get(&longOpt);
                                                crate::r#_GetOpt_Compile::_default::GetOptions2(
                                                    &args.drop(&::dafny_runtime::int!(2)),
                                                    context,
                                                    &parms.concat(&newParms).concat(&opt.MakeArg(
                                                        &::std::rc::Rc::new(
                                                            crate::r#_Wrappers_Compile::Option::<
                                                                ::dafny_runtime::Sequence<
                                                                    ::dafny_runtime::DafnyCharUTF16,
                                                                >,
                                                            >::Some {
                                                                value:
                                                                    args.get(
                                                                        &::dafny_runtime::int!(1),
                                                                    ),
                                                            },
                                                        ),
                                                    )),
                                                    files,
                                                )
                                            }
                                        }
                                    }
                                } else {
                                    if context.commands().cardinality() == ::dafny_runtime::int!(0)
                                    {
                                        crate::r#_GetOpt_Compile::_default::GetOptions2(
                                            &args.drop(&::dafny_runtime::int!(1)),
                                            context,
                                            parms,
                                            &files.concat(&::dafny_runtime::seq![
                                                args.get(&::dafny_runtime::int!(0))
                                            ]),
                                        )
                                    } else {
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >::Failure {
                                            error: ::dafny_runtime::string_utf16_of(
                                                "Unrecognized command ",
                                            )
                                            .concat(&args.get(&::dafny_runtime::int!(0)))
                                            .concat(&::dafny_runtime::string_utf16_of(" for "))
                                            .concat(context.command())
                                            .concat(&::dafny_runtime::string_utf16_of("\nRun '"))
                                            .concat(context.command())
                                            .concat(&::dafny_runtime::string_utf16_of(
                                                " --help' for usage.",
                                            )),
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn GetShort(
            arg: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            longMap: &::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            >,
            shortMap: &::dafny_runtime::Map<
                ::dafny_runtime::DafnyCharUTF16,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            parms: &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                (
                    ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyCharUTF16>,
                    >,
                ),
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            let mut arg = arg.clone();
            let mut longMap = longMap.clone();
            let mut shortMap = shortMap.clone();
            let mut parms = parms.clone();
            'TAIL_CALL_START: loop {
                if arg.cardinality() == ::dafny_runtime::int!(0) {
                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        (
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            >,
                            ::std::rc::Rc<
                                crate::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyCharUTF16>,
                            >,
                        ),
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Success {
                        value: (
                            parms.clone(),
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                                ::dafny_runtime::DafnyCharUTF16,
                            >::None {}),
                        ),
                    });
                } else {
                    let mut ch: ::dafny_runtime::DafnyCharUTF16 =
                        arg.get(&::dafny_runtime::int!(0));
                    if shortMap.contains(&ch) {
                        let mut opt: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            shortMap.get(&ch);
                        if longMap.get(&opt).NeedsArg() {
                            if arg.cardinality() == ::dafny_runtime::int!(1) {
                                return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                    (
                                        ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        >,
                                        ::std::rc::Rc<
                                            crate::r#_Wrappers_Compile::Option<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                    ),
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >::Success {
                                    value: (
                                        parms.clone(),
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                                            ::dafny_runtime::DafnyCharUTF16,
                                        >::Some {
                                            value: ch.clone(),
                                        }),
                                    ),
                                });
                            } else {
                                return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                    (
                                        ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                        >,
                                        ::std::rc::Rc<
                                            crate::r#_Wrappers_Compile::Option<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                        >,
                                    ),
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >::Success {
                                    value: (
                                        parms.concat(&longMap.get(&opt).MakeArg(
                                            &::std::rc::Rc::new(
                                                crate::r#_Wrappers_Compile::Option::<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >::Some {
                                                    value: arg.drop(&::dafny_runtime::int!(1)),
                                                },
                                            ),
                                        )),
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                                            ::dafny_runtime::DafnyCharUTF16,
                                        >::None {}),
                                    ),
                                });
                            }
                        } else {
                            let mut _in168: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = arg.drop(&::dafny_runtime::int!(1));
                            let mut _in169: ::dafny_runtime::Map<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
                            > = longMap.clone();
                            let mut _in170: ::dafny_runtime::Map<
                                ::dafny_runtime::DafnyCharUTF16,
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = shortMap.clone();
                            let mut _in171: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                            > = parms.concat(&longMap.get(&opt).MakeArg(&::std::rc::Rc::new(
                                crate::r#_Wrappers_Compile::Option::<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >::None {},
                            )));
                            arg = _in168.clone();
                            longMap = _in169.clone();
                            shortMap = _in170.clone();
                            parms = _in171.clone();
                            continue 'TAIL_CALL_START;
                        }
                    } else {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            (
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
                                >,
                                ::std::rc::Rc<
                                    crate::r#_Wrappers_Compile::Option<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    >,
                                >,
                            ),
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        >::Failure {
                            error: ::dafny_runtime::string_utf16_of("Short option '")
                                .concat(&::dafny_runtime::seq![ch.clone()])
                                .concat(&::dafny_runtime::string_utf16_of("' not recognized.")),
                        });
                    }
                }
            }
        }
        pub fn NullChar() -> ::dafny_runtime::DafnyCharUTF16 {
            ::dafny_runtime::DafnyCharUTF16(
                <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(0)).unwrap(),
            )
        }
        pub fn HELP_STR() -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            ::dafny_runtime::string_utf16_of("help")
        }
        pub fn HELP_PARAM() -> ::std::rc::Rc<crate::r#_GetOpt_Compile::Param> {
            ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                name: crate::r#_GetOpt_Compile::_default::HELP_STR(),
                help: ::dafny_runtime::string_utf16_of("This help text."),
                short: crate::r#_GetOpt_Compile::_default::NullChar(),
                solo: true,
                inherit: true,
                vis: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Visibility::Normal {}),
                shortAlias: ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                longAlias: ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
            })
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Tri {
        Yes {},
        No {},
        Maybe {},
    }

    impl Tri {}

    impl Debug for Tri {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Tri {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Tri::Yes {} => {
                    write!(_formatter, "GetOpt_Compile.Tri.Yes")?;
                    Ok(())
                }
                Tri::No {} => {
                    write!(_formatter, "GetOpt_Compile.Tri.No")?;
                    Ok(())
                }
                Tri::Maybe {} => {
                    write!(_formatter, "GetOpt_Compile.Tri.Maybe")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Tri {}

    impl Hash for Tri {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Tri::Yes {} => {}
                Tri::No {} => {}
                Tri::Maybe {} => {}
            }
        }
    }

    impl Default for Tri {
        fn default() -> Tri {
            Tri::Yes {}
        }
    }

    impl AsRef<Tri> for &Tri {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Visibility {
        Normal {},
        Hidden {},
        Deprecated {},
    }

    impl Visibility {}

    impl Debug for Visibility {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Visibility {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Visibility::Normal {} => {
                    write!(_formatter, "GetOpt_Compile.Visibility.Normal")?;
                    Ok(())
                }
                Visibility::Hidden {} => {
                    write!(_formatter, "GetOpt_Compile.Visibility.Hidden")?;
                    Ok(())
                }
                Visibility::Deprecated {} => {
                    write!(_formatter, "GetOpt_Compile.Visibility.Deprecated")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Visibility {}

    impl Hash for Visibility {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Visibility::Normal {} => {}
                Visibility::Hidden {} => {}
                Visibility::Deprecated {} => {}
            }
        }
    }

    impl Default for Visibility {
        fn default() -> Visibility {
            Visibility::Normal {}
        }
    }

    impl AsRef<Visibility> for &Visibility {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Options {
        Options {
            name: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            help: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            params: ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
        },
    }

    impl Options {
        pub fn name(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Options::Options { name, help, params } => name,
            }
        }
        pub fn help(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Options::Options { name, help, params } => help,
            }
        }
        pub fn params(
            &self,
        ) -> &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>> {
            match self {
                Options::Options { name, help, params } => params,
            }
        }
    }

    impl Debug for Options {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Options {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Options::Options { name, help, params } => {
                    write!(_formatter, "GetOpt_Compile.Options.Options(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(name, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(help, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(params, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Options {}

    impl Hash for Options {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Options::Options { name, help, params } => {
                    ::std::hash::Hash::hash(name, _state);
                    ::std::hash::Hash::hash(help, _state);
                    ::std::hash::Hash::hash(params, _state)
                }
            }
        }
    }

    impl Default for Options {
        fn default() -> Options {
            Options::Options {
                name: ::std::default::Default::default(),
                help: ::std::default::Default::default(),
                params: ::std::default::Default::default(),
            }
        }
    }

    impl AsRef<Options> for &Options {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Unused {
        UnusedOk {},
        Required {},
        Default {
            val: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        },
    }

    impl Unused {
        pub fn val(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Unused::UnusedOk {} => panic!("field does not exist on this variant"),
                Unused::Required {} => panic!("field does not exist on this variant"),
                Unused::Default { val } => val,
            }
        }
    }

    impl Debug for Unused {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Unused {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Unused::UnusedOk {} => {
                    write!(_formatter, "GetOpt_Compile.Unused.UnusedOk")?;
                    Ok(())
                }
                Unused::Required {} => {
                    write!(_formatter, "GetOpt_Compile.Unused.Required")?;
                    Ok(())
                }
                Unused::Default { val } => {
                    write!(_formatter, "GetOpt_Compile.Unused.Default(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(val, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Unused {}

    impl Hash for Unused {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Unused::UnusedOk {} => {}
                Unused::Required {} => {}
                Unused::Default { val } => ::std::hash::Hash::hash(val, _state),
            }
        }
    }

    impl Default for Unused {
        fn default() -> Unused {
            Unused::UnusedOk {}
        }
    }

    impl AsRef<Unused> for &Unused {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Param {
        Opt {
            name: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            help: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            argName: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            short: ::dafny_runtime::DafnyCharUTF16,
            unused: ::std::rc::Rc<crate::r#_GetOpt_Compile::Unused>,
            inherit: bool,
            vis: ::std::rc::Rc<crate::r#_GetOpt_Compile::Visibility>,
            shortAlias: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            longAlias: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            positional: ::std::rc::Rc<crate::r#_GetOpt_Compile::Tri>,
        },
        Flag {
            name: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            help: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            short: ::dafny_runtime::DafnyCharUTF16,
            solo: bool,
            inherit: bool,
            vis: ::std::rc::Rc<crate::r#_GetOpt_Compile::Visibility>,
            shortAlias: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            longAlias: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        },
        Command {
            options: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
        },
    }

    impl Param {
        pub fn NeedsArg(self: &::std::rc::Rc<Self>) -> bool {
            matches!(self.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
        }
        pub fn Inherits(self: &::std::rc::Rc<Self>) -> bool {
            (matches!(self.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                || matches!(self.as_ref(), crate::r#_GetOpt_Compile::Param::Flag { .. }))
                && self.inherit().clone()
        }
        pub fn ShowHelp(self: &::std::rc::Rc<Self>) -> bool {
            matches!(
                self.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) || self.vis().clone()
                == ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Visibility::Normal {})
        }
        pub fn KeepResult(self: &::std::rc::Rc<Self>) -> bool {
            matches!(
                self.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) || self.vis().clone()
                != ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Visibility::Deprecated {})
        }
        pub fn Name(
            self: &::std::rc::Rc<Self>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(
                self.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) {
                self.options().name().clone()
            } else {
                self.name().clone()
            }
        }
        pub fn MakeArg(
            self: &::std::rc::Rc<Self>,
            value: &::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >,
        ) -> ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>> {
            if self.KeepResult() {
                ::dafny_runtime::seq![::std::rc::Rc::new(
                    crate::r#_GetOpt_Compile::OneArg::OneArg {
                        name: self.Name(),
                        value: value.clone()
                    }
                )]
            } else {
                ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>
            }
        }
        pub fn ShortAlias(
            self: &::std::rc::Rc<Self>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if matches!(
                self.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) {
                ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>
            } else {
                self.shortAlias().clone()
            }
        }
        pub fn LongAlias(
            self: &::std::rc::Rc<Self>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            if matches!(
                self.as_ref(),
                crate::r#_GetOpt_Compile::Param::Command { .. }
            ) {
                ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >
            } else {
                self.longAlias().clone()
            }
        }
        pub fn Required(self: &::std::rc::Rc<Self>) -> bool {
            matches!(self.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                && matches!(
                    self.unused().as_ref(),
                    crate::r#_GetOpt_Compile::Unused::Required { .. }
                )
        }
        pub fn HasDefault(self: &::std::rc::Rc<Self>) -> bool {
            matches!(self.as_ref(), crate::r#_GetOpt_Compile::Param::Opt { .. })
                && matches!(
                    self.unused().as_ref(),
                    crate::r#_GetOpt_Compile::Unused::Default { .. }
                )
        }
        pub fn name(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => name,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => name,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn help(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => help,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => help,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn argName(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => argName,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => panic!("field does not exist on this variant"),
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn short(&self) -> &::dafny_runtime::DafnyCharUTF16 {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => short,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => short,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn unused(&self) -> &::std::rc::Rc<crate::r#_GetOpt_Compile::Unused> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => unused,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => panic!("field does not exist on this variant"),
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn inherit(&self) -> &bool {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => inherit,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => inherit,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn vis(&self) -> &::std::rc::Rc<crate::r#_GetOpt_Compile::Visibility> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => vis,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => vis,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn shortAlias(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => shortAlias,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => shortAlias,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn longAlias(
            &self,
        ) -> &::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => longAlias,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => longAlias,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn positional(&self) -> &::std::rc::Rc<crate::r#_GetOpt_Compile::Tri> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => positional,
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => panic!("field does not exist on this variant"),
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn solo(&self) -> &bool {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => panic!("field does not exist on this variant"),
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => solo,
                Param::Command { options } => panic!("field does not exist on this variant"),
            }
        }
        pub fn options(&self) -> &::std::rc::Rc<crate::r#_GetOpt_Compile::Options> {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => panic!("field does not exist on this variant"),
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => panic!("field does not exist on this variant"),
                Param::Command { options } => options,
            }
        }
    }

    impl Debug for Param {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Param {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => {
                    write!(_formatter, "GetOpt_Compile.Param.Opt(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(name, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(help, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(argName, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(short, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(unused, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(inherit, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(vis, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(shortAlias, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(longAlias, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(positional, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => {
                    write!(_formatter, "GetOpt_Compile.Param.Flag(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(name, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(help, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(short, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(solo, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(inherit, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(vis, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(shortAlias, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(longAlias, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
                Param::Command { options } => {
                    write!(_formatter, "GetOpt_Compile.Param.Command(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(options, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Param {}

    impl Hash for Param {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Param::Opt {
                    name,
                    help,
                    argName,
                    short,
                    unused,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                    positional,
                } => {
                    ::std::hash::Hash::hash(name, _state);
                    ::std::hash::Hash::hash(help, _state);
                    ::std::hash::Hash::hash(argName, _state);
                    ::std::hash::Hash::hash(short, _state);
                    ::std::hash::Hash::hash(unused, _state);
                    ::std::hash::Hash::hash(inherit, _state);
                    ::std::hash::Hash::hash(vis, _state);
                    ::std::hash::Hash::hash(shortAlias, _state);
                    ::std::hash::Hash::hash(longAlias, _state);
                    ::std::hash::Hash::hash(positional, _state)
                }
                Param::Flag {
                    name,
                    help,
                    short,
                    solo,
                    inherit,
                    vis,
                    shortAlias,
                    longAlias,
                } => {
                    ::std::hash::Hash::hash(name, _state);
                    ::std::hash::Hash::hash(help, _state);
                    ::std::hash::Hash::hash(short, _state);
                    ::std::hash::Hash::hash(solo, _state);
                    ::std::hash::Hash::hash(inherit, _state);
                    ::std::hash::Hash::hash(vis, _state);
                    ::std::hash::Hash::hash(shortAlias, _state);
                    ::std::hash::Hash::hash(longAlias, _state)
                }
                Param::Command { options } => ::std::hash::Hash::hash(options, _state),
            }
        }
    }

    impl Default for Param {
        fn default() -> Param {
            Param::Opt {
                name: ::std::default::Default::default(),
                help: ::std::default::Default::default(),
                argName: ::std::default::Default::default(),
                short: ::std::default::Default::default(),
                unused: ::std::default::Default::default(),
                inherit: ::std::default::Default::default(),
                vis: ::std::default::Default::default(),
                shortAlias: ::std::default::Default::default(),
                longAlias: ::std::default::Default::default(),
                positional: ::std::default::Default::default(),
            }
        }
    }

    impl AsRef<Param> for &Param {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum OneArg {
        OneArg {
            name: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            value: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >,
        },
    }

    impl OneArg {
        pub fn name(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                OneArg::OneArg { name, value } => name,
            }
        }
        pub fn value(
            &self,
        ) -> &::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            match self {
                OneArg::OneArg { name, value } => value,
            }
        }
    }

    impl Debug for OneArg {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for OneArg {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                OneArg::OneArg { name, value } => {
                    write!(_formatter, "GetOpt_Compile.OneArg.OneArg(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(name, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(value, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for OneArg {}

    impl Hash for OneArg {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                OneArg::OneArg { name, value } => {
                    ::std::hash::Hash::hash(name, _state);
                    ::std::hash::Hash::hash(value, _state)
                }
            }
        }
    }

    impl Default for OneArg {
        fn default() -> OneArg {
            OneArg::OneArg {
                name: ::std::default::Default::default(),
                value: ::std::default::Default::default(),
            }
        }
    }

    impl AsRef<OneArg> for &OneArg {
        fn as_ref(&self) -> Self {
            self
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum Parsed {
        Parsed {
            command: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            params: ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>,
            files: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            subcommand: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>,
            >,
        },
    }

    impl Parsed {
        pub fn command(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => command,
            }
        }
        pub fn params(
            &self,
        ) -> &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>> {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => params,
            }
        }
        pub fn files(
            &self,
        ) -> &::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => files,
            }
        }
        pub fn subcommand(
            &self,
        ) -> &::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>>,
        > {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => subcommand,
            }
        }
    }

    impl Debug for Parsed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Parsed {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => {
                    write!(_formatter, "GetOpt_Compile.Parsed.Parsed(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(command, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(params, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(files, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(subcommand, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Parsed {}

    impl Hash for Parsed {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Parsed::Parsed {
                    command,
                    params,
                    files,
                    subcommand,
                } => {
                    ::std::hash::Hash::hash(command, _state);
                    ::std::hash::Hash::hash(params, _state);
                    ::std::hash::Hash::hash(files, _state);
                    ::std::hash::Hash::hash(subcommand, _state)
                }
            }
        }
    }

    impl Default for Parsed {
        fn default() -> Parsed {
            Parsed::Parsed {
                command: ::std::default::Default::default(),
                params: ::std::default::Default::default(),
                files: ::std::default::Default::default(),
                subcommand: ::std::default::Default::default(),
            }
        }
    }

    impl AsRef<Parsed> for &Parsed {
        fn as_ref(&self) -> Self {
            self
        }
    }

    pub type CommandMap = ::dafny_runtime::Map<
        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ::std::rc::Rc<crate::r#_GetOpt_Compile::Options>,
    >;

    #[derive(PartialEq, Clone)]
    pub enum Context {
        Context {
            longMap: ::dafny_runtime::Map<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
            >,
            shortMap: ::dafny_runtime::Map<
                ::dafny_runtime::DafnyCharUTF16,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
            inherits: ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>>,
            commands: crate::r#_GetOpt_Compile::CommandMap,
            command: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        },
    }

    impl Context {
        pub fn longMap(
            &self,
        ) -> &::dafny_runtime::Map<
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::std::rc::Rc<crate::r#_GetOpt_Compile::Param>,
        > {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => longMap,
            }
        }
        pub fn shortMap(
            &self,
        ) -> &::dafny_runtime::Map<
            ::dafny_runtime::DafnyCharUTF16,
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        > {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => shortMap,
            }
        }
        pub fn inherits(
            &self,
        ) -> &::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::Param>> {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => inherits,
            }
        }
        pub fn commands(&self) -> &crate::r#_GetOpt_Compile::CommandMap {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => commands,
            }
        }
        pub fn command(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => command,
            }
        }
    }

    impl Debug for Context {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl DafnyPrint for Context {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => {
                    write!(_formatter, "GetOpt_Compile.Context.Context(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(longMap, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(shortMap, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(inherits, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(commands, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(command, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl Eq for Context {}

    impl Hash for Context {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                Context::Context {
                    longMap,
                    shortMap,
                    inherits,
                    commands,
                    command,
                } => {
                    ::std::hash::Hash::hash(longMap, _state);
                    ::std::hash::Hash::hash(shortMap, _state);
                    ::std::hash::Hash::hash(inherits, _state);
                    ::std::hash::Hash::hash(commands, _state);
                    ::std::hash::Hash::hash(command, _state)
                }
            }
        }
    }

    impl Default for Context {
        fn default() -> Context {
            Context::Context {
                longMap: ::std::default::Default::default(),
                shortMap: ::std::default::Default::default(),
                inherits: ::std::default::Default::default(),
                commands: ::std::default::Default::default(),
                command: ::std::default::Default::default(),
            }
        }
    }

    impl AsRef<Context> for &Context {
        fn as_ref(&self) -> Self {
            self
        }
    }
}
pub mod r#_FloatCompare_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::default::Default;

    pub struct _default {}

    impl _default {
        pub fn StrToIntInner(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            acc: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            let mut s = s.clone();
            let mut acc = acc.clone();
            'TAIL_CALL_START: loop {
                if s.cardinality() == ::dafny_runtime::int!(0) {
                    return acc.clone();
                } else {
                    if ::dafny_runtime::DafnyCharUTF16(48 as u16)
                        <= s.get(&::dafny_runtime::int!(0))
                        && s.get(&::dafny_runtime::int!(0))
                            <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                    {
                        let mut _in172: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            s.drop(&::dafny_runtime::int!(1));
                        let mut _in173: ::dafny_runtime::DafnyInt = acc.clone()
                            * ::dafny_runtime::int!(10)
                            + ::dafny_runtime::int!(s.get(&::dafny_runtime::int!(0)).0)
                            - ::dafny_runtime::int!(::dafny_runtime::DafnyCharUTF16(48 as u16).0);
                        s = _in172.clone();
                        acc = _in173.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        let mut _in174: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            s.drop(&::dafny_runtime::int!(1));
                        let mut _in175: ::dafny_runtime::DafnyInt = acc.clone();
                        s = _in174.clone();
                        acc = _in175.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
        }
        pub fn SkipLeadingSpace(
            val: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut val = val.clone();
            'TAIL_CALL_START: loop {
                if ::dafny_runtime::int!(0) < val.cardinality()
                    && val.get(&::dafny_runtime::int!(0))
                        <= ::dafny_runtime::DafnyCharUTF16(32 as u16)
                {
                    let mut _in176: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        val.drop(&::dafny_runtime::int!(1));
                    val = _in176.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    return val.clone();
                }
            }
        }
        pub fn StrToInt(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            acc: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::DafnyInt {
            let mut tmp: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_FloatCompare_Compile::_default::SkipLeadingSpace(s);
            if tmp.cardinality() == ::dafny_runtime::int!(0) {
                ::dafny_runtime::int!(0)
            } else {
                if tmp.get(&::dafny_runtime::int!(0)) == ::dafny_runtime::DafnyCharUTF16(45 as u16)
                {
                    ::dafny_runtime::int!(0)
                        - crate::r#_FloatCompare_Compile::_default::StrToIntInner(
                            s,
                            &::dafny_runtime::int!(0),
                        )
                } else {
                    crate::r#_FloatCompare_Compile::_default::StrToIntInner(
                        s,
                        &::dafny_runtime::int!(0),
                    )
                }
            }
        }
        pub fn SplitE(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Option<(
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            )>,
        > {
            let mut parts: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                )>,
            > = crate::r#_StandardLibrary_Compile::_default::r#_SplitOnce_q::<
                ::dafny_runtime::DafnyCharUTF16,
            >(x, &::dafny_runtime::DafnyCharUTF16(101 as u16));
            if matches!(
                (&parts).as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                parts.clone()
            } else {
                crate::r#_StandardLibrary_Compile::_default::r#_SplitOnce_q::<
                    ::dafny_runtime::DafnyCharUTF16,
                >(x, &::dafny_runtime::DafnyCharUTF16(69 as u16))
            }
        }
        pub fn SplitExp(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> (
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::dafny_runtime::DafnyInt,
        ) {
            let mut parts: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                )>,
            > = crate::r#_FloatCompare_Compile::_default::SplitE(x);
            if matches!(
                (&parts).as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                (
                    parts.value().0.clone(),
                    crate::r#_FloatCompare_Compile::_default::StrToInt(
                        &parts.value().1.clone(),
                        &::dafny_runtime::int!(0),
                    ),
                )
            } else {
                (x.clone(), ::dafny_runtime::int!(0))
            }
        }
        pub fn SkipLeadingZeros(
            val: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut val = val.clone();
            'TAIL_CALL_START: loop {
                if ::dafny_runtime::int!(0) < val.cardinality()
                    && val.get(&::dafny_runtime::int!(0))
                        == ::dafny_runtime::DafnyCharUTF16(48 as u16)
                {
                    let mut _in177: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        val.drop(&::dafny_runtime::int!(1));
                    val = _in177.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    return val.clone();
                }
            }
        }
        pub fn SkipTrailingZeros(
            val: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut val = val.clone();
            'TAIL_CALL_START: loop {
                if ::dafny_runtime::int!(0) < val.cardinality()
                    && val.get(&(val.cardinality() - ::dafny_runtime::int!(1)))
                        == ::dafny_runtime::DafnyCharUTF16(48 as u16)
                {
                    let mut _in178: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        val.take(&(val.cardinality() - ::dafny_runtime::int!(1)));
                    val = _in178.clone();
                    continue 'TAIL_CALL_START;
                } else {
                    return val.clone();
                }
            }
        }
        pub fn SplitDot(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> (
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) {
            let mut parts: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Option<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                )>,
            > = crate::r#_StandardLibrary_Compile::_default::r#_SplitOnce_q::<
                ::dafny_runtime::DafnyCharUTF16,
            >(x, &::dafny_runtime::DafnyCharUTF16(46 as u16));
            if matches!(
                (&parts).as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                (
                    crate::r#_FloatCompare_Compile::_default::SkipLeadingZeros(
                        &parts.value().0.clone(),
                    ),
                    crate::r#_FloatCompare_Compile::_default::SkipTrailingZeros(
                        &parts.value().1.clone(),
                    ),
                )
            } else {
                (
                    crate::r#_FloatCompare_Compile::_default::SkipLeadingZeros(x),
                    ::dafny_runtime::string_utf16_of(""),
                )
            }
        }
        pub fn StrCmp(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            y: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> i8 {
            let mut x = x.clone();
            let mut y = y.clone();
            'TAIL_CALL_START: loop {
                if x.cardinality() == ::dafny_runtime::int!(0)
                    && y.cardinality() == ::dafny_runtime::int!(0)
                {
                    return 0;
                } else {
                    if x.cardinality() == ::dafny_runtime::int!(0) {
                        return -1;
                    } else {
                        if y.cardinality() == ::dafny_runtime::int!(0) {
                            return 1;
                        } else {
                            if x.get(&::dafny_runtime::int!(0)) < y.get(&::dafny_runtime::int!(0)) {
                                return -1;
                            } else {
                                if y.get(&::dafny_runtime::int!(0))
                                    < x.get(&::dafny_runtime::int!(0))
                                {
                                    return 1;
                                } else {
                                    let mut _in179: ::dafny_runtime::Sequence<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = x.drop(&::dafny_runtime::int!(1));
                                    let mut _in180: ::dafny_runtime::Sequence<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = y.drop(&::dafny_runtime::int!(1));
                                    x = _in179.clone();
                                    y = _in180.clone();
                                    continue 'TAIL_CALL_START;
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn AppendZeros(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            newLength: &::dafny_runtime::_System::nat,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            x.concat(&({
          let _initializer = {
                ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                        ::dafny_runtime::DafnyCharUTF16(48 as u16)
                      })
              };
          ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), newLength.clone() - x.cardinality()).map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()
          }))
        }
        pub fn CompareFloatInner(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            y: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> i8 {
            let mut xParts: (
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::DafnyInt,
            ) = crate::r#_FloatCompare_Compile::_default::SplitExp(x);
            let mut yParts: (
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::DafnyInt,
            ) = crate::r#_FloatCompare_Compile::_default::SplitExp(y);
            let mut xNum: (
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) = crate::r#_FloatCompare_Compile::_default::SplitDot(&xParts.0.clone());
            let mut yNum: (
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) = crate::r#_FloatCompare_Compile::_default::SplitDot(&yParts.0.clone());
            let mut xDigits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_FloatCompare_Compile::_default::SkipLeadingZeros(
                    &xNum.0.clone().concat(&xNum.1.clone()),
                );
            let mut yDigits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_FloatCompare_Compile::_default::SkipLeadingZeros(
                    &yNum.0.clone().concat(&yNum.1.clone()),
                );
            let mut xExp: ::dafny_runtime::DafnyInt =
                xParts.1.clone() - xNum.1.clone().cardinality();
            let mut yExp: ::dafny_runtime::DafnyInt =
                yParts.1.clone() - yNum.1.clone().cardinality();
            let mut logX: ::dafny_runtime::DafnyInt = xExp.clone() + xDigits.cardinality();
            let mut logY: ::dafny_runtime::DafnyInt = yExp.clone() + yDigits.cardinality();
            if logY.clone() < logX.clone() {
                1
            } else {
                if logX.clone() < logY.clone() {
                    -1
                } else {
                    if xDigits.cardinality() < yDigits.cardinality() {
                        crate::r#_FloatCompare_Compile::_default::StrCmp(
                            &crate::r#_FloatCompare_Compile::_default::AppendZeros(
                                &xDigits,
                                &yDigits.cardinality(),
                            ),
                            &yDigits,
                        )
                    } else {
                        if yDigits.cardinality() < xDigits.cardinality() {
                            crate::r#_FloatCompare_Compile::_default::StrCmp(
                                &xDigits,
                                &crate::r#_FloatCompare_Compile::_default::AppendZeros(
                                    &yDigits,
                                    &xDigits.cardinality(),
                                ),
                            )
                        } else {
                            crate::r#_FloatCompare_Compile::_default::StrCmp(&xDigits, &yDigits)
                        }
                    }
                }
            }
        }
        pub fn IsNegative(x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            ::dafny_runtime::int!(0) < x.cardinality()
                && x.get(&::dafny_runtime::int!(0)) == ::dafny_runtime::DafnyCharUTF16(45 as u16)
        }
        pub fn SkipLeadingPlus(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if ::dafny_runtime::int!(0) < x.cardinality()
                && x.get(&::dafny_runtime::int!(0)) == ::dafny_runtime::DafnyCharUTF16(43 as u16)
            {
                x.drop(&::dafny_runtime::int!(1))
            } else {
                x.clone()
            }
        }
        pub fn IsZero(x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            let mut x = x.clone();
            'TAIL_CALL_START: loop {
                if x.cardinality() == ::dafny_runtime::int!(0) {
                    return true;
                } else {
                    if x.get(&::dafny_runtime::int!(0))
                        == ::dafny_runtime::DafnyCharUTF16(48 as u16)
                        || x.get(&::dafny_runtime::int!(0))
                            == ::dafny_runtime::DafnyCharUTF16(46 as u16)
                    {
                        let mut _in181: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            x.drop(&::dafny_runtime::int!(1));
                        x = _in181.clone();
                        continue 'TAIL_CALL_START;
                    } else {
                        if ::dafny_runtime::DafnyCharUTF16(49 as u16)
                            <= x.get(&::dafny_runtime::int!(0))
                            && x.get(&::dafny_runtime::int!(0))
                                <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                        {
                            return false;
                        } else {
                            return true;
                        }
                    }
                }
            }
        }
        pub fn RecognizeZero(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if crate::r#_FloatCompare_Compile::_default::IsNegative(x) {
                if crate::r#_FloatCompare_Compile::_default::IsZero(
                    &x.drop(&::dafny_runtime::int!(1)),
                ) {
                    ::dafny_runtime::string_utf16_of("0")
                } else {
                    x.clone()
                }
            } else {
                if crate::r#_FloatCompare_Compile::_default::IsZero(x) {
                    ::dafny_runtime::string_utf16_of("0")
                } else {
                    x.clone()
                }
            }
        }
        pub fn CleanNumber(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            crate::r#_FloatCompare_Compile::_default::RecognizeZero(
                &crate::r#_FloatCompare_Compile::_default::SkipLeadingPlus(
                    &crate::r#_FloatCompare_Compile::_default::SkipLeadingSpace(x),
                ),
            )
        }
        pub fn CompareFloat(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            y: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> i8 {
            let mut x: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_FloatCompare_Compile::_default::CleanNumber(x);
            let mut y: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_FloatCompare_Compile::_default::CleanNumber(y);
            if crate::r#_FloatCompare_Compile::_default::IsNegative(&x)
                && crate::r#_FloatCompare_Compile::_default::IsNegative(&y)
            {
                crate::r#_FloatCompare_Compile::_default::CompareFloatInner(
                    &y.drop(&::dafny_runtime::int!(1)),
                    &x.drop(&::dafny_runtime::int!(1)),
                )
            } else {
                if crate::r#_FloatCompare_Compile::_default::IsNegative(&x) {
                    -1
                } else {
                    if crate::r#_FloatCompare_Compile::_default::IsNegative(&y) {
                        1
                    } else {
                        crate::r#_FloatCompare_Compile::_default::CompareFloatInner(&x, &y)
                    }
                }
            }
        }
        pub fn Less() -> i8 {
            -1
        }
        pub fn Equal() -> i8 {
            0
        }
        pub fn Greater() -> i8 {
            1
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct CompareType(pub i8);

    impl CompareType {
        pub fn is(_source: i8) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(-1) <= x.clone() && x.clone() <= ::dafny_runtime::int!(1);
        }
    }

    impl Default for CompareType {
        fn default() -> Self {
            CompareType(::std::default::Default::default())
        }
    }

    impl DafnyPrint for CompareType {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for CompareType {
        type Target = i8;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
}
pub mod ConcurrentCall {
    pub use crate::_dafny_externs::ConcurrentCall::*;

    pub trait Callee: ::std::any::Any + ::dafny_runtime::UpcastObject<dyn ::std::any::Any> {
        fn call(&mut self, serialPos: u32, concurrentPos: u32) -> ();
    }
}
pub mod r#_Base64_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::default::Default;

    pub struct _default {}

    impl _default {
        pub fn IsBase64Char(c: &::dafny_runtime::DafnyCharUTF16) -> bool {
            c.clone() == ::dafny_runtime::DafnyCharUTF16(43 as u16)
                || c.clone() == ::dafny_runtime::DafnyCharUTF16(47 as u16)
                || ::dafny_runtime::DafnyCharUTF16(48 as u16) <= c.clone()
                    && c.clone() <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                || ::dafny_runtime::DafnyCharUTF16(65 as u16) <= c.clone()
                    && c.clone() <= ::dafny_runtime::DafnyCharUTF16(90 as u16)
                || ::dafny_runtime::DafnyCharUTF16(97 as u16) <= c.clone()
                    && c.clone() <= ::dafny_runtime::DafnyCharUTF16(122 as u16)
        }
        pub fn IsUnpaddedBase64String(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            (::dafny_runtime::euclidian_modulo)(s.cardinality(), ::dafny_runtime::int!(4))
                == ::dafny_runtime::int!(0)
                && ::dafny_runtime::itertools::Itertools::unique(s.iter()).all(
                    ({
                        let mut s = s.clone();
                        ::std::rc::Rc::new(
                            move |r#__forall_var_5: ::dafny_runtime::DafnyCharUTF16| -> bool {
                                let mut k: ::dafny_runtime::DafnyCharUTF16 =
                                    r#__forall_var_5.clone();
                                !s.contains(&k)
                                    || crate::r#_Base64_Compile::_default::IsBase64Char(&k)
                            },
                        )
                    })
                    .as_ref(),
                )
        }
        pub fn IndexToChar(i: u8) -> ::dafny_runtime::DafnyCharUTF16 {
            if i == 63 {
                ::dafny_runtime::DafnyCharUTF16(47 as u16)
            } else {
                if i == 62 {
                    ::dafny_runtime::DafnyCharUTF16(43 as u16)
                } else {
                    if 52 <= i && i <= 61 {
                        ::dafny_runtime::DafnyCharUTF16((i - 4) as u16)
                    } else {
                        if 26 <= i && i <= 51 {
                            ::dafny_runtime::DafnyCharUTF16(i as u16)
                                + (::dafny_runtime::DafnyCharUTF16(
                                    <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(
                                        71
                                    ))
                                    .unwrap(),
                                ))
                        } else {
                            ::dafny_runtime::DafnyCharUTF16(i as u16)
                                + (::dafny_runtime::DafnyCharUTF16(
                                    <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(
                                        65
                                    ))
                                    .unwrap(),
                                ))
                        }
                    }
                }
            }
        }
        pub fn CharToIndex(c: &::dafny_runtime::DafnyCharUTF16) -> u8 {
            if c.clone() == ::dafny_runtime::DafnyCharUTF16(47 as u16) {
                63
            } else {
                if c.clone() == ::dafny_runtime::DafnyCharUTF16(43 as u16) {
                    62
                } else {
                    if ::dafny_runtime::DafnyCharUTF16(48 as u16) <= c.clone()
                        && c.clone() <= ::dafny_runtime::DafnyCharUTF16(57 as u16)
                    {
                        (c.clone()
                            + (::dafny_runtime::DafnyCharUTF16(
                                <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(4))
                                    .unwrap(),
                            )))
                        .0 as u8
                    } else {
                        if ::dafny_runtime::DafnyCharUTF16(97 as u16) <= c.clone()
                            && c.clone() <= ::dafny_runtime::DafnyCharUTF16(122 as u16)
                        {
                            (c.clone()
                                - (::dafny_runtime::DafnyCharUTF16(
                                    <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(
                                        71
                                    ))
                                    .unwrap(),
                                )))
                            .0 as u8
                        } else {
                            (c.clone()
                                - (::dafny_runtime::DafnyCharUTF16(
                                    <u16 as ::dafny_runtime::NumCast>::from(::dafny_runtime::int!(
                                        65
                                    ))
                                    .unwrap(),
                                )))
                            .0 as u8
                        }
                    }
                }
            }
        }
        pub fn UInt24ToSeq(x: u32) -> ::dafny_runtime::Sequence<u8> {
            let mut b0: u8 = (x / 65536) as u8;
            let mut x0: u32 = x - b0 as u32 * 65536;
            let mut b1: u8 = (x0 / 256) as u8;
            let mut b2: u8 = (x0 % 256) as u8;
            ::dafny_runtime::seq![b0, b1, b2]
        }
        pub fn SeqToUInt24(s: &::dafny_runtime::Sequence<u8>) -> u32 {
            s.get(&::dafny_runtime::int!(0)) as u32 * 65536
                + s.get(&::dafny_runtime::int!(1)) as u32 * 256
                + s.get(&::dafny_runtime::int!(2)) as u32
        }
        pub fn UInt24ToIndexSeq(x: u32) -> ::dafny_runtime::Sequence<u8> {
            let mut b0: u8 = (x / 262144) as u8;
            let mut x0: u32 = x - b0 as u32 * 262144;
            let mut b1: u8 = (x0 / 4096) as u8;
            let mut x1: u32 = x0 - b1 as u32 * 4096;
            let mut b2: u8 = (x1 / 64) as u8;
            let mut b3: u8 = (x1 % 64) as u8;
            ::dafny_runtime::seq![b0, b1, b2, b3]
        }
        pub fn IndexSeqToUInt24(s: &::dafny_runtime::Sequence<u8>) -> u32 {
            s.get(&::dafny_runtime::int!(0)) as u32 * 262144
                + s.get(&::dafny_runtime::int!(1)) as u32 * 4096
                + s.get(&::dafny_runtime::int!(2)) as u32 * 64
                + s.get(&::dafny_runtime::int!(3)) as u32
        }
        pub fn DecodeBlock(s: &::dafny_runtime::Sequence<u8>) -> ::dafny_runtime::Sequence<u8> {
            crate::r#_Base64_Compile::_default::UInt24ToSeq(
                crate::r#_Base64_Compile::_default::IndexSeqToUInt24(s),
            )
        }
        pub fn EncodeBlock(s: &::dafny_runtime::Sequence<u8>) -> ::dafny_runtime::Sequence<u8> {
            crate::r#_Base64_Compile::_default::UInt24ToIndexSeq(
                crate::r#_Base64_Compile::_default::SeqToUInt24(s),
            )
        }
        pub fn DecodeRecursively(
            s: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            let mut s = s.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if s.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>));
                } else {
                    _accumulator =
                        _accumulator.concat(&crate::r#_Base64_Compile::_default::DecodeBlock(
                            &s.take(&::dafny_runtime::int!(4)),
                        ));
                    let mut _in182: ::dafny_runtime::Sequence<u8> =
                        s.drop(&::dafny_runtime::int!(4));
                    s = _in182.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn EncodeRecursively(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
            let mut b = b.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if b.cardinality() == ::dafny_runtime::int!(0) {
                    return _accumulator
                        .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>));
                } else {
                    _accumulator =
                        _accumulator.concat(&crate::r#_Base64_Compile::_default::EncodeBlock(
                            &b.take(&::dafny_runtime::int!(3)),
                        ));
                    let mut _in183: ::dafny_runtime::Sequence<u8> =
                        b.drop(&::dafny_runtime::int!(3));
                    b = _in183.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn FromCharsToIndices(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            {
                let _initializer = {
                    let s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = s.clone();
                    {
                        let mut s = s.clone();
                        ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> u8 {
                            crate::r#_Base64_Compile::_default::CharToIndex(&s.get(i))
                        })
                    }
                };
                ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), s.cardinality())
                    .map(|i| _initializer(&i))
                    .collect::<::dafny_runtime::Sequence<_>>()
            }
        }
        pub fn FromIndicesToChars(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            {
                let _initializer = {
                    let b: ::dafny_runtime::Sequence<u8> = b.clone();
                    {
                        let mut b = b.clone();
                        ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                          crate::r#_Base64_Compile::_default::IndexToChar(b.get(i))
                        })
                    }
                };
                ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), b.cardinality())
                    .map(|i| _initializer(&i))
                    .collect::<::dafny_runtime::Sequence<_>>()
            }
        }
        pub fn DecodeUnpadded(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            crate::r#_Base64_Compile::_default::DecodeRecursively(
                &crate::r#_Base64_Compile::_default::FromCharsToIndices(s),
            )
        }
        pub fn EncodeUnpadded(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            crate::r#_Base64_Compile::_default::FromIndicesToChars(
                &crate::r#_Base64_Compile::_default::EncodeRecursively(b),
            )
        }
        pub fn Is1Padding(s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            s.cardinality() == ::dafny_runtime::int!(4)
                && crate::r#_Base64_Compile::_default::IsBase64Char(
                    &s.get(&::dafny_runtime::int!(0)),
                )
                && crate::r#_Base64_Compile::_default::IsBase64Char(
                    &s.get(&::dafny_runtime::int!(1)),
                )
                && crate::r#_Base64_Compile::_default::IsBase64Char(
                    &s.get(&::dafny_runtime::int!(2)),
                )
                && crate::r#_Base64_Compile::_default::CharToIndex(
                    &s.get(&::dafny_runtime::int!(2)),
                ) % 4
                    == 0
                && s.get(&::dafny_runtime::int!(3)) == ::dafny_runtime::DafnyCharUTF16(61 as u16)
        }
        pub fn Decode1Padding(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut d: ::dafny_runtime::Sequence<u8> =
                crate::r#_Base64_Compile::_default::DecodeBlock(&::dafny_runtime::seq![
                    crate::r#_Base64_Compile::_default::CharToIndex(
                        &s.get(&::dafny_runtime::int!(0))
                    ),
                    crate::r#_Base64_Compile::_default::CharToIndex(
                        &s.get(&::dafny_runtime::int!(1))
                    ),
                    crate::r#_Base64_Compile::_default::CharToIndex(
                        &s.get(&::dafny_runtime::int!(2))
                    ),
                    0
                ]);
            ::dafny_runtime::seq![
                d.get(&::dafny_runtime::int!(0)),
                d.get(&::dafny_runtime::int!(1))
            ]
        }
        pub fn Encode1Padding(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut e: ::dafny_runtime::Sequence<u8> =
                crate::r#_Base64_Compile::_default::EncodeBlock(&::dafny_runtime::seq![
                    b.get(&::dafny_runtime::int!(0)),
                    b.get(&::dafny_runtime::int!(1)),
                    0
                ]);
            ::dafny_runtime::seq![
                crate::r#_Base64_Compile::_default::IndexToChar(e.get(&::dafny_runtime::int!(0))),
                crate::r#_Base64_Compile::_default::IndexToChar(e.get(&::dafny_runtime::int!(1))),
                crate::r#_Base64_Compile::_default::IndexToChar(e.get(&::dafny_runtime::int!(2))),
                ::dafny_runtime::DafnyCharUTF16(61 as u16)
            ]
        }
        pub fn Is2Padding(s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> bool {
            s.cardinality() == ::dafny_runtime::int!(4)
                && crate::r#_Base64_Compile::_default::IsBase64Char(
                    &s.get(&::dafny_runtime::int!(0)),
                )
                && crate::r#_Base64_Compile::_default::IsBase64Char(
                    &s.get(&::dafny_runtime::int!(1)),
                )
                && crate::r#_Base64_Compile::_default::CharToIndex(
                    &s.get(&::dafny_runtime::int!(1)),
                ) % 16
                    == 0
                && s.get(&::dafny_runtime::int!(2)) == ::dafny_runtime::DafnyCharUTF16(61 as u16)
                && s.get(&::dafny_runtime::int!(3)) == ::dafny_runtime::DafnyCharUTF16(61 as u16)
        }
        pub fn Decode2Padding(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            let mut d: ::dafny_runtime::Sequence<u8> =
                crate::r#_Base64_Compile::_default::DecodeBlock(&::dafny_runtime::seq![
                    crate::r#_Base64_Compile::_default::CharToIndex(
                        &s.get(&::dafny_runtime::int!(0))
                    ),
                    crate::r#_Base64_Compile::_default::CharToIndex(
                        &s.get(&::dafny_runtime::int!(1))
                    ),
                    0,
                    0
                ]);
            ::dafny_runtime::seq![d.get(&::dafny_runtime::int!(0))]
        }
        pub fn Encode2Padding(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            let mut e: ::dafny_runtime::Sequence<u8> =
                crate::r#_Base64_Compile::_default::EncodeBlock(&::dafny_runtime::seq![
                    b.get(&::dafny_runtime::int!(0)),
                    0,
                    0
                ]);
            ::dafny_runtime::seq![
                crate::r#_Base64_Compile::_default::IndexToChar(e.get(&::dafny_runtime::int!(0))),
                crate::r#_Base64_Compile::_default::IndexToChar(e.get(&::dafny_runtime::int!(1))),
                ::dafny_runtime::DafnyCharUTF16(61 as u16),
                ::dafny_runtime::DafnyCharUTF16(61 as u16)
            ]
        }
        pub fn IsBase64String(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            let mut finalBlockStart: ::dafny_runtime::DafnyInt =
                s.cardinality() - ::dafny_runtime::int!(4);
            (::dafny_runtime::euclidian_modulo)(s.cardinality(), ::dafny_runtime::int!(4))
                == ::dafny_runtime::int!(0)
                && (crate::r#_Base64_Compile::_default::IsUnpaddedBase64String(s)
                    || crate::r#_Base64_Compile::_default::IsUnpaddedBase64String(
                        &s.take(&finalBlockStart),
                    ) && (crate::r#_Base64_Compile::_default::Is1Padding(
                        &s.drop(&finalBlockStart),
                    ) || crate::r#_Base64_Compile::_default::Is2Padding(
                        &s.drop(&finalBlockStart),
                    )))
        }
        pub fn DecodeValid(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::dafny_runtime::Sequence<u8> {
            if s.clone().to_array().len() == 0 {
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
            } else {
                let mut finalBlockStart: ::dafny_runtime::DafnyInt =
                    s.cardinality() - ::dafny_runtime::int!(4);
                let mut prefix: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    s.take(&finalBlockStart);
                let mut suffix: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    s.drop(&finalBlockStart);
                if crate::r#_Base64_Compile::_default::Is1Padding(&suffix) {
                    crate::r#_Base64_Compile::_default::DecodeUnpadded(&prefix)
                        .concat(&crate::r#_Base64_Compile::_default::Decode1Padding(&suffix))
                } else {
                    if crate::r#_Base64_Compile::_default::Is2Padding(&suffix) {
                        crate::r#_Base64_Compile::_default::DecodeUnpadded(&prefix)
                            .concat(&crate::r#_Base64_Compile::_default::Decode2Padding(&suffix))
                    } else {
                        crate::r#_Base64_Compile::_default::DecodeUnpadded(s)
                    }
                }
            }
        }
        pub fn Decode(
            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> ::std::rc::Rc<
            crate::r#_Wrappers_Compile::Result<
                ::dafny_runtime::Sequence<u8>,
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >,
        > {
            if crate::r#_Base64_Compile::_default::IsBase64String(s) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Success {
                    value: crate::r#_Base64_Compile::_default::DecodeValid(s),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >::Failure {
                    error: ::dafny_runtime::string_utf16_of("The encoding is malformed"),
                })
            }
        }
        pub fn Encode(
            b: &::dafny_runtime::Sequence<u8>,
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            if (::dafny_runtime::euclidian_modulo)(b.cardinality(), ::dafny_runtime::int!(3))
                == ::dafny_runtime::int!(0)
            {
                let mut s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_Base64_Compile::_default::EncodeUnpadded(b);
                s.clone()
            } else {
                if (::dafny_runtime::euclidian_modulo)(b.cardinality(), ::dafny_runtime::int!(3))
                    == ::dafny_runtime::int!(1)
                {
                    let mut s1: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_Base64_Compile::_default::EncodeUnpadded(
                            &b.take(&(b.cardinality() - ::dafny_runtime::int!(1))),
                        );
                    let mut s2: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_Base64_Compile::_default::Encode2Padding(
                            &b.drop(&(b.cardinality() - ::dafny_runtime::int!(1))),
                        );
                    let mut s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        s1.concat(&s2);
                    s.clone()
                } else {
                    let mut s1: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_Base64_Compile::_default::EncodeUnpadded(
                            &b.take(&(b.cardinality() - ::dafny_runtime::int!(2))),
                        );
                    let mut s2: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_Base64_Compile::_default::Encode1Padding(
                            &b.drop(&(b.cardinality() - ::dafny_runtime::int!(2))),
                        );
                    let mut s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        s1.concat(&s2);
                    s.clone()
                }
            }
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct index(pub u8);

    impl index {
        pub fn is(_source: u8) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone() && x.clone() < ::dafny_runtime::int!(64);
        }
    }

    impl Default for index {
        fn default() -> Self {
            index(::std::default::Default::default())
        }
    }

    impl DafnyPrint for index {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for index {
        type Target = u8;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    #[derive(Clone, PartialEq)]
    #[repr(transparent)]
    pub struct uint24(pub u32);

    impl uint24 {
        pub fn is(_source: u32) -> bool {
            let mut x: ::dafny_runtime::DafnyInt =
                ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(_source.clone());
            return ::dafny_runtime::int!(0) <= x.clone()
                && x.clone() < ::dafny_runtime::int!(b"16777216");
        }
    }

    impl Default for uint24 {
        fn default() -> Self {
            uint24(::std::default::Default::default())
        }
    }

    impl DafnyPrint for uint24 {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            in_seq: bool,
        ) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
        }
    }

    impl ::std::ops::Deref for uint24 {
        type Target = u32;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
}
pub mod r#_Base64Lemmas_Compile {}
pub mod r#_Actions_Compile {
    pub use ::dafny_runtime::DafnyPrint;
    pub use ::std::cmp::Eq;
    pub use ::std::convert::AsRef;
    pub use ::std::default::Default;
    pub use ::std::fmt::Debug;
    pub use ::std::hash::Hash;

    pub struct _default {}

    impl _default {
        pub fn DeterministicMap<_A: ::dafny_runtime::DafnyType, _R: ::dafny_runtime::DafnyType>(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicAction<_A, _R>,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::dafny_runtime::Sequence<_R> {
            let mut res = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_R>>::new();
            let mut rs: ::dafny_runtime::Sequence<_R> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>;
            let mut _hi0: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi0.clone()) {
                let mut r = ::dafny_runtime::MaybePlacebo::<_R>::new();
                let mut _out16 = ::dafny_runtime::MaybePlacebo::<_R>::new();
                _out16 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_Actions_Compile::DeterministicAction::<_A, _R>::Invoke(
                        ::dafny_runtime::md!(action.clone()),
                        &s.get(&i),
                    ),
                );
                r = ::dafny_runtime::MaybePlacebo::from(_out16.read());
                rs = rs.concat(&::dafny_runtime::seq![r.read()]);
            }
            res = ::dafny_runtime::MaybePlacebo::from(rs.clone());
            return res.read();
        }
        pub fn DeterministicMapWithResult<
            _A: ::dafny_runtime::DafnyType,
            _R: ::dafny_runtime::DafnyType,
            _E: ::dafny_runtime::DafnyType,
        >(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicActionWithResult<_A, _R, _E>,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>>
        {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                >,
            >::new();
            let mut rs: ::dafny_runtime::Sequence<_R> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>;
            let mut _hi1: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi1.clone()) {
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_R, _E>>,
                >::new();
                let mut _out17 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_R, _E>>,
                >::new();
                _out17 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_Actions_Compile::DeterministicAction::<
                        _A,
                        ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_R, _E>>,
                    >::Invoke(::dafny_runtime::md!(action.clone()), &s.get(&i)),
                );
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out17.read());
                if valueOrError0.read().IsFailure() {
                    res = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Sequence<_R>>(),
                    );
                    return res.read();
                };
                let mut r: _R = valueOrError0.read().Extract();
                rs = rs.concat(&::dafny_runtime::seq![r.clone()]);
            }
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<_R>, _E>::Success {
                    value: rs.clone(),
                },
            ));
            return res.read();
        }
        pub fn DeterministicFlatMap<
            _A: ::dafny_runtime::DafnyType,
            _R: ::dafny_runtime::DafnyType,
        >(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicAction<
                    _A,
                    ::dafny_runtime::Sequence<_R>,
                >,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::dafny_runtime::Sequence<_R> {
            let mut res = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_R>>::new();
            let mut rs: ::dafny_runtime::Sequence<_R> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>;
            let mut _hi2: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi2.clone()) {
                let mut r = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_R>>::new();
                let mut _out18 =
                    ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_R>>::new();
                _out18 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_Actions_Compile::DeterministicAction::<
                        _A,
                        ::dafny_runtime::Sequence<_R>,
                    >::Invoke(::dafny_runtime::md!(action.clone()), &s.get(&i)),
                );
                r = ::dafny_runtime::MaybePlacebo::from(_out18.read());
                rs = rs.concat(&r.read());
            }
            res = ::dafny_runtime::MaybePlacebo::from(rs.clone());
            return res.read();
        }
        pub fn DeterministicFlatMapWithResult<
            _A: ::dafny_runtime::DafnyType,
            _R: ::dafny_runtime::DafnyType,
            _E: ::dafny_runtime::DafnyType,
        >(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicActionWithResult<
                    _A,
                    ::dafny_runtime::Sequence<_R>,
                    _E,
                >,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>>
        {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                >,
            >::new();
            let mut rs: ::dafny_runtime::Sequence<_R> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_R>;
            let mut _hi3: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi3.clone()) {
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                    >,
                >::new();
                let mut _out19 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                    >,
                >::new();
                _out19 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_Actions_Compile::DeterministicAction::<
                        _A,
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
                        >,
                    >::Invoke(::dafny_runtime::md!(action.clone()), &s.get(&i)),
                );
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out19.read());
                if valueOrError0.read().IsFailure() {
                    res = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Sequence<_R>>(),
                    );
                    return res.read();
                };
                let mut r: ::dafny_runtime::Sequence<_R> = valueOrError0.read().Extract();
                rs = rs.concat(&r);
            }
            let mut _rhs4: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_R>, _E>,
            > = ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                ::dafny_runtime::Sequence<_R>,
                _E,
            >::Success {
                value: rs.clone(),
            });
            res = ::dafny_runtime::MaybePlacebo::from(_rhs4.clone());
            return res.read();
        }
        pub fn Filter<_A: ::dafny_runtime::DafnyType>(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicAction<_A, bool>,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::dafny_runtime::Sequence<_A> {
            let mut res = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Sequence<_A>>::new();
            let mut rs: ::dafny_runtime::Sequence<_A> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_A>;
            let mut _hi4: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi4.clone()) {
                let mut r: bool = <bool as std::default::Default>::default();
                let mut _out20: bool = <bool as std::default::Default>::default();
                _out20 = crate::r#_Actions_Compile::DeterministicAction::<_A, bool>::Invoke(
                    ::dafny_runtime::md!(action.clone()),
                    &s.get(&i),
                );
                r = _out20;
                if r {
                    rs = rs.concat(&::dafny_runtime::seq![s.get(&i)]);
                }
            }
            res = ::dafny_runtime::MaybePlacebo::from(rs.clone());
            return res.read();
        }
        pub fn FilterWithResult<_A: ::dafny_runtime::DafnyType, _E: ::dafny_runtime::DafnyType>(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::DeterministicActionWithResult<_A, bool, _E>,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_A>, _E>>
        {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<_A>, _E>,
                >,
            >::new();
            let mut rs: ::dafny_runtime::Sequence<_A> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<_A>;
            let mut _hi5: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi5.clone()) {
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<bool, _E>>,
                >::new();
                let mut _out21 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<bool, _E>>,
                >::new();
                _out21 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_Actions_Compile::DeterministicAction::<
                        _A,
                        ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<bool, _E>>,
                    >::Invoke(::dafny_runtime::md!(action.clone()), &s.get(&i)),
                );
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out21.read());
                if valueOrError0.read().IsFailure() {
                    res = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Sequence<_A>>(),
                    );
                    return res.read();
                };
                let mut r: bool = valueOrError0.read().Extract();
                if r {
                    rs = rs.concat(&::dafny_runtime::seq![s.get(&i)]);
                }
            }
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<_A>, _E>::Success {
                    value: rs.clone(),
                },
            ));
            return res.read();
        }
        pub fn ReduceToSuccess<
            _A: ::dafny_runtime::DafnyType,
            _B: ::dafny_runtime::DafnyType,
            _E: ::dafny_runtime::DafnyType,
        >(
            action: &::dafny_runtime::Object<
                dyn crate::r#_Actions_Compile::ActionWithResult<_A, _B, _E>,
            >,
            s: &::dafny_runtime::Sequence<_A>,
        ) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, ::dafny_runtime::Sequence<_E>>>
        {
            let mut res = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<_B, ::dafny_runtime::Sequence<_E>>,
                >,
            >::new();
            let mut attemptedResults: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
                >;
            let mut _hi6: ::dafny_runtime::DafnyInt = s.cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi6.clone()) {
                let mut attempt = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
                >::new();
                let mut _out22 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
                >::new();
                _out22 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Actions_Compile::Action::<
                    _A,
                    ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
                >::Invoke(
                    ::dafny_runtime::md!(action.clone()),
                    &s.get(&i),
                ));
                attempt = ::dafny_runtime::MaybePlacebo::from(_out22.read());
                attemptedResults = attemptedResults.concat(&::dafny_runtime::seq![attempt.read()]);
                if matches!(
                    (&attempt.read()).as_ref(),
                    crate::r#_Wrappers_Compile::Result::Success { .. }
                ) {
                    let mut _rhs5: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<_B, ::dafny_runtime::Sequence<_E>>,
                    > = ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        _B,
                        ::dafny_runtime::Sequence<_E>,
                    >::Success {
                        value: attempt.read().value().clone(),
                    });
                    res = ::dafny_runtime::MaybePlacebo::from(_rhs5.clone());
                    return res.read();
                }
            }
            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                crate::r#_Wrappers_Compile::Result::<_B, ::dafny_runtime::Sequence<_E>>::Failure {
                    error: crate::r#_Seq_Compile::_default::Map::<
                        ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
                        _E,
                    >(
                        &(::std::rc::Rc::new(
                            |x0: &::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>| {
                                crate::r#_Actions_Compile::_default::pluckErrors(x0)
                            },
                        ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>),
                        &attemptedResults,
                    ),
                },
            ));
            return res.read();
        }
        pub fn pluckErrors<_B: ::dafny_runtime::DafnyType, _E: ::dafny_runtime::DafnyType>(
            r: &::std::rc::Rc<crate::r#_Wrappers_Compile::Result<_B, _E>>,
        ) -> _E {
            r.error().clone()
        }
    }

    #[derive(PartialEq, Clone)]
    pub enum ActionInvoke<A: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> {
        ActionInvoke { input: A, output: R },
    }

    impl<A: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> ActionInvoke<A, R> {
        pub fn input(&self) -> &A {
            match self {
                ActionInvoke::ActionInvoke { input, output } => input,
            }
        }
        pub fn output(&self) -> &R {
            match self {
                ActionInvoke::ActionInvoke { input, output } => output,
            }
        }
    }

    impl<A: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Debug for ActionInvoke<A, R> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
        }
    }

    impl<A: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> DafnyPrint
        for ActionInvoke<A, R>
    {
        fn fmt_print(
            &self,
            _formatter: &mut ::std::fmt::Formatter,
            _in_seq: bool,
        ) -> std::fmt::Result {
            match self {
                ActionInvoke::ActionInvoke { input, output } => {
                    write!(_formatter, "Actions_Compile.ActionInvoke.ActionInvoke(")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(input, _formatter, false)?;
                    write!(_formatter, ", ")?;
                    ::dafny_runtime::DafnyPrint::fmt_print(output, _formatter, false)?;
                    write!(_formatter, ")")?;
                    Ok(())
                }
            }
        }
    }

    impl<A: ::dafny_runtime::DafnyType + Eq, R: ::dafny_runtime::DafnyType + Eq> Eq
        for ActionInvoke<A, R>
    {
    }

    impl<A: ::dafny_runtime::DafnyType + Hash, R: ::dafny_runtime::DafnyType + Hash> Hash
        for ActionInvoke<A, R>
    {
        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
            match self {
                ActionInvoke::ActionInvoke { input, output } => {
                    ::std::hash::Hash::hash(input, _state);
                    ::std::hash::Hash::hash(output, _state)
                }
            }
        }
    }

    impl<A: ::dafny_runtime::DafnyType + Default, R: ::dafny_runtime::DafnyType + Default> Default
        for ActionInvoke<A, R>
    {
        fn default() -> ActionInvoke<A, R> {
            ActionInvoke::ActionInvoke {
                input: ::std::default::Default::default(),
                output: ::std::default::Default::default(),
            }
        }
    }

    impl<A: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> AsRef<ActionInvoke<A, R>>
        for &ActionInvoke<A, R>
    {
        fn as_ref(&self) -> Self {
            self
        }
    }

    pub trait Action<A, R>:
        ::std::any::Any + ::dafny_runtime::UpcastObject<dyn ::std::any::Any>
    where
        A: ::dafny_runtime::DafnyType,
        R: ::dafny_runtime::DafnyType,
    {
        fn Invoke(&mut self, a: &A) -> R;
    }

    pub trait ActionWithResult<A, R, E>:
        ::std::any::Any
        + ::dafny_runtime::UpcastObject<dyn ::std::any::Any>
        + crate::r#_Actions_Compile::Action<
            A,
            ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<R, E>>,
        > + ::dafny_runtime::UpcastObject<
            dyn crate::r#_Actions_Compile::Action<
                A,
                ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<R, E>>,
            >,
        >
    where
        A: ::dafny_runtime::DafnyType,
        R: ::dafny_runtime::DafnyType,
        E: ::dafny_runtime::DafnyType,
    {
    }

    pub trait DeterministicAction<A, R>:
        ::std::any::Any + ::dafny_runtime::UpcastObject<dyn ::std::any::Any>
    where
        A: ::dafny_runtime::DafnyType,
        R: ::dafny_runtime::DafnyType,
    {
        fn Invoke(&mut self, a: &A) -> R;
    }

    pub trait DeterministicActionWithResult<A, R, E>:
        ::std::any::Any
        + ::dafny_runtime::UpcastObject<dyn ::std::any::Any>
        + crate::r#_Actions_Compile::DeterministicAction<
            A,
            ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<R, E>>,
        > + ::dafny_runtime::UpcastObject<
            dyn crate::r#_Actions_Compile::DeterministicAction<
                A,
                ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<R, E>>,
            >,
        >
    where
        A: ::dafny_runtime::DafnyType,
        R: ::dafny_runtime::DafnyType,
        E: ::dafny_runtime::DafnyType,
    {
    }
}
pub mod DafnyLibraries {
    pub use crate::_dafny_externs::DafnyLibraries::*;
    pub use ::dafny_runtime::UpcastObject;
    pub use ::std::any::Any;

    pub trait MutableMapTrait<K, V>:
        ::std::any::Any + ::dafny_runtime::UpcastObject<dyn ::std::any::Any>
    where
        K: ::dafny_runtime::DafnyTypeEq,
        V: ::dafny_runtime::DafnyTypeEq,
    {
        fn content(&self) -> ::dafny_runtime::Map<K, V>;
        fn Put(&mut self, k: &K, v: &V) -> ();
        fn Keys(&self) -> ::dafny_runtime::Set<K>;
        fn HasKey(&self, k: &K) -> bool;
        fn Values(&self) -> ::dafny_runtime::Set<V>;
        fn Items(&self) -> ::dafny_runtime::Set<(K, V)>;
        fn Select(&self, k: &K) -> V;
        fn Remove(&mut self, k: &K) -> ();
        fn Size(&self) -> ::dafny_runtime::DafnyInt;
    }

    impl<K: ::dafny_runtime::DafnyTypeEq, V: ::dafny_runtime::DafnyTypeEq> MutableMap<K, V> {
        pub fn SelectOpt(&self, k: &K) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Option<V>> {
            if crate::DafnyLibraries::MutableMapTrait::<K, V>::HasKey(
                ::dafny_runtime::rd!(::dafny_runtime::Object::<_>::from_ref(self)),
                k,
            ) {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<V>::Some {
                    value: crate::DafnyLibraries::MutableMapTrait::<K, V>::Select(
                        ::dafny_runtime::rd!(::dafny_runtime::Object::<_>::from_ref(self)),
                        k,
                    ),
                })
            } else {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<V>::None {})
            }
        }
    }

    impl<K: ::dafny_runtime::DafnyTypeEq, V: ::dafny_runtime::DafnyTypeEq> UpcastObject<dyn Any>
        for MutableMap<K, V>
    {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }
}
pub mod r#_JSON_Compile {
    pub mod r#_Utils_Compile {
        pub mod r#_Views_Compile {
            pub mod r#_Core_Compile {
                pub use ::dafny_runtime::DafnyPrint;
                pub use ::std::cmp::Eq;
                pub use ::std::convert::AsRef;
                pub use ::std::default::Default;
                pub use ::std::fmt::Debug;
                pub use ::std::hash::Hash;

                pub struct _default {}

                impl _default {
                    pub fn Adjacent(
                        lv: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View,
                        rv: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View,
                    ) -> bool {
                        lv.end().clone() == rv.beg().clone() && lv.s().clone() == rv.s().clone()
                    }
                    pub fn Merge(lv: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, rv: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View{
                        let mut r#_dt__update__tmp_h0: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = lv.clone();
                        let mut r#_dt__update_hend_h0: u32 = rv.end().clone();
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::View {
                s: r#_dt__update__tmp_h0.s().clone(),
                beg: r#_dt__update__tmp_h0.beg().clone(),
                end: r#_dt__update_hend_h0
              })
                    }
                }

                pub type View = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_View() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::View {
              s: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
              beg: 0,
              end: 0
            })
                }

                #[derive(PartialEq, Clone)]
                pub enum View_ {
                    View {
                        s: ::dafny_runtime::Sequence<u8>,
                        beg: u32,
                        end: u32,
                    },
                }

                impl View_ {
                    pub fn Length(self: &::std::rc::Rc<Self>) -> u32 {
                        self.end().clone() - self.beg().clone()
                    }
                    pub fn Bytes(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::Sequence<u8> {
                        self.s().slice(
                            &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                self.beg().clone(),
                            ),
                            &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                self.end().clone(),
                            ),
                        )
                    }
                    pub fn OfBytes(bs: &::dafny_runtime::Sequence<u8>) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View{
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::View {
                s: bs.clone(),
                beg: 0,
                end: ::dafny_runtime::truncate!(bs.cardinality(), u32)
              })
                    }
                    pub fn OfString(
                        s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ) -> ::dafny_runtime::Sequence<u8> {
                        {
                            let _initializer = {
                                let s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                                    s.clone();
                                {
                                    let mut s = s.clone();
                                    ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> u8 {
                                        s.get(i).0 as u8
                                    })
                                }
                            };
                            ::dafny_runtime::integer_range(
                                ::dafny_runtime::Zero::zero(),
                                s.cardinality(),
                            )
                            .map(|i| _initializer(&i))
                            .collect::<::dafny_runtime::Sequence<_>>()
                        }
                    }
                    pub fn r#_Byte_q(self: &::std::rc::Rc<Self>, c: u8) -> bool {
                        let mut _hresult: bool = <bool as std::default::Default>::default();
                        _hresult = self.Length() == 1 && self.At(0) == c;
                        return _hresult;
                    }
                    pub fn r#_Char_q(
                        self: &::std::rc::Rc<Self>,
                        c: &::dafny_runtime::DafnyCharUTF16,
                    ) -> bool {
                        self.r#_Byte_q(c.clone().0 as u8)
                    }
                    pub fn At(self: &::std::rc::Rc<Self>, idx: u32) -> u8 {
                        self.s()
                            .get(&::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                self.beg().clone() + idx,
                            ))
                    }
                    pub fn Peek(self: &::std::rc::Rc<Self>) -> i16 {
                        if self.r#_Empty_q().clone() {
                            -1
                        } else {
                            self.At(0) as i16
                        }
                    }
                    pub fn CopyTo(
                        self: &::std::rc::Rc<Self>,
                        dest: &::dafny_runtime::Object<[u8]>,
                        start: u32,
                    ) -> () {
                        let mut _hi7: u32 = self.Length();
                        for idx in ::dafny_runtime::integer_range(0, _hi7)
                            .map(::std::convert::Into::<u32>::into)
                        {
                            {
                                let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(start + idx);
                                ::dafny_runtime::md!(dest)[__idx0] = self.s().get(
                                    &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                        self.beg().clone() + idx,
                                    ),
                                );
                            }
                        }
                        return ();
                    }
                    pub fn Empty() -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View{
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::View {
                s: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
                beg: 0,
                end: 0
              })
                    }
                    pub fn r#_Empty_q(self: &::std::rc::Rc<Self>) -> bool {
                        self.beg().clone() == self.end().clone()
                    }
                    pub fn s(&self) -> &::dafny_runtime::Sequence<u8> {
                        match self {
                            View_::View { s, beg, end } => s,
                        }
                    }
                    pub fn beg(&self) -> &u32 {
                        match self {
                            View_::View { s, beg, end } => beg,
                        }
                    }
                    pub fn end(&self) -> &u32 {
                        match self {
                            View_::View { s, beg, end } => end,
                        }
                    }
                }

                impl Debug for View_ {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl DafnyPrint for View_ {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            View_::View { s, beg, end } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Views_Compile.Core_Compile.View__.View(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(s, _formatter, false)?;
                                write!(_formatter, ", ")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(beg, _formatter, false)?;
                                write!(_formatter, ", ")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(end, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl Eq for View_ {}

                impl Hash for View_ {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            View_::View { s, beg, end } => {
                                ::std::hash::Hash::hash(s, _state);
                                ::std::hash::Hash::hash(beg, _state);
                                ::std::hash::Hash::hash(end, _state)
                            }
                        }
                    }
                }

                impl Default for View_ {
                    fn default() -> View_ {
                        View_::View {
                            s: ::std::default::Default::default(),
                            beg: ::std::default::Default::default(),
                            end: ::std::default::Default::default(),
                        }
                    }
                }

                impl AsRef<View_> for &View_ {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }
            }

            pub mod r#_Writers_Compile {
                pub use ::dafny_runtime::DafnyPrint;
                pub use ::std::cmp::Eq;
                pub use ::std::convert::AsRef;
                pub use ::std::default::Default;
                pub use ::std::fmt::Debug;
                pub use ::std::hash::Hash;

                #[derive(PartialEq, Clone)]
                pub enum Chain {
                    Empty {},
          Chain {
            previous: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain>,
            v: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
          }
        }

                impl Chain {
                    pub fn Length(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::_System::nat {
                        let mut _accumulator: ::dafny_runtime::_System::nat =
                            ::dafny_runtime::int!(0);
                        let mut _this = self.clone();
                        let mut _accumulator = _accumulator.clone();
                        'TAIL_CALL_START: loop {
                            if matches!((&_this).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty{ .. }) {
                return ::dafny_runtime::int!(0) + _accumulator.clone();
              } else {
                _accumulator = ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(_this.v())) + _accumulator.clone();
                let mut _in184: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain> = _this.previous().clone();
                _this = _in184.clone();
                continue 'TAIL_CALL_START;
              }
                        }
                    }
                    pub fn Count(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::_System::nat {
                        let mut _accumulator: ::dafny_runtime::_System::nat =
                            ::dafny_runtime::int!(0);
                        let mut _this = self.clone();
                        let mut _accumulator = _accumulator.clone();
                        'TAIL_CALL_START: loop {
                            if matches!((&_this).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty{ .. }) {
                return ::dafny_runtime::int!(0) + _accumulator.clone();
              } else {
                _accumulator = ::dafny_runtime::int!(1) + _accumulator.clone();
                let mut _in185: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain> = _this.previous().clone();
                _this = _in185.clone();
                continue 'TAIL_CALL_START;
              }
                        }
                    }
                    pub fn Bytes(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::Sequence<u8> {
                        let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                            ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
                        let mut _this = self.clone();
                        let mut _accumulator = _accumulator.clone();
                        'TAIL_CALL_START: loop {
                            if matches!((&_this).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty{ .. }) {
                return (::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>).concat(&_accumulator);
              } else {
                _accumulator = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Bytes(_this.v()).concat(&_accumulator);
                let mut _in186: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain> = _this.previous().clone();
                _this = _in186.clone();
                continue 'TAIL_CALL_START;
              }
                        }
                    }
                    pub fn Append(self: &::std::rc::Rc<Self>, r#_v_k: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain>{
                        if matches!(self.as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Chain{ .. }) && crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::_default::Adjacent(self.v(), r#_v_k) {
              ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Chain {
                  previous: self.previous().clone(),
                  v: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::_default::Merge(self.v(), r#_v_k)
                })
            } else {
              ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Chain {
                  previous: self.clone(),
                  v: r#_v_k.clone()
                })
            }
                    }
                    pub fn CopyTo(
                        self: &::std::rc::Rc<Self>,
                        dest: &::dafny_runtime::Object<[u8]>,
                        end: u32,
                    ) -> () {
                        let mut _this = self.clone();
                        let mut dest = dest.clone();
                        let mut end = end;
                        'TAIL_CALL_START: loop {
                            if matches!((&_this).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Chain{ .. }) {
                let mut end: u32 = end - crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(_this.v());
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::CopyTo(&mut _this.v(), &dest, end);
                let mut _in187: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain> = _this.previous().clone();
                let mut _in188: ::dafny_runtime::Object<[u8]> = dest.clone();
                let mut _in189: u32 = end;
                _this = _in187.clone();
                dest = _in188.clone();
                end = _in189;
                continue 'TAIL_CALL_START;
              };
                            return ();
                        }
                    }
                    pub fn previous(&self) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain>{
                        match self {
                            Chain::Empty {} => panic!("field does not exist on this variant"),
                            Chain::Chain { previous, v } => previous,
                        }
                    }
                    pub fn v(&self) -> &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View{
                        match self {
                            Chain::Empty {} => panic!("field does not exist on this variant"),
                            Chain::Chain { previous, v } => v,
                        }
                    }
                }

                impl Debug for Chain {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl DafnyPrint for Chain {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            Chain::Empty {} => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Views_Compile.Writers_Compile.Chain.Empty")?;
                                Ok(())
                            }
                            Chain::Chain { previous, v } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Views_Compile.Writers_Compile.Chain.Chain(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(
                                    previous, _formatter, false,
                                )?;
                                write!(_formatter, ", ")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(v, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl Eq for Chain {}

                impl Hash for Chain {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            Chain::Empty {} => {}
                            Chain::Chain { previous, v } => {
                                ::std::hash::Hash::hash(previous, _state);
                                ::std::hash::Hash::hash(v, _state)
                            }
                        }
                    }
                }

                impl Default for Chain {
                    fn default() -> Chain {
                        Chain::Empty {}
                    }
                }

                impl AsRef<Chain> for &Chain {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }

                pub type Writer = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_>;

                pub fn r#__init_Writer() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_>{
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
              length: 0,
              chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
            })
                }

                #[derive(PartialEq, Clone)]
                pub enum Writer_ {
                    Writer {
            length: u32,
            chain: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain>
          }
        }

                impl Writer_ {
                    pub fn Bytes(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::Sequence<u8> {
                        self.chain().Bytes()
                    }
                    pub fn SaturatedAddU32(a: u32, b: u32) -> u32 {
                        if a <= (crate::r#_BoundedInts_Compile::_default::UINT32_MAX() - b) {
                            a + b
                        } else {
                            crate::r#_BoundedInts_Compile::_default::UINT32_MAX()
                        }
                    }
                    pub fn Append(self: &::std::rc::Rc<Self>, r#_v_k: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::SaturatedAddU32(self.length().clone(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(r#_v_k)),
                chain: self.chain().Append(r#_v_k)
              })
                    }
                    pub fn Then(self: &::std::rc::Rc<Self>, r#fn: &::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer>) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                        r#fn(self)
                    }
                    pub fn CopyTo(
                        self: &::std::rc::Rc<Self>,
                        dest: &::dafny_runtime::Object<[u8]>,
                    ) -> () {
                        self.chain().CopyTo(dest, self.length().clone());
                        return ();
                    }
                    pub fn ToArray(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::Object<[u8]> {
                        let mut bs =
                            ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[u8]>>::new();
                        let mut _nw4: ::dafny_runtime::Object<[::std::mem::MaybeUninit<u8>]> =
                            ::dafny_runtime::array::placebos_usize_object::<u8>(
                                ::dafny_runtime::DafnyUsize::into_usize(self.length().clone()),
                            );
                        bs = ::dafny_runtime::MaybePlacebo::from(
                            ::dafny_runtime::array::construct_object(_nw4.clone()),
                        );
                        self.CopyTo(&bs.read());
                        return bs.read();
                    }
                    pub fn Empty() -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: 0,
                chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
              })
                    }
                    pub fn r#_Unsaturated_q(self: &::std::rc::Rc<Self>) -> bool {
                        self.length().clone()
                            != crate::r#_BoundedInts_Compile::_default::UINT32_MAX()
                    }
                    pub fn r#_Empty_q(self: &::std::rc::Rc<Self>) -> bool {
                        matches!(self.chain().as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty{ .. })
                    }
                    pub fn length(&self) -> &u32 {
                        match self {
                            Writer_::Writer { length, chain } => length,
                        }
                    }
                    pub fn chain(&self) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain>{
                        match self {
                            Writer_::Writer { length, chain } => chain,
                        }
                    }
                }

                impl Debug for Writer_ {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl DafnyPrint for Writer_ {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            Writer_::Writer { length, chain } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Views_Compile.Writers_Compile.Writer__.Writer(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(length, _formatter, false)?;
                                write!(_formatter, ", ")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(chain, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl Eq for Writer_ {}

                impl Hash for Writer_ {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            Writer_::Writer { length, chain } => {
                                ::std::hash::Hash::hash(length, _state);
                                ::std::hash::Hash::hash(chain, _state)
                            }
                        }
                    }
                }

                impl Default for Writer_ {
                    fn default() -> Writer_ {
                        Writer_::Writer {
                            length: ::std::default::Default::default(),
                            chain: ::std::default::Default::default(),
                        }
                    }
                }

                impl AsRef<Writer_> for &Writer_ {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }
            }
        }

        pub mod r#_Lexers_Compile {
            pub mod r#_Core_Compile {
                pub use ::dafny_runtime::DafnyPrint;
                pub use ::std::cmp::Eq;
                pub use ::std::convert::AsRef;
                pub use ::std::default::Default;
                pub use ::std::fmt::Debug;
                pub use ::std::hash::Hash;

                #[derive(PartialEq, Clone)]
                pub enum LexerResult<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> {
                    Accept {},
                    Reject { err: R },
                    Partial { st: T },
                }

                impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> LexerResult<T, R> {
                    pub fn err(&self) -> &R {
                        match self {
                            LexerResult::Accept {} => {
                                panic!("field does not exist on this variant")
                            }
                            LexerResult::Reject { err } => err,
                            LexerResult::Partial { st } => {
                                panic!("field does not exist on this variant")
                            }
                        }
                    }
                    pub fn st(&self) -> &T {
                        match self {
                            LexerResult::Accept {} => {
                                panic!("field does not exist on this variant")
                            }
                            LexerResult::Reject { err } => {
                                panic!("field does not exist on this variant")
                            }
                            LexerResult::Partial { st } => st,
                        }
                    }
                }

                impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Debug for LexerResult<T, R> {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> DafnyPrint
                    for LexerResult<T, R>
                {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            LexerResult::Accept {} => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Core_Compile.LexerResult.Accept")?;
                                Ok(())
                            }
                            LexerResult::Reject { err } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Core_Compile.LexerResult.Reject(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(err, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                            LexerResult::Partial { st } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Core_Compile.LexerResult.Partial(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(st, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> LexerResult<T, R> {
                    pub fn coerce<
                        r#__T0: ::dafny_runtime::DafnyType,
                        r#__T1: ::dafny_runtime::DafnyType,
                    >(
                        f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
                        f_1: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T1 + 'static>,
                    ) -> ::std::rc::Rc<
                        impl ::std::ops::Fn(LexerResult<T, R>) -> LexerResult<r#__T0, r#__T1>,
                    > {
                        ::std::rc::Rc::new(move |this: Self| -> LexerResult<r#__T0, r#__T1> {
                            match this {
                                LexerResult::Accept {} => LexerResult::Accept {},
                                LexerResult::Reject { err } => LexerResult::Reject {
                                    err: f_1.clone()(err),
                                },
                                LexerResult::Partial { st } => LexerResult::Partial {
                                    st: f_0.clone()(st),
                                },
                            }
                        })
                    }
                }

                impl<T: ::dafny_runtime::DafnyType + Eq, R: ::dafny_runtime::DafnyType + Eq> Eq
                    for LexerResult<T, R>
                {
                }

                impl<
                        T: ::dafny_runtime::DafnyType + Hash,
                        R: ::dafny_runtime::DafnyType + Hash,
                    > Hash for LexerResult<T, R>
                {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            LexerResult::Accept {} => {}
                            LexerResult::Reject { err } => ::std::hash::Hash::hash(err, _state),
                            LexerResult::Partial { st } => ::std::hash::Hash::hash(st, _state),
                        }
                    }
                }

                impl<
                        T: ::dafny_runtime::DafnyType + Default,
                        R: ::dafny_runtime::DafnyType + Default,
                    > Default for LexerResult<T, R>
                {
                    fn default() -> LexerResult<T, R> {
                        LexerResult::Accept {}
                    }
                }

                impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType>
                    AsRef<LexerResult<T, R>> for &LexerResult<T, R>
                {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }
            }

            pub mod r#_Strings_Compile {
                pub use ::dafny_runtime::DafnyPrint;
                pub use ::std::cmp::Eq;
                pub use ::std::convert::AsRef;
                pub use ::std::default::Default;
                pub use ::std::fmt::Debug;
                pub use ::std::hash::Hash;

                pub struct _default {}

                impl _default {
                    pub fn StringBody<_R: ::dafny_runtime::DafnyType>(escaped: bool, byte: i16) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult<bool, _R>>{
                        if byte == ::dafny_runtime::DafnyCharUTF16(92 as u16).0 as i16 {
                            ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<bool, _R>::Partial {
                  st: !escaped
                })
                        } else {
                            if byte == ::dafny_runtime::DafnyCharUTF16(34 as u16).0 as i16
                                && !escaped
                            {
                                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<bool, _R>::Accept {})
                            } else {
                                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<bool, _R>::Partial {
                    st: false
                  })
                            }
                        }
                    }
                    pub fn String(st: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, byte: i16) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>>{
                        let mut _source6: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState> = st.clone();
                        if matches!((&_source6).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Start{ .. }) {
              if byte == ::dafny_runtime::DafnyCharUTF16(34 as u16).0 as i16 {
                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Partial {
                    st: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Body {
                          escaped: false
                        })
                  })
              } else {
                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Reject {
                    err: ::dafny_runtime::string_utf16_of("String must start with double quote")
                  })
              }
            } else {
              if matches!((&_source6).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Body{ .. }) {
                let mut r#___mcc_h0: bool = _source6.escaped().clone();
                let mut escaped: bool = r#___mcc_h0;
                if byte == ::dafny_runtime::DafnyCharUTF16(92 as u16).0 as i16 {
                  ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Partial {
                      st: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Body {
                            escaped: !escaped
                          })
                    })
                } else {
                  if byte == ::dafny_runtime::DafnyCharUTF16(34 as u16).0 as i16 && !escaped {
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Partial {
                        st: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::End {})
                      })
                  } else {
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Partial {
                        st: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Body {
                              escaped: false
                            })
                      })
                  }
                }
              } else {
                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>, ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Accept {})
              }
            }
                    }
                    pub fn StringBodyLexerStart() -> bool {
                        false
                    }
                    pub fn StringLexerStart() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState>{
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Strings_Compile::StringLexerState::Start {})
                    }
                }

                #[derive(PartialEq, Clone)]
                pub enum StringLexerState {
                    Start {},
                    Body { escaped: bool },
                    End {},
                }

                impl StringLexerState {
                    pub fn escaped(&self) -> &bool {
                        match self {
                            StringLexerState::Start {} => {
                                panic!("field does not exist on this variant")
                            }
                            StringLexerState::Body { escaped } => escaped,
                            StringLexerState::End {} => {
                                panic!("field does not exist on this variant")
                            }
                        }
                    }
                }

                impl Debug for StringLexerState {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl DafnyPrint for StringLexerState {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            StringLexerState::Start {} => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Strings_Compile.StringLexerState.Start")?;
                                Ok(())
                            }
                            StringLexerState::Body { escaped } => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Strings_Compile.StringLexerState.Body(")?;
                                ::dafny_runtime::DafnyPrint::fmt_print(escaped, _formatter, false)?;
                                write!(_formatter, ")")?;
                                Ok(())
                            }
                            StringLexerState::End {} => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Lexers_Compile.Strings_Compile.StringLexerState.End")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl Eq for StringLexerState {}

                impl Hash for StringLexerState {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            StringLexerState::Start {} => {}
                            StringLexerState::Body { escaped } => {
                                ::std::hash::Hash::hash(escaped, _state)
                            }
                            StringLexerState::End {} => {}
                        }
                    }
                }

                impl Default for StringLexerState {
                    fn default() -> StringLexerState {
                        StringLexerState::Start {}
                    }
                }

                impl AsRef<StringLexerState> for &StringLexerState {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }
            }
        }

        pub mod r#_Cursors_Compile {
            pub use ::dafny_runtime::DafnyPrint;
            pub use ::std::cmp::Eq;
            pub use ::std::convert::AsRef;
            pub use ::std::default::Default;
            pub use ::std::fmt::Debug;
            pub use ::std::hash::Hash;

            #[derive(PartialEq, Clone)]
            pub enum Split<T: ::dafny_runtime::DafnyType> {
                SP {
                    t: T,
                    cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                },
            }

            impl<T: ::dafny_runtime::DafnyType> Split<T> {
                pub fn t(&self) -> &T {
                    match self {
                        Split::SP { t, cs } => t,
                    }
                }
                pub fn cs(
                    &self,
                ) -> &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor
                {
                    match self {
                        Split::SP { t, cs } => cs,
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType> Debug for Split<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl<T: ::dafny_runtime::DafnyType> DafnyPrint for Split<T> {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        Split::SP { t, cs } => {
                            write!(
                                _formatter,
                                "JSON_Compile.Utils_Compile.Cursors_Compile.Split.SP("
                            )?;
                            ::dafny_runtime::DafnyPrint::fmt_print(t, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(cs, _formatter, false)?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType> Split<T> {
                pub fn coerce<r#__T0: ::dafny_runtime::DafnyType>(
                    f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
                ) -> ::std::rc::Rc<impl ::std::ops::Fn(Split<T>) -> Split<r#__T0>> {
                    ::std::rc::Rc::new(move |this: Self| -> Split<r#__T0> {
                        match this {
                Split::SP{t, cs, } => {
                  Split::SP {
                    t: f_0.clone()(t),
                    cs: ::dafny_runtime::upcast_id::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor>()(cs)
                  }
                },
              }
                    })
                }
            }

            impl<T: ::dafny_runtime::DafnyType + Eq> Eq for Split<T> {}

            impl<T: ::dafny_runtime::DafnyType + Hash> Hash for Split<T> {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        Split::SP { t, cs } => {
                            ::std::hash::Hash::hash(t, _state);
                            ::std::hash::Hash::hash(cs, _state)
                        }
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType + Default> Default for Split<T> {
                fn default() -> Split<T> {
                    Split::SP {
                        t: ::std::default::Default::default(),
                        cs: ::std::default::Default::default(),
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType> AsRef<Split<T>> for &Split<T> {
                fn as_ref(&self) -> Self {
                    self
                }
            }

            pub type Cursor = ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_,
            >;

            pub fn r#__init_Cursor(
            ) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>
            {
                ::std::rc::Rc::new(
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                        s: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
                        beg: 0,
                        point: 0,
                        end: 0,
                    },
                )
            }

            pub type FreshCursor = ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_,
            >;

            pub fn r#__init_FreshCursor(
            ) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>
            {
                ::std::rc::Rc::new(
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                        s: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
                        beg: 0,
                        point: 0,
                        end: 0,
                    },
                )
            }

            #[derive(PartialEq, Clone)]
            pub enum CursorError<R: ::dafny_runtime::DafnyType> {
                EOF {},
                ExpectingByte {
                    expected: u8,
                    b: i16,
                },
                ExpectingAnyByte {
                    expected_sq: ::dafny_runtime::Sequence<u8>,
                    b: i16,
                },
                OtherError {
                    err: R,
                },
            }

            impl<R: ::dafny_runtime::DafnyType> CursorError<R> {
                pub fn ToString(
                    self: &::std::rc::Rc<Self>,
                    pr: &::std::rc::Rc<
                        dyn ::std::ops::Fn(
                            &R,
                        ) -> ::dafny_runtime::Sequence<
                            ::dafny_runtime::DafnyCharUTF16,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    let mut _source7: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<
                            R,
                        >,
                    > = self.clone();
                    if matches!((&_source7).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::EOF{ .. }) {
            ::dafny_runtime::string_utf16_of("Reached EOF")
          } else {
            if matches!((&_source7).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::ExpectingByte{ .. }) {
              let mut r#___mcc_h0: u8 = _source7.expected().clone();
              let mut r#___mcc_h1: i16 = _source7.b().clone();
              let mut b: i16 = r#___mcc_h1;
              let mut b0: u8 = r#___mcc_h0;
              let mut c: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if 0 < b {
                  ::dafny_runtime::string_utf16_of("'").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b as u16)]).concat(&::dafny_runtime::string_utf16_of("'"))
                } else {
                  ::dafny_runtime::string_utf16_of("EOF")
                };
              ::dafny_runtime::string_utf16_of("Expecting '").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b0 as u16)]).concat(&::dafny_runtime::string_utf16_of("', read ")).concat(&c)
            } else {
              if matches!((&_source7).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::ExpectingAnyByte{ .. }) {
                let mut r#___mcc_h2: ::dafny_runtime::Sequence<u8> = _source7.expected_sq().clone();
                let mut r#___mcc_h3: i16 = _source7.b().clone();
                let mut b: i16 = r#___mcc_h3;
                let mut bs0: ::dafny_runtime::Sequence<u8> = r#___mcc_h2.clone();
                let mut c: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if 0 < b {
                    ::dafny_runtime::string_utf16_of("'").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b as u16)]).concat(&::dafny_runtime::string_utf16_of("'"))
                  } else {
                    ::dafny_runtime::string_utf16_of("EOF")
                  };
                let mut c0s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = {
                    let _initializer = {
                          let bs0: ::dafny_runtime::Sequence<u8> = bs0.clone();
                          {
                              let mut bs0 = bs0.clone();
                              ::std::rc::Rc::new(move |idx: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                                      ::dafny_runtime::DafnyCharUTF16(bs0.get(idx) as u16)
                                    })
                            }
                        };
                    ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), bs0.cardinality()).map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()
                    };
                ::dafny_runtime::string_utf16_of("Expecting one of '").concat(&c0s).concat(&::dafny_runtime::string_utf16_of("', read ")).concat(&c)
              } else {
                let mut r#___mcc_h4: R = _source7.err().clone();
                let mut err: R = r#___mcc_h4.clone();
                pr(&err)
              }
            }
          }
                }
                pub fn expected(&self) -> &u8 {
                    match self {
                        CursorError::EOF {} => panic!("field does not exist on this variant"),
                        CursorError::ExpectingByte { expected, b } => expected,
                        CursorError::ExpectingAnyByte { expected_sq, b } => {
                            panic!("field does not exist on this variant")
                        }
                        CursorError::OtherError { err } => {
                            panic!("field does not exist on this variant")
                        }
                    }
                }
                pub fn b(&self) -> &i16 {
                    match self {
                        CursorError::EOF {} => panic!("field does not exist on this variant"),
                        CursorError::ExpectingByte { expected, b } => b,
                        CursorError::ExpectingAnyByte { expected_sq, b } => b,
                        CursorError::OtherError { err } => {
                            panic!("field does not exist on this variant")
                        }
                    }
                }
                pub fn expected_sq(&self) -> &::dafny_runtime::Sequence<u8> {
                    match self {
                        CursorError::EOF {} => panic!("field does not exist on this variant"),
                        CursorError::ExpectingByte { expected, b } => {
                            panic!("field does not exist on this variant")
                        }
                        CursorError::ExpectingAnyByte { expected_sq, b } => expected_sq,
                        CursorError::OtherError { err } => {
                            panic!("field does not exist on this variant")
                        }
                    }
                }
                pub fn err(&self) -> &R {
                    match self {
                        CursorError::EOF {} => panic!("field does not exist on this variant"),
                        CursorError::ExpectingByte { expected, b } => {
                            panic!("field does not exist on this variant")
                        }
                        CursorError::ExpectingAnyByte { expected_sq, b } => {
                            panic!("field does not exist on this variant")
                        }
                        CursorError::OtherError { err } => err,
                    }
                }
            }

            impl<R: ::dafny_runtime::DafnyType> Debug for CursorError<R> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl<R: ::dafny_runtime::DafnyType> DafnyPrint for CursorError<R> {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        CursorError::EOF {} => {
                            write!(
                                _formatter,
                                "JSON_Compile.Utils_Compile.Cursors_Compile.CursorError.EOF"
                            )?;
                            Ok(())
                        }
                        CursorError::ExpectingByte { expected, b } => {
                            write!(_formatter, "JSON_Compile.Utils_Compile.Cursors_Compile.CursorError.ExpectingByte(")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(expected, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                        CursorError::ExpectingAnyByte { expected_sq, b } => {
                            write!(_formatter, "JSON_Compile.Utils_Compile.Cursors_Compile.CursorError.ExpectingAnyByte(")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(expected_sq, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                        CursorError::OtherError { err } => {
                            write!(_formatter, "JSON_Compile.Utils_Compile.Cursors_Compile.CursorError.OtherError(")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(err, _formatter, false)?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                    }
                }
            }

            impl<R: ::dafny_runtime::DafnyType> CursorError<R> {
                pub fn coerce<r#__T0: ::dafny_runtime::DafnyType>(
                    f_0: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T0 + 'static>,
                ) -> ::std::rc::Rc<impl ::std::ops::Fn(CursorError<R>) -> CursorError<r#__T0>>
                {
                    ::std::rc::Rc::new(move |this: Self| -> CursorError<r#__T0> {
                        match this {
                            CursorError::EOF {} => CursorError::EOF {},
                            CursorError::ExpectingByte { expected, b } => {
                                CursorError::ExpectingByte {
                                    expected: ::dafny_runtime::upcast_id::<u8>()(expected),
                                    b: ::dafny_runtime::upcast_id::<i16>()(b),
                                }
                            }
                            CursorError::ExpectingAnyByte { expected_sq, b } => {
                                CursorError::ExpectingAnyByte {
                                    expected_sq: ::dafny_runtime::upcast_id::<
                                        ::dafny_runtime::Sequence<u8>,
                                    >()(
                                        expected_sq
                                    ),
                                    b: ::dafny_runtime::upcast_id::<i16>()(b),
                                }
                            }
                            CursorError::OtherError { err } => CursorError::OtherError {
                                err: f_0.clone()(err),
                            },
                        }
                    })
                }
            }

            impl<R: ::dafny_runtime::DafnyType + Eq> Eq for CursorError<R> {}

            impl<R: ::dafny_runtime::DafnyType + Hash> Hash for CursorError<R> {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        CursorError::EOF {} => {}
                        CursorError::ExpectingByte { expected, b } => {
                            ::std::hash::Hash::hash(expected, _state);
                            ::std::hash::Hash::hash(b, _state)
                        }
                        CursorError::ExpectingAnyByte { expected_sq, b } => {
                            ::std::hash::Hash::hash(expected_sq, _state);
                            ::std::hash::Hash::hash(b, _state)
                        }
                        CursorError::OtherError { err } => ::std::hash::Hash::hash(err, _state),
                    }
                }
            }

            impl<R: ::dafny_runtime::DafnyType + Default> Default for CursorError<R> {
                fn default() -> CursorError<R> {
                    CursorError::EOF {}
                }
            }

            impl<R: ::dafny_runtime::DafnyType> AsRef<CursorError<R>> for &CursorError<R> {
                fn as_ref(&self) -> Self {
                    self
                }
            }

            #[derive(PartialEq, Clone)]
            pub enum Cursor_ {
                Cursor {
                    s: ::dafny_runtime::Sequence<u8>,
                    beg: u32,
                    point: u32,
                    end: u32,
                },
            }

            impl Cursor_ {
                pub fn OfView(
                    v: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor
                {
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
              s: v.s().clone(),
              beg: v.beg().clone(),
              point: v.beg().clone(),
              end: v.end().clone()
            })
                }
                pub fn OfBytes(
                    bs: &::dafny_runtime::Sequence<u8>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor
                {
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
              s: bs.clone(),
              beg: 0,
              point: 0,
              end: ::dafny_runtime::truncate!(bs.cardinality(), u32)
            })
                }
                pub fn Bytes(self: &::std::rc::Rc<Self>) -> ::dafny_runtime::Sequence<u8> {
                    self.s().slice(
                        &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                            self.beg().clone(),
                        ),
                        &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                            self.end().clone(),
                        ),
                    )
                }
                pub fn Prefix(
                    self: &::std::rc::Rc<Self>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
                {
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::View {
              s: self.s().clone(),
              beg: self.beg().clone(),
              end: self.point().clone()
            })
                }
                pub fn Suffix(
                    self: &::std::rc::Rc<Self>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    let mut r#_dt__update__tmp_h0: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_,
                    > = self.clone();
                    let mut r#_dt__update_hbeg_h0: u32 = self.point().clone();
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
              s: r#_dt__update__tmp_h0.s().clone(),
              beg: r#_dt__update_hbeg_h0,
              point: r#_dt__update__tmp_h0.point().clone(),
              end: r#_dt__update__tmp_h0.end().clone()
            })
                }
                pub fn Split(self: &::std::rc::Rc<Self>) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>{
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>::SP {
              t: self.Prefix(),
              cs: self.Suffix()
            })
                }
                pub fn PrefixLength(self: &::std::rc::Rc<Self>) -> u32 {
                    self.point().clone() - self.beg().clone()
                }
                pub fn SuffixLength(self: &::std::rc::Rc<Self>) -> u32 {
                    self.end().clone() - self.point().clone()
                }
                pub fn Length(self: &::std::rc::Rc<Self>) -> u32 {
                    self.end().clone() - self.beg().clone()
                }
                pub fn At(self: &::std::rc::Rc<Self>, idx: u32) -> u8 {
                    self.s()
                        .get(&::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                            self.beg().clone() + idx,
                        ))
                }
                pub fn SuffixAt(self: &::std::rc::Rc<Self>, idx: u32) -> u8 {
                    self.s()
                        .get(&::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                            self.point().clone() + idx,
                        ))
                }
                pub fn Peek(self: &::std::rc::Rc<Self>) -> i16 {
                    if self.r#_EOF_q().clone() {
                        -1
                    } else {
                        self.SuffixAt(0) as i16
                    }
                }
                pub fn LookingAt(
                    self: &::std::rc::Rc<Self>,
                    c: &::dafny_runtime::DafnyCharUTF16,
                ) -> bool {
                    self.Peek() == c.clone().0 as i16
                }
                pub fn Skip(
                    self: &::std::rc::Rc<Self>,
                    n: u32,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    let mut r#_dt__update__tmp_h0: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_,
                    > = self.clone();
                    let mut r#_dt__update_hpoint_h0: u32 = self.point().clone() + n;
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
              s: r#_dt__update__tmp_h0.s().clone(),
              beg: r#_dt__update__tmp_h0.beg().clone(),
              point: r#_dt__update_hpoint_h0,
              end: r#_dt__update__tmp_h0.end().clone()
            })
                }
                pub fn Unskip(
                    self: &::std::rc::Rc<Self>,
                    n: u32,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    let mut r#_dt__update__tmp_h0: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_,
                    > = self.clone();
                    let mut r#_dt__update_hpoint_h0: u32 = self.point().clone() - n;
                    ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
              s: r#_dt__update__tmp_h0.s().clone(),
              beg: r#_dt__update__tmp_h0.beg().clone(),
              point: r#_dt__update_hpoint_h0,
              end: r#_dt__update__tmp_h0.end().clone()
            })
                }
                pub fn Get<_R: ::dafny_runtime::DafnyType>(self: &::std::rc::Rc<Self>, err: &_R) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                    if self.r#_EOF_q().clone() {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::OtherError {
                      err: err.clone()
                    })
              })
                    } else {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Success {
                value: self.Skip(1)
              })
                    }
                }
                pub fn AssertByte<_R: ::dafny_runtime::DafnyType>(self: &::std::rc::Rc<Self>, b: u8) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                    let mut nxt: i16 = self.Peek();
                    if nxt == b as i16 {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Success {
                value: self.Skip(1)
              })
                    } else {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::ExpectingByte {
                      expected: b,
                      b: nxt
                    })
              })
                    }
                }
                pub fn AssertBytes<_R: ::dafny_runtime::DafnyType>(self: &::std::rc::Rc<Self>, bs: &::dafny_runtime::Sequence<u8>, offset: u32) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                    let mut _this = self.clone();
                    let mut bs = bs.clone();
                    let mut offset = offset;
                    'TAIL_CALL_START: loop {
                        if offset == ::dafny_runtime::truncate!(bs.cardinality(), u32) {
                            return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Success {
                    value: _this.clone()
                  });
                        } else {
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>> = _this.AssertByte::<_R>(bs.get(&::std::convert::Into::<::dafny_runtime::DafnyInt>::into(offset)));
                            if valueOrError0.IsFailure() {
                                return valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>>();
                            } else {
                                let mut ps: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                                let mut _in190: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = ps.clone();
                                let mut _in191: ::dafny_runtime::Sequence<u8> = bs.clone();
                                let mut _in192: u32 = offset + 1;
                                _this = _in190.clone();
                                bs = _in191.clone();
                                offset = _in192;
                                continue 'TAIL_CALL_START;
                            }
                        }
                    }
                }
                pub fn AssertChar<_R: ::dafny_runtime::DafnyType>(self: &::std::rc::Rc<Self>, c0: &::dafny_runtime::DafnyCharUTF16) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                    self.AssertByte::<_R>(c0.clone().0 as u8)
                }
                pub fn SkipByte(
                    self: &::std::rc::Rc<Self>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    if self.r#_EOF_q().clone() {
                        self.clone()
                    } else {
                        self.Skip(1)
                    }
                }
                pub fn SkipIf(
                    self: &::std::rc::Rc<Self>,
                    p: &::std::rc::Rc<dyn ::std::ops::Fn(&u8) -> bool>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    if self.r#_EOF_q().clone() || !p(&self.SuffixAt(0)) {
                        self.clone()
                    } else {
                        self.Skip(1)
                    }
                }
                pub fn SkipWhile(
                    self: &::std::rc::Rc<Self>,
                    p: &::std::rc::Rc<dyn ::std::ops::Fn(&u8) -> bool>,
                ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor
                {
                    let mut ps: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                s: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
                beg: 0,
                point: 0,
                end: 0
              });
                    let mut r#_point_k: u32 = self.point().clone();
                    let mut end: u32 = self.end().clone();
                    while r#_point_k < end
                        && p(&self.s().get(
                            &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(r#_point_k),
                        ))
                    {
                        r#_point_k = r#_point_k + 1;
                    }
                    ps = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                s: self.s().clone(),
                beg: self.beg().clone(),
                point: r#_point_k,
                end: self.end().clone()
              });
                    return ps.clone();
                }
                pub fn SkipWhileLexer<_A: ::dafny_runtime::DafnyType, _R: ::dafny_runtime::DafnyType>(self: &::std::rc::Rc<Self>, step: &::std::rc::Rc<dyn ::std::ops::Fn(&_A, &i16) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult<_A, _R>>>, st: &_A) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                    let mut pr = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>>::new();
                    let mut r#_point_k: u32 = self.point().clone();
                    let mut end: u32 = self.end().clone();
                    let mut r#_st_k: _A = st.clone();
                    while true {
                        let mut eof: bool = r#_point_k == end;
                        let mut minusone: i16 = -1;
                        let mut c: i16 = if eof {
                            minusone
                        } else {
                            self.s()
                                .get(&::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                    r#_point_k,
                                )) as i16
                        };
                        let mut _source8: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult<_A, _R>> = step(&r#_st_k, &c);
                        if matches!((&_source8).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::Accept{ .. }) {
              pr = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Success {
                      value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                            s: self.s().clone(),
                            beg: self.beg().clone(),
                            point: r#_point_k,
                            end: self.end().clone()
                          })
                    }));
              return pr.read();
            } else {
              if matches!((&_source8).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Lexers_Compile::r#_Core_Compile::LexerResult::Reject{ .. }) {
                let mut r#___mcc_h0: _R = _source8.err().clone();
                let mut err: _R = r#___mcc_h0.clone();
                pr = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                        error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::OtherError {
                              err: err.clone()
                            })
                      }));
                return pr.read();
              } else {
                let mut r#___mcc_h1: _A = _source8.st().clone();
                let mut r#_st_k_k: _A = r#___mcc_h1.clone();
                if eof {
                  pr = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                          error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::EOF {})
                        }));
                  return pr.read();
                } else {
                  r#_st_k = r#_st_k_k.clone();
                  r#_point_k = r#_point_k + 1;
                }
              }
            }
                    }
                    return pr.read();
                }
                pub fn r#_BOF_q(self: &::std::rc::Rc<Self>) -> bool {
                    self.point().clone() == self.beg().clone()
                }
                pub fn r#_EOF_q(self: &::std::rc::Rc<Self>) -> bool {
                    self.point().clone() == self.end().clone()
                }
                pub fn s(&self) -> &::dafny_runtime::Sequence<u8> {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => s,
                    }
                }
                pub fn beg(&self) -> &u32 {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => beg,
                    }
                }
                pub fn point(&self) -> &u32 {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => point,
                    }
                }
                pub fn end(&self) -> &u32 {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => end,
                    }
                }
            }

            impl Debug for Cursor_ {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl DafnyPrint for Cursor_ {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => {
                            write!(
                                _formatter,
                                "JSON_Compile.Utils_Compile.Cursors_Compile.Cursor__.Cursor("
                            )?;
                            ::dafny_runtime::DafnyPrint::fmt_print(s, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(beg, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(point, _formatter, false)?;
                            write!(_formatter, ", ")?;
                            ::dafny_runtime::DafnyPrint::fmt_print(end, _formatter, false)?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                    }
                }
            }

            impl Eq for Cursor_ {}

            impl Hash for Cursor_ {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        Cursor_::Cursor { s, beg, point, end } => {
                            ::std::hash::Hash::hash(s, _state);
                            ::std::hash::Hash::hash(beg, _state);
                            ::std::hash::Hash::hash(point, _state);
                            ::std::hash::Hash::hash(end, _state)
                        }
                    }
                }
            }

            impl Default for Cursor_ {
                fn default() -> Cursor_ {
                    Cursor_::Cursor {
                        s: ::std::default::Default::default(),
                        beg: ::std::default::Default::default(),
                        point: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
            }

            impl AsRef<Cursor_> for &Cursor_ {
                fn as_ref(&self) -> Self {
                    self
                }
            }
        }

        pub mod r#_Parsers_Compile {
            pub use ::dafny_runtime::DafnyPrint;
            pub use ::std::convert::AsRef;
            pub use ::std::fmt::Debug;
            pub use ::std::hash::Hash;

            pub struct _default {}

            impl _default {
                pub fn ParserWitness<
                    _T: ::dafny_runtime::DafnyType,
                    _R: ::dafny_runtime::DafnyType,
                >() -> ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<_T, _R>,
                > {
                    ::std::rc::Rc::new(
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<
                            _T,
                            _R,
                        >::Parser {
                            r#fn: {
                                ::std::rc::Rc::new(move |_v0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<_T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                      ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<_T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                          error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::EOF {})
                        })
                    })
                            },
                        },
                    )
                }
                pub fn SubParserWitness<
                    _T: ::dafny_runtime::DafnyType,
                    _R: ::dafny_runtime::DafnyType,
                >() -> ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_<
                        _T,
                        _R,
                    >,
                > {
                    ::std::rc::Rc::new(
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_::<
                            _T,
                            _R,
                        >::SubParser {
                            r#fn: {
                                ::std::rc::Rc::new(move |cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<_T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>>{
                      ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<_T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<_R>>>::Failure {
                          error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<_R>::EOF {})
                        })
                    })
                            },
                        },
                    )
                }
            }

            pub type Parser<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> =
                ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<T, R>,
                >;

            pub fn r#__init_Parser<
                T: ::dafny_runtime::DafnyType + ::std::default::Default,
                R: ::dafny_runtime::DafnyType + ::std::default::Default,
            >() -> ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<T, R>,
            > {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::_default::ParserWitness::<T, R>()
            }

            #[derive(Clone)]
            pub enum Parser_<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> {
                Parser {
          r#fn: ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>>
        }
      }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Parser_<T, R> {
                pub fn r#fn(&self) -> &::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>>{
                    match self {
                        Parser_::Parser { r#fn } => r#fn,
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Debug for Parser_<T, R> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> DafnyPrint for Parser_<T, R> {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        Parser_::Parser { r#fn } => {
                            write!(
                                _formatter,
                                "JSON_Compile.Utils_Compile.Parsers_Compile.Parser__.Parser("
                            )?;
                            write!(_formatter, "<function>")?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Parser_<T, R> {
                pub fn coerce<r#__T1: ::dafny_runtime::DafnyType>(
                    f_1: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T1 + 'static>,
                ) -> ::std::rc::Rc<impl ::std::ops::Fn(Parser_<T, R>) -> Parser_<T, r#__T1>>
                {
                    ::std::rc::Rc::new(move |this: Self| -> Parser_<T, r#__T1> {
                        match this {
                Parser_::Parser{r#fn, } => {
                  Parser_::Parser {
                    r#fn: ::dafny_runtime::fn1_coerce::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>, ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<r#__T1>>>>>(::dafny_runtime::rc_coerce(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>::coerce(::dafny_runtime::upcast_id::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>>(), ::dafny_runtime::rc_coerce(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<R>::coerce(f_1.clone())))))(r#fn)
                  }
                },
              }
                    })
                }
            }

            impl<T: ::dafny_runtime::DafnyType + Hash, R: ::dafny_runtime::DafnyType + Hash> Hash
                for Parser_<T, R>
            {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        Parser_::Parser { r#fn } => 0.hash(_state),
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> AsRef<Parser_<T, R>>
                for &Parser_<T, R>
            {
                fn as_ref(&self) -> Self {
                    self
                }
            }

            #[derive(Clone)]
            pub enum SubParser_<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> {
                SubParser {
          r#fn: ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>>
        }
      }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> SubParser_<T, R> {
                pub fn r#fn(&self) -> &::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>>{
                    match self {
                        SubParser_::SubParser { r#fn } => r#fn,
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> Debug for SubParser_<T, R> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> DafnyPrint for SubParser_<T, R> {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        SubParser_::SubParser { r#fn } => {
                            write!(
                                _formatter,
                                "JSON_Compile.Utils_Compile.Parsers_Compile.SubParser__.SubParser("
                            )?;
                            write!(_formatter, "<function>")?;
                            write!(_formatter, ")")?;
                            Ok(())
                        }
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> SubParser_<T, R> {
                pub fn coerce<r#__T1: ::dafny_runtime::DafnyType>(
                    f_1: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T1 + 'static>,
                ) -> ::std::rc::Rc<impl ::std::ops::Fn(SubParser_<T, R>) -> SubParser_<T, r#__T1>>
                {
                    ::std::rc::Rc::new(move |this: Self| -> SubParser_<T, r#__T1> {
                        match this {
                SubParser_::SubParser{r#fn, } => {
                  SubParser_::SubParser {
                    r#fn: ::dafny_runtime::fn1_coerce::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>>, ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<r#__T1>>>>>(::dafny_runtime::rc_coerce(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<R>>>::coerce(::dafny_runtime::upcast_id::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<T>>>(), ::dafny_runtime::rc_coerce(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<R>::coerce(f_1.clone())))))(r#fn)
                  }
                },
              }
                    })
                }
            }

            impl<T: ::dafny_runtime::DafnyType + Hash, R: ::dafny_runtime::DafnyType + Hash> Hash
                for SubParser_<T, R>
            {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        SubParser_::SubParser { r#fn } => 0.hash(_state),
                    }
                }
            }

            impl<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType>
                AsRef<SubParser_<T, R>> for &SubParser_<T, R>
            {
                fn as_ref(&self) -> Self {
                    self
                }
            }

            pub type SubParser<T: ::dafny_runtime::DafnyType, R: ::dafny_runtime::DafnyType> =
                ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_<T, R>,
                >;

            pub fn r#__init_SubParser<
                T: ::dafny_runtime::DafnyType + ::std::default::Default,
                R: ::dafny_runtime::DafnyType + ::std::default::Default,
            >() -> ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_<T, R>,
            > {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::_default::SubParserWitness::<T, R>()
            }
        }

        pub mod r#_Str_Compile {
            pub struct _default {}

            impl _default {
                pub fn OfNat(
                    n: &::dafny_runtime::_System::nat,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::OfNat_any(n, &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::HEX_DIGITS().take(base))
                }
                pub fn OfInt(
                    n: &::dafny_runtime::DafnyInt,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::OfInt_any(n, &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::HEX_DIGITS().take(base), &::dafny_runtime::DafnyCharUTF16(45 as u16))
                }
                pub fn ToNat(
                    str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::_System::nat {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::ToNat_any(str, base, &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::HEX_TABLE())
                }
                pub fn ToInt(
                    str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::DafnyInt {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::ToInt_any(str, &::dafny_runtime::DafnyCharUTF16(45 as u16), base, &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::HEX_TABLE())
                }
                pub fn EscapeQuotes(
                    str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::_default::Escape(str, &::dafny_runtime::set!{::dafny_runtime::DafnyCharUTF16(34 as u16), ::dafny_runtime::DafnyCharUTF16(39 as u16)}, &::dafny_runtime::DafnyCharUTF16(92 as u16))
                }
                pub fn UnescapeQuotes(str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::_default::Unescape(str, &::dafny_runtime::DafnyCharUTF16(92 as u16))
                }
                pub fn Test() -> () {
                    let mut _e00: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                            &::dafny_runtime::int!(0),
                            &::dafny_runtime::int!(10),
                        );
                    let mut _e10: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        ::dafny_runtime::string_utf16_of("0");
                    if !(_e00.clone() == _e10.clone()) {
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Left:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e00));
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Right:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e10));
                        panic!("Halt")
                    };
                    let mut _e01: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                            &::dafny_runtime::int!(3),
                            &::dafny_runtime::int!(10),
                        );
                    let mut _e11: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        ::dafny_runtime::string_utf16_of("3");
                    if !(_e01.clone() == _e11.clone()) {
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Left:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e01));
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Right:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e11));
                        panic!("Halt")
                    };
                    let mut _e02: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                            &::dafny_runtime::int!(302),
                            &::dafny_runtime::int!(10),
                        );
                    let mut _e12: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        ::dafny_runtime::string_utf16_of("302");
                    if !(_e02.clone() == _e12.clone()) {
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Left:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e02));
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Right:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e12));
                        panic!("Halt")
                    };
                    let mut _e03: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                            &::dafny_runtime::int!(-3),
                            &::dafny_runtime::int!(10),
                        );
                    let mut _e13: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        ::dafny_runtime::string_utf16_of("-3");
                    if !(_e03.clone() == _e13.clone()) {
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Left:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e03));
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Right:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e13));
                        panic!("Halt")
                    };
                    let mut _e04: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                            &::dafny_runtime::int!(-302),
                            &::dafny_runtime::int!(10),
                        );
                    let mut _e14: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        ::dafny_runtime::string_utf16_of("-302");
                    if !(_e04.clone() == _e14.clone()) {
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Left:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e04));
                        print!(
                            "{}",
                            ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                                "Right:\n"
                            ))
                        );
                        print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e14));
                        panic!("Halt")
                    };
                    return ();
                }
                pub fn OfBool(
                    b: bool,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    if b {
                        ::dafny_runtime::string_utf16_of("true")
                    } else {
                        ::dafny_runtime::string_utf16_of("false")
                    }
                }
                pub fn OfChar(
                    c: &::dafny_runtime::DafnyCharUTF16,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    ::dafny_runtime::seq![c.clone()]
                }
                pub fn Join(
                    sep: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    strs: &::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    let mut _accumulator: ::dafny_runtime::Sequence<
                        ::dafny_runtime::DafnyCharUTF16,
                    > = ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
                    let mut sep = sep.clone();
                    let mut strs = strs.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if strs.cardinality() == ::dafny_runtime::int!(0) {
                            return _accumulator.concat(&::dafny_runtime::string_utf16_of(""));
                        } else {
                            if strs.cardinality() == ::dafny_runtime::int!(1) {
                                return _accumulator.concat(&strs.get(&::dafny_runtime::int!(0)));
                            } else {
                                _accumulator = _accumulator
                                    .concat(&strs.get(&::dafny_runtime::int!(0)).concat(&sep));
                                let mut _in201: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyCharUTF16,
                                > = sep.clone();
                                let mut _in202: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                > = strs.drop(&::dafny_runtime::int!(1));
                                sep = _in201.clone();
                                strs = _in202.clone();
                                continue 'TAIL_CALL_START;
                            }
                        }
                    }
                }
                pub fn Concat(
                    strs: &::dafny_runtime::Sequence<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    let mut _accumulator: ::dafny_runtime::Sequence<
                        ::dafny_runtime::DafnyCharUTF16,
                    > = ::dafny_runtime::seq![]
                        as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
                    let mut strs = strs.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if strs.cardinality() == ::dafny_runtime::int!(0) {
                            return _accumulator.concat(&::dafny_runtime::string_utf16_of(""));
                        } else {
                            _accumulator =
                                _accumulator.concat(&strs.get(&::dafny_runtime::int!(0)));
                            let mut _in203: ::dafny_runtime::Sequence<
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            > = strs.drop(&::dafny_runtime::int!(1));
                            strs = _in203.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
                pub fn HEX_DIGITS() -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                    ::dafny_runtime::string_utf16_of("0123456789ABCDEF")
                }
                pub fn HEX_TABLE(
                ) -> ::dafny_runtime::Map<::dafny_runtime::DafnyCharUTF16, ::dafny_runtime::DafnyInt>
                {
                    ::dafny_runtime::map![(::dafny_runtime::DafnyCharUTF16(48 as u16)) => (::dafny_runtime::int!(0)), (::dafny_runtime::DafnyCharUTF16(49 as u16)) => (::dafny_runtime::int!(1)), (::dafny_runtime::DafnyCharUTF16(50 as u16)) => (::dafny_runtime::int!(2)), (::dafny_runtime::DafnyCharUTF16(51 as u16)) => (::dafny_runtime::int!(3)), (::dafny_runtime::DafnyCharUTF16(52 as u16)) => (::dafny_runtime::int!(4)), (::dafny_runtime::DafnyCharUTF16(53 as u16)) => (::dafny_runtime::int!(5)), (::dafny_runtime::DafnyCharUTF16(54 as u16)) => (::dafny_runtime::int!(6)), (::dafny_runtime::DafnyCharUTF16(55 as u16)) => (::dafny_runtime::int!(7)), (::dafny_runtime::DafnyCharUTF16(56 as u16)) => (::dafny_runtime::int!(8)), (::dafny_runtime::DafnyCharUTF16(57 as u16)) => (::dafny_runtime::int!(9)), (::dafny_runtime::DafnyCharUTF16(97 as u16)) => (::dafny_runtime::int!(10)), (::dafny_runtime::DafnyCharUTF16(98 as u16)) => (::dafny_runtime::int!(11)), (::dafny_runtime::DafnyCharUTF16(99 as u16)) => (::dafny_runtime::int!(12)), (::dafny_runtime::DafnyCharUTF16(100 as u16)) => (::dafny_runtime::int!(13)), (::dafny_runtime::DafnyCharUTF16(101 as u16)) => (::dafny_runtime::int!(14)), (::dafny_runtime::DafnyCharUTF16(102 as u16)) => (::dafny_runtime::int!(15)), (::dafny_runtime::DafnyCharUTF16(65 as u16)) => (::dafny_runtime::int!(10)), (::dafny_runtime::DafnyCharUTF16(66 as u16)) => (::dafny_runtime::int!(11)), (::dafny_runtime::DafnyCharUTF16(67 as u16)) => (::dafny_runtime::int!(12)), (::dafny_runtime::DafnyCharUTF16(68 as u16)) => (::dafny_runtime::int!(13)), (::dafny_runtime::DafnyCharUTF16(69 as u16)) => (::dafny_runtime::int!(14)), (::dafny_runtime::DafnyCharUTF16(70 as u16)) => (::dafny_runtime::int!(15))]
                }
            }

            pub mod r#_CharStrConversion_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Digits(
                        n: &::dafny_runtime::_System::nat,
                        base: &::dafny_runtime::DafnyInt,
                    ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> {
                        if n.clone() == ::dafny_runtime::int!(0) {
                            ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>
                        } else {
                            let mut r#_digits_k: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::Digits(&(::dafny_runtime::euclidian_division)(n.clone(), base.clone()), base);
                            let mut digits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                                r#_digits_k.concat(&::dafny_runtime::seq![
                                    (::dafny_runtime::euclidian_modulo)(n.clone(), base.clone())
                                ]);
                            digits.clone()
                        }
                    }
                    pub fn OfDigits(
                        digits: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
                        chars: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>
                    {
                        let mut _accumulator: ::dafny_runtime::Sequence<
                            ::dafny_runtime::DafnyCharUTF16,
                        > = ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
                        let mut digits = digits.clone();
                        let mut chars = chars.clone();
                        let mut _accumulator = _accumulator.clone();
                        'TAIL_CALL_START: loop {
                            if digits.clone().to_array().len() == 0 {
                                return _accumulator.concat(
                                    &(::dafny_runtime::seq![]
                                        as ::dafny_runtime::Sequence<
                                            ::dafny_runtime::DafnyCharUTF16,
                                        >),
                                );
                            } else {
                                _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                    chars.get(&digits.get(&::dafny_runtime::int!(0)))
                                ]);
                                let mut _in193: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyInt,
                                > = digits.drop(&::dafny_runtime::int!(1));
                                let mut _in194: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyCharUTF16,
                                > = chars.clone();
                                digits = _in193.clone();
                                chars = _in194.clone();
                                continue 'TAIL_CALL_START;
                            }
                        }
                    }
                    pub fn OfNat_any(
                        n: &::dafny_runtime::_System::nat,
                        chars: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>
                    {
                        let mut base: ::dafny_runtime::DafnyInt = chars.cardinality();
                        if n.clone() == ::dafny_runtime::int!(0) {
                            ::dafny_runtime::seq![chars.get(&::dafny_runtime::int!(0))]
                        } else {
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::OfDigits(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::Digits(n, &base), chars)
                        }
                    }
                    pub fn NumberStr(
                        str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        minus: &::dafny_runtime::DafnyCharUTF16,
                        is_digit: &::std::rc::Rc<
                            dyn ::std::ops::Fn(&::dafny_runtime::DafnyCharUTF16) -> bool,
                        >,
                    ) -> bool {
                        !(str.clone().to_array().len() != 0) || (str.get(&::dafny_runtime::int!(0)) == minus.clone() || is_digit(&str.get(&::dafny_runtime::int!(0)))) && ::dafny_runtime::itertools::Itertools::unique((&str.drop(&::dafny_runtime::int!(1))).iter()).all(({
                let mut str = str.clone();
                let mut is_digit = is_digit.clone();
                ::std::rc::Rc::new(move |r#__forall_var_6: ::dafny_runtime::DafnyCharUTF16| -> bool{
                    let mut c: ::dafny_runtime::DafnyCharUTF16 = r#__forall_var_6.clone();
                    !str.drop(&::dafny_runtime::int!(1)).contains(&c) || (&is_digit)(&c)
                  })
              }).as_ref())
                    }
                    pub fn OfInt_any(
                        n: &::dafny_runtime::DafnyInt,
                        chars: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        minus: &::dafny_runtime::DafnyCharUTF16,
                    ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>
                    {
                        if n.clone() >= ::dafny_runtime::int!(0) {
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::OfNat_any(n, chars)
                        } else {
                            ::dafny_runtime::seq![minus.clone()].concat(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::OfNat_any(&(::dafny_runtime::int!(0) - n.clone()), chars))
                        }
                    }
                    pub fn ToNat_any(
                        str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        base: &::dafny_runtime::_System::nat,
                        digits: &::dafny_runtime::Map<
                            ::dafny_runtime::DafnyCharUTF16,
                            ::dafny_runtime::_System::nat,
                        >,
                    ) -> ::dafny_runtime::_System::nat {
                        if str.clone().to_array().len() == 0 {
                            ::dafny_runtime::int!(0)
                        } else {
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::ToNat_any(&str.take(&(str.cardinality() - ::dafny_runtime::int!(1))), base, digits) * base.clone() + digits.get(&str.get(&(str.cardinality() - ::dafny_runtime::int!(1))))
                        }
                    }
                    pub fn ToInt_any(
                        str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        minus: &::dafny_runtime::DafnyCharUTF16,
                        base: &::dafny_runtime::_System::nat,
                        digits: &::dafny_runtime::Map<
                            ::dafny_runtime::DafnyCharUTF16,
                            ::dafny_runtime::_System::nat,
                        >,
                    ) -> ::dafny_runtime::DafnyInt {
                        if ::dafny_runtime::seq![minus.clone()] <= str.clone() {
                            ::dafny_runtime::int!(0) - crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::ToNat_any(&str.drop(&::dafny_runtime::int!(1)), base, digits)
                        } else {
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrConversion_Compile::_default::ToNat_any(str, base, digits)
                        }
                    }
                }
            }

            pub mod r#_CharStrEscaping_Compile {
                pub use ::dafny_runtime::DafnyPrint;
                pub use ::std::cmp::Eq;
                pub use ::std::convert::AsRef;
                pub use ::std::default::Default;
                pub use ::std::fmt::Debug;
                pub use ::std::hash::Hash;

                pub struct _default {}

                impl _default {
                    pub fn Escape(
                        str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        special: &::dafny_runtime::Set<::dafny_runtime::DafnyCharUTF16>,
                        escape: &::dafny_runtime::DafnyCharUTF16,
                    ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>
                    {
                        let mut _accumulator: ::dafny_runtime::Sequence<
                            ::dafny_runtime::DafnyCharUTF16,
                        > = ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;
                        let mut str = str.clone();
                        let mut special = special.clone();
                        let mut escape = escape.clone();
                        let mut _accumulator = _accumulator.clone();
                        'TAIL_CALL_START: loop {
                            if str.clone().to_array().len() == 0 {
                                return _accumulator.concat(&str);
                            } else {
                                if special.contains(&str.get(&::dafny_runtime::int!(0))) {
                                    _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                        escape.clone(),
                                        str.get(&::dafny_runtime::int!(0))
                                    ]);
                                    let mut _in195: ::dafny_runtime::Sequence<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = str.drop(&::dafny_runtime::int!(1));
                                    let mut _in196: ::dafny_runtime::Set<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = special.clone();
                                    let mut _in197: ::dafny_runtime::DafnyCharUTF16 =
                                        escape.clone();
                                    str = _in195.clone();
                                    special = _in196.clone();
                                    escape = _in197.clone();
                                    continue 'TAIL_CALL_START;
                                } else {
                                    _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                        str.get(&::dafny_runtime::int!(0))
                                    ]);
                                    let mut _in198: ::dafny_runtime::Sequence<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = str.drop(&::dafny_runtime::int!(1));
                                    let mut _in199: ::dafny_runtime::Set<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = special.clone();
                                    let mut _in200: ::dafny_runtime::DafnyCharUTF16 =
                                        escape.clone();
                                    str = _in198.clone();
                                    special = _in199.clone();
                                    escape = _in200.clone();
                                    continue 'TAIL_CALL_START;
                                }
                            }
                        }
                    }
                    pub fn Unescape(str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, escape: &::dafny_runtime::DafnyCharUTF16) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>>{
                        if str.clone().to_array().len() == 0 {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>::Success {
                  value: str.clone()
                })
                        } else {
                            if str.get(&::dafny_runtime::int!(0)) == escape.clone() {
                                if ::dafny_runtime::int!(1) < str.cardinality() {
                                    let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::_default::Unescape(&str.drop(&::dafny_runtime::int!(2)), escape);
                                    if valueOrError0.IsFailure() {
                                        valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<
                                            ::dafny_runtime::DafnyCharUTF16,
                                        >>()
                                    } else {
                                        let mut tl: ::dafny_runtime::Sequence<
                                            ::dafny_runtime::DafnyCharUTF16,
                                        > = valueOrError0.Extract();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>::Success {
                        value: ::dafny_runtime::seq![str.get(&::dafny_runtime::int!(1))].concat(&tl)
                      })
                                    }
                                } else {
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>::Failure {
                      error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError::EscapeAtEOS {})
                    })
                                }
                            } else {
                                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::_default::Unescape(&str.drop(&::dafny_runtime::int!(1)), escape);
                                if valueOrError1.IsFailure() {
                                    valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>()
                                } else {
                                    let mut tl: ::dafny_runtime::Sequence<
                                        ::dafny_runtime::DafnyCharUTF16,
                                    > = valueOrError1.Extract();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::r#_CharStrEscaping_Compile::UnescapeError>>::Success {
                      value: ::dafny_runtime::seq![str.get(&::dafny_runtime::int!(0))].concat(&tl)
                    })
                                }
                            }
                        }
                    }
                }

                #[derive(PartialEq, Clone)]
                pub enum UnescapeError {
                    EscapeAtEOS {},
                }

                impl UnescapeError {}

                impl Debug for UnescapeError {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                        ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                    }
                }

                impl DafnyPrint for UnescapeError {
                    fn fmt_print(
                        &self,
                        _formatter: &mut ::std::fmt::Formatter,
                        _in_seq: bool,
                    ) -> std::fmt::Result {
                        match self {
                            UnescapeError::EscapeAtEOS {} => {
                                write!(_formatter, "JSON_Compile.Utils_Compile.Str_Compile.CharStrEscaping_Compile.UnescapeError.EscapeAtEOS")?;
                                Ok(())
                            }
                        }
                    }
                }

                impl Eq for UnescapeError {}

                impl Hash for UnescapeError {
                    fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                        match self {
                            UnescapeError::EscapeAtEOS {} => {}
                        }
                    }
                }

                impl Default for UnescapeError {
                    fn default() -> UnescapeError {
                        UnescapeError::EscapeAtEOS {}
                    }
                }

                impl AsRef<UnescapeError> for &UnescapeError {
                    fn as_ref(&self) -> Self {
                        self
                    }
                }
            }
        }

        pub mod r#_Seq_Compile {}

        pub mod r#_Vectors_Compile {
            pub use ::dafny_runtime::DafnyPrint;
            pub use ::dafny_runtime::UpcastObject;
            pub use ::std::any::Any;
            pub use ::std::cmp::Eq;
            pub use ::std::convert::AsRef;
            pub use ::std::default::Default;
            pub use ::std::fmt::Debug;
            pub use ::std::hash::Hash;

            pub struct _default {}

            impl _default {
                pub fn OOM_FAILURE() -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>{
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Fail {
              error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError::OutOfMemory {})
            })
                }
            }

            #[derive(PartialEq, Clone)]
            pub enum VectorError {
                OutOfMemory {},
            }

            impl VectorError {}

            impl Debug for VectorError {
                fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                    ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
                }
            }

            impl DafnyPrint for VectorError {
                fn fmt_print(
                    &self,
                    _formatter: &mut ::std::fmt::Formatter,
                    _in_seq: bool,
                ) -> std::fmt::Result {
                    match self {
                        VectorError::OutOfMemory {} => {
                            write!(_formatter, "JSON_Compile.Utils_Compile.Vectors_Compile.VectorError.OutOfMemory")?;
                            Ok(())
                        }
                    }
                }
            }

            impl Eq for VectorError {}

            impl Hash for VectorError {
                fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                    match self {
                        VectorError::OutOfMemory {} => {}
                    }
                }
            }

            impl Default for VectorError {
                fn default() -> VectorError {
                    VectorError::OutOfMemory {}
                }
            }

            impl AsRef<VectorError> for &VectorError {
                fn as_ref(&self) -> Self {
                    self
                }
            }

            pub struct Vector<A: ::dafny_runtime::DafnyType> {
                pub size: u32,
                pub capacity: u32,
                pub data: ::dafny_runtime::Object<[A]>,
                pub r#__i_a: A,
            }

            impl<A: ::dafny_runtime::DafnyType> Vector<A> {
                pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
                    ::dafny_runtime::allocate_object::<Self>()
                }
                pub fn _ctor(
                    this: &::dafny_runtime::Object<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::Vector<A>,
                    >,
                    a0: &A,
                    initial_capacity: u32,
                ) -> () {
                    let mut _set_size: bool = false;
                    let mut _set_capacity: bool = false;
                    let mut _set_data: bool = false;
                    let mut _set__i_a: bool = false;
                    ::dafny_runtime::update_field_uninit_object!(
                        this.clone(),
                        r#__i_a,
                        _set__i_a,
                        a0.clone()
                    );
                    ::dafny_runtime::update_field_uninit_object!(this.clone(), size, _set_size, 0);
                    ::dafny_runtime::update_field_uninit_object!(
                        this.clone(),
                        capacity,
                        _set_capacity,
                        initial_capacity
                    );
                    let mut _init2: ::std::rc::Rc<
                        dyn ::std::ops::Fn(&::dafny_runtime::_System::nat) -> A,
                    > = {
                        let a0: A = a0.clone();
                        {
                            let mut a0 = a0.clone();
                            ::std::rc::Rc::new(move |_v0: &::dafny_runtime::_System::nat| -> A {
                                a0.clone()
                            })
                        }
                    };
                    let mut _nw5: ::dafny_runtime::Object<[::std::mem::MaybeUninit<A>]> =
                        ::dafny_runtime::array::placebos_usize_object::<A>(
                            ::dafny_runtime::DafnyUsize::into_usize(initial_capacity),
                        );
                    for r#__i0_2 in
                        ::dafny_runtime::integer_range(0, ::dafny_runtime::rd!(_nw5.clone()).len())
                    {
                        {
                            let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(r#__i0_2.clone());
                            ::dafny_runtime::md!(_nw5)[__idx0] = ::std::mem::MaybeUninit::new(
                                (&_init2)(&::dafny_runtime::int!(r#__i0_2.clone())),
                            );
                        }
                    }
                    ::dafny_runtime::update_field_uninit_object!(
                        this.clone(),
                        data,
                        _set_data,
                        ::dafny_runtime::array::construct_object(_nw5.clone())
                    );
                    return ();
                }
                pub fn At(&self, idx: u32) -> A {
                    ::dafny_runtime::rd!(self.data.clone())
                        [::dafny_runtime::DafnyUsize::into_usize(idx)]
                    .clone()
                }
                pub fn Top(&self) -> A {
                    ::dafny_runtime::rd!(self.data.clone())
                        [::dafny_runtime::DafnyUsize::into_usize(self.size.clone() - 1)]
                    .clone()
                }
                pub fn Put(&mut self, idx: u32, a: &A) -> () {
                    {
                        let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(idx);
                        ::dafny_runtime::md!(self.data.clone())[__idx0] = a.clone();
                    };
                    return ();
                }
                pub fn CopyFrom(
                    &mut self,
                    new_data: &::dafny_runtime::Object<[A]>,
                    count: u32,
                ) -> () {
                    let mut _hi8: u32 = count;
                    for idx in ::dafny_runtime::integer_range(0, _hi8)
                        .map(::std::convert::Into::<u32>::into)
                    {
                        {
                            let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(idx);
                            ::dafny_runtime::md!(self.data.clone())[__idx0] =
                                ::dafny_runtime::rd!(new_data)
                                    [::dafny_runtime::DafnyUsize::into_usize(idx)]
                                .clone();
                        }
                    }
                    return ();
                }
                pub fn Realloc(&mut self, new_capacity: u32) -> () {
                    let mut old_data =
                        ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[A]>>::new();
                    let mut old_capacity: u32 = <u32 as std::default::Default>::default();
                    let mut _rhs6: ::dafny_runtime::Object<[A]> = self.data.clone();
                    let mut _rhs7: u32 = self.capacity.clone();
                    old_data = ::dafny_runtime::MaybePlacebo::from(_rhs6.clone());
                    old_capacity = _rhs7;
                    let mut _init3: ::std::rc::Rc<
                        dyn ::std::ops::Fn(&::dafny_runtime::_System::nat) -> A,
                    > = {
                        let mut _this = ::dafny_runtime::Object::<_>::from_ref(self);
                        ::std::rc::Rc::new(move |_v1: &::dafny_runtime::_System::nat| -> A {
                            ::dafny_runtime::rd!(_this.clone()).a().clone()
                        })
                    };
                    let mut _nw6: ::dafny_runtime::Object<[::std::mem::MaybeUninit<A>]> =
                        ::dafny_runtime::array::placebos_usize_object::<A>(
                            ::dafny_runtime::DafnyUsize::into_usize(new_capacity),
                        );
                    for r#__i0_3 in
                        ::dafny_runtime::integer_range(0, ::dafny_runtime::rd!(_nw6.clone()).len())
                    {
                        {
                            let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(r#__i0_3.clone());
                            ::dafny_runtime::md!(_nw6)[__idx0] = ::std::mem::MaybeUninit::new(
                                (&_init3)(&::dafny_runtime::int!(r#__i0_3.clone())),
                            );
                        }
                    }
                    let mut _rhs8: ::dafny_runtime::Object<[A]> =
                        ::dafny_runtime::array::construct_object(_nw6.clone());
                    let mut _rhs9: u32 = new_capacity;
                    let mut _lhs4: ::dafny_runtime::Object<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::Vector<A>,
                    > = ::dafny_runtime::Object::<_>::from_ref(self);
                    let mut _lhs5: ::dafny_runtime::Object<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::Vector<A>,
                    > = ::dafny_runtime::Object::<_>::from_ref(self);
                    ::dafny_runtime::md!(_lhs4).data = _rhs8.clone();
                    ::dafny_runtime::md!(_lhs5).capacity = _rhs9;
                    self.CopyFrom(&old_data.read(), old_capacity);
                    return ();
                }
                pub fn DefaultNewCapacity(&self, capacity: u32) -> u32 {
                    if capacity < self.MAX_CAPACITY_BEFORE_DOUBLING().clone() {
                        2 * capacity
                    } else {
                        self.MAX_CAPACITY().clone()
                    }
                }
                pub fn ReallocDefault(&mut self) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>{
                    let mut o = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>>::new();
                    if self.capacity.clone() == self.MAX_CAPACITY().clone() {
                        o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Fail {
                    error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError::OutOfMemory {})
                  }));
                        return o.read();
                    };
                    self.Realloc(self.DefaultNewCapacity(self.capacity.clone()));
                    o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Pass {}));
                    return o.read();
                }
                pub fn Ensure(&mut self, reserved: u32) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>{
                    let mut o = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>>::new();
                    if self.MAX_CAPACITY().clone() - self.size.clone() < reserved {
                        o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Fail {
                    error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError::OutOfMemory {})
                  }));
                        return o.read();
                    };
                    if reserved <= (self.capacity.clone() - self.size.clone()) {
                        o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Pass {}));
                        return o.read();
                    };
                    let mut new_capacity: u32 = self.capacity.clone();
                    while new_capacity - self.size.clone() < reserved {
                        new_capacity = self.DefaultNewCapacity(new_capacity);
                    }
                    self.Realloc(new_capacity);
                    o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Pass {}));
                    return o.read();
                }
                pub fn PopFast(&mut self) -> () {
                    self.size = self.size.clone() - 1;
                    return ();
                }
                pub fn PushFast(&mut self, a: &A) -> () {
                    {
                        let __idx0 = ::dafny_runtime::DafnyUsize::into_usize(self.size.clone());
                        ::dafny_runtime::md!(self.data.clone())[__idx0] = a.clone();
                    };
                    self.size = self.size.clone() + 1;
                    return ();
                }
                pub fn Push(&mut self, a: &A) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>{
                    let mut o = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>>::new();
                    if self.size.clone() == self.capacity.clone() {
                        let mut d = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>>::new();
                        let mut _out23 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>>>::new();
                        _out23 = ::dafny_runtime::MaybePlacebo::from(self.ReallocDefault());
                        d = ::dafny_runtime::MaybePlacebo::from(_out23.read());
                        if matches!(
                            (&d.read()).as_ref(),
                            crate::r#_Wrappers_Compile::Outcome::Fail { .. }
                        ) {
                            o = ::dafny_runtime::MaybePlacebo::from(d.read());
                            return o.read();
                        }
                    };
                    self.PushFast(a);
                    o = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Outcome::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::VectorError>>::Pass {}));
                    return o.read();
                }
                pub fn a(&self) -> A {
                    self.r#__i_a.clone()
                }
                pub fn MAX_CAPACITY_BEFORE_DOUBLING(&self) -> u32 {
                    crate::r#_BoundedInts_Compile::_default::UINT32_MAX() / 2
                }
                pub fn MAX_CAPACITY(&self) -> u32 {
                    crate::r#_BoundedInts_Compile::_default::UINT32_MAX()
                }
            }

            impl<A: ::dafny_runtime::DafnyType> UpcastObject<dyn Any>
                for crate::r#_JSON_Compile::r#_Utils_Compile::r#_Vectors_Compile::Vector<A>
            {
                ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
            }
        }
    }

    pub mod r#_Errors_Compile {
        pub use ::dafny_runtime::DafnyPrint;
        pub use ::std::cmp::Eq;
        pub use ::std::convert::AsRef;
        pub use ::std::default::Default;
        pub use ::std::fmt::Debug;
        pub use ::std::hash::Hash;

        #[derive(PartialEq, Clone)]
        pub enum DeserializationError {
            UnterminatedSequence {},
            UnsupportedEscape {
                str: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            },
            EscapeAtEOS {},
            EmptyNumber {},
            ExpectingEOF {},
            IntOverflow {},
            ReachedEOF {},
            ExpectingByte {
                expected: u8,
                b: i16,
            },
            ExpectingAnyByte {
                expected_sq: ::dafny_runtime::Sequence<u8>,
                b: i16,
            },
            InvalidUnicode {},
        }

        impl DeserializationError {
            pub fn ToString(
                self: &::std::rc::Rc<Self>,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                let mut _source9: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                > = self.clone();
                if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::UnterminatedSequence{ .. }) {
          ::dafny_runtime::string_utf16_of("Unterminated sequence")
        } else {
          if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::UnsupportedEscape{ .. }) {
            let mut r#___mcc_h0: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = _source9.str().clone();
            let mut str: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = r#___mcc_h0.clone();
            ::dafny_runtime::string_utf16_of("Unsupported escape sequence: ").concat(&str)
          } else {
            if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::EscapeAtEOS{ .. }) {
              ::dafny_runtime::string_utf16_of("Escape character at end of string")
            } else {
              if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::EmptyNumber{ .. }) {
                ::dafny_runtime::string_utf16_of("Number must contain at least one digit")
              } else {
                if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingEOF{ .. }) {
                  ::dafny_runtime::string_utf16_of("Expecting EOF")
                } else {
                  if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::IntOverflow{ .. }) {
                    ::dafny_runtime::string_utf16_of("Input length does not fit in a 32-bit counter")
                  } else {
                    if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ReachedEOF{ .. }) {
                      ::dafny_runtime::string_utf16_of("Reached EOF")
                    } else {
                      if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingByte{ .. }) {
                        let mut r#___mcc_h1: u8 = _source9.expected().clone();
                        let mut r#___mcc_h2: i16 = _source9.b().clone();
                        let mut b: i16 = r#___mcc_h2;
                        let mut b0: u8 = r#___mcc_h1;
                        let mut c: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if 0 < b {
                            ::dafny_runtime::string_utf16_of("'").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b as u16)]).concat(&::dafny_runtime::string_utf16_of("'"))
                          } else {
                            ::dafny_runtime::string_utf16_of("EOF")
                          };
                        ::dafny_runtime::string_utf16_of("Expecting '").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b0 as u16)]).concat(&::dafny_runtime::string_utf16_of("', read ")).concat(&c)
                      } else {
                        if matches!((&_source9).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingAnyByte{ .. }) {
                          let mut r#___mcc_h3: ::dafny_runtime::Sequence<u8> = _source9.expected_sq().clone();
                          let mut r#___mcc_h4: i16 = _source9.b().clone();
                          let mut b: i16 = r#___mcc_h4;
                          let mut bs0: ::dafny_runtime::Sequence<u8> = r#___mcc_h3.clone();
                          let mut c: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = if 0 < b {
                              ::dafny_runtime::string_utf16_of("'").concat(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(b as u16)]).concat(&::dafny_runtime::string_utf16_of("'"))
                            } else {
                              ::dafny_runtime::string_utf16_of("EOF")
                            };
                          let mut c0s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = {
                              let _initializer = {
                                    let bs0: ::dafny_runtime::Sequence<u8> = bs0.clone();
                                    {
                                        let mut bs0 = bs0.clone();
                                        ::std::rc::Rc::new(move |idx: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::DafnyCharUTF16{
                                                ::dafny_runtime::DafnyCharUTF16(bs0.get(idx) as u16)
                                              })
                                      }
                                  };
                              ::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), bs0.cardinality()).map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()
                              };
                          ::dafny_runtime::string_utf16_of("Expecting one of '").concat(&c0s).concat(&::dafny_runtime::string_utf16_of("', read ")).concat(&c)
                        } else {
                          ::dafny_runtime::string_utf16_of("Invalid Unicode sequence")
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
            }
            pub fn str(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                match self {
                    DeserializationError::UnterminatedSequence {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::UnsupportedEscape { str } => str,
                    DeserializationError::EscapeAtEOS {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EmptyNumber {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::IntOverflow {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ReachedEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingByte { expected, b } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
            pub fn expected(&self) -> &u8 {
                match self {
                    DeserializationError::UnterminatedSequence {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::UnsupportedEscape { str } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EscapeAtEOS {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EmptyNumber {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::IntOverflow {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ReachedEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingByte { expected, b } => expected,
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
            pub fn b(&self) -> &i16 {
                match self {
                    DeserializationError::UnterminatedSequence {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::UnsupportedEscape { str } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EscapeAtEOS {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EmptyNumber {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::IntOverflow {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ReachedEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingByte { expected, b } => b,
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => b,
                    DeserializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
            pub fn expected_sq(&self) -> &::dafny_runtime::Sequence<u8> {
                match self {
                    DeserializationError::UnterminatedSequence {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::UnsupportedEscape { str } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EscapeAtEOS {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::EmptyNumber {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::IntOverflow {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ReachedEOF {} => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingByte { expected, b } => {
                        panic!("field does not exist on this variant")
                    }
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => expected_sq,
                    DeserializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
        }

        impl Debug for DeserializationError {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for DeserializationError {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    DeserializationError::UnterminatedSequence {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.UnterminatedSequence"
                        )?;
                        Ok(())
                    }
                    DeserializationError::UnsupportedEscape { str } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.UnsupportedEscape("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(str, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    DeserializationError::EscapeAtEOS {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.EscapeAtEOS"
                        )?;
                        Ok(())
                    }
                    DeserializationError::EmptyNumber {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.EmptyNumber"
                        )?;
                        Ok(())
                    }
                    DeserializationError::ExpectingEOF {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.ExpectingEOF"
                        )?;
                        Ok(())
                    }
                    DeserializationError::IntOverflow {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.IntOverflow"
                        )?;
                        Ok(())
                    }
                    DeserializationError::ReachedEOF {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.ReachedEOF"
                        )?;
                        Ok(())
                    }
                    DeserializationError::ExpectingByte { expected, b } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.ExpectingByte("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(expected, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.ExpectingAnyByte("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(expected_sq, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    DeserializationError::InvalidUnicode {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.DeserializationError.InvalidUnicode"
                        )?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for DeserializationError {}

        impl Hash for DeserializationError {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    DeserializationError::UnterminatedSequence {} => {}
                    DeserializationError::UnsupportedEscape { str } => {
                        ::std::hash::Hash::hash(str, _state)
                    }
                    DeserializationError::EscapeAtEOS {} => {}
                    DeserializationError::EmptyNumber {} => {}
                    DeserializationError::ExpectingEOF {} => {}
                    DeserializationError::IntOverflow {} => {}
                    DeserializationError::ReachedEOF {} => {}
                    DeserializationError::ExpectingByte { expected, b } => {
                        ::std::hash::Hash::hash(expected, _state);
                        ::std::hash::Hash::hash(b, _state)
                    }
                    DeserializationError::ExpectingAnyByte { expected_sq, b } => {
                        ::std::hash::Hash::hash(expected_sq, _state);
                        ::std::hash::Hash::hash(b, _state)
                    }
                    DeserializationError::InvalidUnicode {} => {}
                }
            }
        }

        impl Default for DeserializationError {
            fn default() -> DeserializationError {
                DeserializationError::UnterminatedSequence {}
            }
        }

        impl AsRef<DeserializationError> for &DeserializationError {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum SerializationError {
            OutOfMemory {},
            IntTooLarge {
                i: ::dafny_runtime::DafnyInt,
            },
            StringTooLong {
                s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            },
            InvalidUnicode {},
        }

        impl SerializationError {
            pub fn ToString(
                self: &::std::rc::Rc<Self>,
            ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                let mut _source10: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                > = self.clone();
                if matches!(
                    (&_source10).as_ref(),
                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::OutOfMemory { .. }
                ) {
                    ::dafny_runtime::string_utf16_of("Out of memory")
                } else {
                    if matches!((&_source10).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::IntTooLarge{ .. }) {
            let mut r#___mcc_h0: ::dafny_runtime::DafnyInt = _source10.i().clone();
            let mut i: ::dafny_runtime::DafnyInt = r#___mcc_h0.clone();
            ::dafny_runtime::string_utf16_of("Integer too large: ").concat(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(&i, &::dafny_runtime::int!(10)))
          } else {
            if matches!((&_source10).as_ref(), crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::StringTooLong{ .. }) {
              let mut r#___mcc_h1: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = _source10.s().clone();
              let mut s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = r#___mcc_h1.clone();
              ::dafny_runtime::string_utf16_of("String too long: ").concat(&s)
            } else {
              ::dafny_runtime::string_utf16_of("Invalid Unicode sequence")
            }
          }
                }
            }
            pub fn i(&self) -> &::dafny_runtime::DafnyInt {
                match self {
                    SerializationError::OutOfMemory {} => {
                        panic!("field does not exist on this variant")
                    }
                    SerializationError::IntTooLarge { i } => i,
                    SerializationError::StringTooLong { s } => {
                        panic!("field does not exist on this variant")
                    }
                    SerializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
            pub fn s(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                match self {
                    SerializationError::OutOfMemory {} => {
                        panic!("field does not exist on this variant")
                    }
                    SerializationError::IntTooLarge { i } => {
                        panic!("field does not exist on this variant")
                    }
                    SerializationError::StringTooLong { s } => s,
                    SerializationError::InvalidUnicode {} => {
                        panic!("field does not exist on this variant")
                    }
                }
            }
        }

        impl Debug for SerializationError {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for SerializationError {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    SerializationError::OutOfMemory {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.SerializationError.OutOfMemory"
                        )?;
                        Ok(())
                    }
                    SerializationError::IntTooLarge { i } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.SerializationError.IntTooLarge("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(i, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    SerializationError::StringTooLong { s } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.SerializationError.StringTooLong("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(s, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    SerializationError::InvalidUnicode {} => {
                        write!(
                            _formatter,
                            "JSON_Compile.Errors_Compile.SerializationError.InvalidUnicode"
                        )?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for SerializationError {}

        impl Hash for SerializationError {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    SerializationError::OutOfMemory {} => {}
                    SerializationError::IntTooLarge { i } => ::std::hash::Hash::hash(i, _state),
                    SerializationError::StringTooLong { s } => ::std::hash::Hash::hash(s, _state),
                    SerializationError::InvalidUnicode {} => {}
                }
            }
        }

        impl Default for SerializationError {
            fn default() -> SerializationError {
                SerializationError::OutOfMemory {}
            }
        }

        impl AsRef<SerializationError> for &SerializationError {
            fn as_ref(&self) -> Self {
                self
            }
        }
    }

    pub mod r#_Values_Compile {
        pub use ::dafny_runtime::DafnyPrint;
        pub use ::std::cmp::Eq;
        pub use ::std::convert::AsRef;
        pub use ::std::default::Default;
        pub use ::std::fmt::Debug;
        pub use ::std::hash::Hash;

        pub struct _default {}

        impl _default {
            pub fn Int(
                n: &::dafny_runtime::DafnyInt,
            ) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal> {
                ::std::rc::Rc::new(
                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal::Decimal {
                        n: n.clone(),
                        e10: ::dafny_runtime::int!(0),
                    },
                )
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum Decimal {
            Decimal {
                n: ::dafny_runtime::DafnyInt,
                e10: ::dafny_runtime::DafnyInt,
            },
        }

        impl Decimal {
            pub fn n(&self) -> &::dafny_runtime::DafnyInt {
                match self {
                    Decimal::Decimal { n, e10 } => n,
                }
            }
            pub fn e10(&self) -> &::dafny_runtime::DafnyInt {
                match self {
                    Decimal::Decimal { n, e10 } => e10,
                }
            }
        }

        impl Debug for Decimal {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for Decimal {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Decimal::Decimal { n, e10 } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.Decimal.Decimal(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(n, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(e10, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for Decimal {}

        impl Hash for Decimal {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Decimal::Decimal { n, e10 } => {
                        ::std::hash::Hash::hash(n, _state);
                        ::std::hash::Hash::hash(e10, _state)
                    }
                }
            }
        }

        impl Default for Decimal {
            fn default() -> Decimal {
                Decimal::Decimal {
                    n: ::std::default::Default::default(),
                    e10: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<Decimal> for &Decimal {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum JSON {
            Null {},
            Bool {
                b: bool,
            },
            String {
                str: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            },
            Number {
                num: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>,
            },
            Object {
                obj: ::dafny_runtime::Sequence<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                )>,
            },
            Array {
                arr: ::dafny_runtime::Sequence<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                >,
            },
        }

        impl JSON {
            pub fn b(&self) -> &bool {
                match self {
                    JSON::Null {} => panic!("field does not exist on this variant"),
                    JSON::Bool { b } => b,
                    JSON::String { str } => panic!("field does not exist on this variant"),
                    JSON::Number { num } => panic!("field does not exist on this variant"),
                    JSON::Object { obj } => panic!("field does not exist on this variant"),
                    JSON::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn str(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
                match self {
                    JSON::Null {} => panic!("field does not exist on this variant"),
                    JSON::Bool { b } => panic!("field does not exist on this variant"),
                    JSON::String { str } => str,
                    JSON::Number { num } => panic!("field does not exist on this variant"),
                    JSON::Object { obj } => panic!("field does not exist on this variant"),
                    JSON::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn num(
                &self,
            ) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal> {
                match self {
                    JSON::Null {} => panic!("field does not exist on this variant"),
                    JSON::Bool { b } => panic!("field does not exist on this variant"),
                    JSON::String { str } => panic!("field does not exist on this variant"),
                    JSON::Number { num } => num,
                    JSON::Object { obj } => panic!("field does not exist on this variant"),
                    JSON::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn obj(
                &self,
            ) -> &::dafny_runtime::Sequence<(
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            )> {
                match self {
                    JSON::Null {} => panic!("field does not exist on this variant"),
                    JSON::Bool { b } => panic!("field does not exist on this variant"),
                    JSON::String { str } => panic!("field does not exist on this variant"),
                    JSON::Number { num } => panic!("field does not exist on this variant"),
                    JSON::Object { obj } => obj,
                    JSON::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn arr(
                &self,
            ) -> &::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            > {
                match self {
                    JSON::Null {} => panic!("field does not exist on this variant"),
                    JSON::Bool { b } => panic!("field does not exist on this variant"),
                    JSON::String { str } => panic!("field does not exist on this variant"),
                    JSON::Number { num } => panic!("field does not exist on this variant"),
                    JSON::Object { obj } => panic!("field does not exist on this variant"),
                    JSON::Array { arr } => arr,
                }
            }
        }

        impl Debug for JSON {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for JSON {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    JSON::Null {} => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.Null")?;
                        Ok(())
                    }
                    JSON::Bool { b } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.Bool(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    JSON::String { str } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.String(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(str, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    JSON::Number { num } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.Number(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(num, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    JSON::Object { obj } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.Object(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(obj, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    JSON::Array { arr } => {
                        write!(_formatter, "JSON_Compile.Values_Compile.JSON.Array(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(arr, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for JSON {}

        impl Hash for JSON {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    JSON::Null {} => {}
                    JSON::Bool { b } => ::std::hash::Hash::hash(b, _state),
                    JSON::String { str } => ::std::hash::Hash::hash(str, _state),
                    JSON::Number { num } => ::std::hash::Hash::hash(num, _state),
                    JSON::Object { obj } => ::std::hash::Hash::hash(obj, _state),
                    JSON::Array { arr } => ::std::hash::Hash::hash(arr, _state),
                }
            }
        }

        impl Default for JSON {
            fn default() -> JSON {
                JSON::Null {}
            }
        }

        impl AsRef<JSON> for &JSON {
            fn as_ref(&self) -> Self {
                self
            }
        }
    }

    pub mod r#_Spec_Compile {
        pub struct _default {}

        impl _default {
            pub fn EscapeUnicode(c: u16) -> ::dafny_runtime::Sequence<u16> {
                let mut sStr: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfNat(
                        &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(c),
                        &::dafny_runtime::int!(16),
                    );
                let mut s: ::dafny_runtime::Sequence<u16> =
                    crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&sStr);
                s.concat(
                    &({
                        let _initializer = {
                            ::std::rc::Rc::new(move |_v0: &::dafny_runtime::DafnyInt| -> u16 {
                                ::dafny_runtime::DafnyCharUTF16(32 as u16).0 as u16
                            })
                        };
                        ::dafny_runtime::integer_range(
                            ::dafny_runtime::Zero::zero(),
                            ::dafny_runtime::int!(4) - s.cardinality(),
                        )
                        .map(|i| _initializer(&i))
                        .collect::<::dafny_runtime::Sequence<_>>()
                    }),
                )
            }
            pub fn Escape(
                str: &::dafny_runtime::Sequence<u16>,
                start: &::dafny_runtime::_System::nat,
            ) -> ::dafny_runtime::Sequence<u16> {
                let mut _accumulator: ::dafny_runtime::Sequence<u16> =
                    ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>;
                let mut str = str.clone();
                let mut start = start.clone();
                let mut _accumulator = _accumulator.clone();
                'TAIL_CALL_START: loop {
                    if start.clone() >= str.cardinality() {
                        return _accumulator
                            .concat(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>));
                    } else {
                        _accumulator = _accumulator.concat(&(if str.get(&start) == 34 {
                  crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\\""))
                } else {
                  if str.get(&start) == 92 {
                    crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\\\"))
                  } else {
                    if str.get(&start) == 8 {
                      crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\b"))
                    } else {
                      if str.get(&start) == 12 {
                        crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\f"))
                      } else {
                        if str.get(&start) == 10 {
                          crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\n"))
                        } else {
                          if str.get(&start) == 13 {
                            crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\r"))
                          } else {
                            if str.get(&start) == 9 {
                              crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\t"))
                            } else {
                              {
                                let r#__pat_let6_0: u16 = str.get(&start);
                                {
                                  let c: u16 = r#__pat_let6_0;
                                  if c < 31 {
                                    crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF16(&::dafny_runtime::string_utf16_of("\\u")).concat(&crate::r#_JSON_Compile::r#_Spec_Compile::_default::EscapeUnicode(c))
                                  } else {
                                    ::dafny_runtime::seq![str.get(&start)]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }));
                        let mut _in204: ::dafny_runtime::Sequence<u16> = str.clone();
                        let mut _in205: ::dafny_runtime::DafnyInt =
                            start.clone() + ::dafny_runtime::int!(1);
                        str = _in204.clone();
                        start = _in205.clone();
                        continue 'TAIL_CALL_START;
                    }
                }
            }
            pub fn EscapeToUTF8(
                str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                start: &::dafny_runtime::_System::nat,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_UnicodeStrings_Compile::_default::ToUTF16Checked(str).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::InvalidUnicode {}));
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut utf16: ::dafny_runtime::Sequence<u16> = valueOrError0.Extract();
                    let mut escaped: ::dafny_runtime::Sequence<u16> =
                        crate::r#_JSON_Compile::r#_Spec_Compile::_default::Escape(
                            &utf16,
                            &::dafny_runtime::int!(0),
                        );
                    let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_UnicodeStrings_Compile::_default::FromUTF16Checked(&escaped).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::InvalidUnicode {}));
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                    } else {
                        let mut utf32: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                            valueOrError1.Extract();
                        crate::r#_UnicodeStrings_Compile::_default::ToUTF8Checked(&utf32).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::InvalidUnicode {}))
                    }
                }
            }
            pub fn String(
                str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::EscapeToUTF8(
                    str,
                    &::dafny_runtime::int!(0),
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut inBytes: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value: crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                            &::dafny_runtime::string_utf16_of("\""),
                        )
                        .concat(&inBytes)
                        .concat(
                            &crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                &::dafny_runtime::string_utf16_of("\""),
                            ),
                        ),
                    })
                }
            }
            pub fn IntToBytes(n: &::dafny_runtime::DafnyInt) -> ::dafny_runtime::Sequence<u8> {
                let mut s: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Str_Compile::_default::OfInt(
                        n,
                        &::dafny_runtime::int!(10),
                    );
                crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(&s)
            }
            pub fn Number(
                dec: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >::Success {
                    value: crate::r#_JSON_Compile::r#_Spec_Compile::_default::IntToBytes(dec.n())
                        .concat(
                            &(if dec.e10().clone() == ::dafny_runtime::int!(0) {
                                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
                            } else {
                                crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                    &::dafny_runtime::string_utf16_of("e"),
                                )
                                .concat(
                                    &crate::r#_JSON_Compile::r#_Spec_Compile::_default::IntToBytes(
                                        dec.e10(),
                                    ),
                                )
                            }),
                        ),
                })
            }
            pub fn KeyValue(
                kv: &(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                ),
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::String(&kv.0.clone());
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut key: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::Sequence<u8>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::JSON(&kv.1.clone());
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                    } else {
                        let mut value: ::dafny_runtime::Sequence<u8> = valueOrError1.Extract();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Sequence<u8>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: key
                                .concat(&crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                    &::dafny_runtime::string_utf16_of(":"),
                                ))
                                .concat(&value),
                        })
                    }
                }
            }
            pub fn Join(
                sep: &::dafny_runtime::Sequence<u8>,
                items: &::dafny_runtime::Sequence<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::Sequence<u8>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                if items.cardinality() == ::dafny_runtime::int!(0) {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>,
                    })
                } else {
                    let mut valueOrError0: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::Sequence<u8>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    > = items.get(&::dafny_runtime::int!(0));
                    if valueOrError0.IsFailure() {
                        valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                    } else {
                        let mut first: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                        if items.cardinality() == ::dafny_runtime::int!(1) {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                ::dafny_runtime::Sequence<u8>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >::Success {
                                value: first.clone(),
                            })
                        } else {
                            let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<u8>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Spec_Compile::_default::Join(sep, &items.drop(&::dafny_runtime::int!(1)));
                            if valueOrError1.IsFailure() {
                                valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                            } else {
                                let mut rest: ::dafny_runtime::Sequence<u8> =
                                    valueOrError1.Extract();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u8>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                    value: first.concat(sep).concat(&rest)
                  })
                            }
                        }
                    }
                }
            }
            pub fn Object(
                obj: &::dafny_runtime::Sequence<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                )>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::Join(
                    &crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                        &::dafny_runtime::string_utf16_of(","),
                    ),
                    &({
                        let _initializer = {
                            let obj: ::dafny_runtime::Sequence<(
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                            )> = obj.clone();
                            {
                                let mut obj = obj.clone();
                                ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<u8>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>>{
                                crate::r#_JSON_Compile::r#_Spec_Compile::_default::KeyValue(&obj.get(i))
                              })
                            }
                        };
                        ::dafny_runtime::integer_range(
                            ::dafny_runtime::Zero::zero(),
                            obj.cardinality(),
                        )
                        .map(|i| _initializer(&i))
                        .collect::<::dafny_runtime::Sequence<_>>()
                    }),
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut middle: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value: crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                            &::dafny_runtime::string_utf16_of("{"),
                        )
                        .concat(&middle)
                        .concat(
                            &crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                &::dafny_runtime::string_utf16_of("}"),
                            ),
                        ),
                    })
                }
            }
            pub fn Array(
                arr: &::dafny_runtime::Sequence<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::Join(
                    &crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                        &::dafny_runtime::string_utf16_of(","),
                    ),
                    &({
                        let _initializer = {
                            let arr: ::dafny_runtime::Sequence<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                            > = arr.clone();
                            {
                                let mut arr = arr.clone();
                                ::std::rc::Rc::new(move |i: &::dafny_runtime::DafnyInt| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<u8>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>>{
                                crate::r#_JSON_Compile::r#_Spec_Compile::_default::JSON(&arr.get(i))
                              })
                            }
                        };
                        ::dafny_runtime::integer_range(
                            ::dafny_runtime::Zero::zero(),
                            arr.cardinality(),
                        )
                        .map(|i| _initializer(&i))
                        .collect::<::dafny_runtime::Sequence<_>>()
                    }),
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut middle: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value: crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                            &::dafny_runtime::string_utf16_of("["),
                        )
                        .concat(&middle)
                        .concat(
                            &crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                &::dafny_runtime::string_utf16_of("]"),
                            ),
                        ),
                    })
                }
            }
            pub fn JSON(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut _source11: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON> =
                    js.clone();
                if matches!(
                    (&_source11).as_ref(),
                    crate::r#_JSON_Compile::r#_Values_Compile::JSON::Null { .. }
                ) {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value: crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                            &::dafny_runtime::string_utf16_of("null"),
                        ),
                    })
                } else {
                    if matches!(
                        (&_source11).as_ref(),
                        crate::r#_JSON_Compile::r#_Values_Compile::JSON::Bool { .. }
                    ) {
                        let mut r#___mcc_h0: bool = _source11.b().clone();
                        let mut b: bool = r#___mcc_h0;
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Sequence<u8>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: if b {
                                crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                    &::dafny_runtime::string_utf16_of("true"),
                                )
                            } else {
                                crate::r#_UnicodeStrings_Compile::_default::ASCIIToUTF8(
                                    &::dafny_runtime::string_utf16_of("false"),
                                )
                            },
                        })
                    } else {
                        if matches!(
                            (&_source11).as_ref(),
                            crate::r#_JSON_Compile::r#_Values_Compile::JSON::String { .. }
                        ) {
                            let mut r#___mcc_h1: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = _source11.str().clone();
                            let mut str: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = r#___mcc_h1.clone();
                            crate::r#_JSON_Compile::r#_Spec_Compile::_default::String(&str)
                        } else {
                            if matches!(
                                (&_source11).as_ref(),
                                crate::r#_JSON_Compile::r#_Values_Compile::JSON::Number { .. }
                            ) {
                                let mut r#___mcc_h2: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                > = _source11.num().clone();
                                let mut dec: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                > = r#___mcc_h2.clone();
                                crate::r#_JSON_Compile::r#_Spec_Compile::_default::Number(&dec)
                            } else {
                                if matches!(
                                    (&_source11).as_ref(),
                                    crate::r#_JSON_Compile::r#_Values_Compile::JSON::Object { .. }
                                ) {
                                    let mut r#___mcc_h3: ::dafny_runtime::Sequence<(
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    )> = _source11.obj().clone();
                                    let mut obj: ::dafny_runtime::Sequence<(
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    )> = r#___mcc_h3.clone();
                                    crate::r#_JSON_Compile::r#_Spec_Compile::_default::Object(&obj)
                                } else {
                                    let mut r#___mcc_h4: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    > = _source11.arr().clone();
                                    let mut arr: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    > = r#___mcc_h4.clone();
                                    crate::r#_JSON_Compile::r#_Spec_Compile::_default::Array(&arr)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub mod r#_Grammar_Compile {
        pub use ::dafny_runtime::DafnyPrint;
        pub use ::std::cmp::Eq;
        pub use ::std::convert::AsRef;
        pub use ::std::default::Default;
        pub use ::std::fmt::Debug;
        pub use ::std::hash::Hash;

        pub struct _default {}

        impl _default {
            pub fn r#_Blank_q(b: u8) -> bool {
                b == 32 || b == 9 || b == 10 || b == 13
            }
            pub fn r#_Digit_q(b: u8) -> bool {
                (::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8) <= b
                    && b <= (::dafny_runtime::DafnyCharUTF16(57 as u16).0 as u8)
            }
            pub fn NULL() -> ::dafny_runtime::Sequence<u8> {
                ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(110 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(117 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(108 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(108 as u16).0 as u8
                ]
            }
            pub fn TRUE() -> ::dafny_runtime::Sequence<u8> {
                ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(116 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(114 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(117 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u8
                ]
            }
            pub fn FALSE() -> ::dafny_runtime::Sequence<u8> {
                ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(102 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(97 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(108 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(115 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u8
                ]
            }
            pub fn DOUBLEQUOTE(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(34 as u16).0 as u8])
            }
            pub fn PERIOD(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(46 as u16).0 as u8])
            }
            pub fn E(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u8])
            }
            pub fn COLON(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(58 as u16).0 as u8])
            }
            pub fn COMMA(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(44 as u16).0 as u8])
            }
            pub fn LBRACE(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(123 as u16).0 as u8])
            }
            pub fn RBRACE(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(125 as u16).0 as u8])
            }
            pub fn LBRACKET(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(91 as u16).0 as u8])
            }
            pub fn RBRACKET(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(93 as u16).0 as u8])
            }
            pub fn MINUS(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8])
            }
            pub fn EMPTY(
            ) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View
            {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>))
            }
        }

        pub type jchar = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jchar() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(98 as u16).0 as u8])
        }

        pub type jquote = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jquote() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::DOUBLEQUOTE()
        }

        pub type jperiod = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jperiod() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::PERIOD()
        }

        pub type je = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_je() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::E()
        }

        pub type jcolon = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jcolon() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::COLON()
        }

        pub type jcomma = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jcomma() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::COMMA()
        }

        pub type jlbrace = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jlbrace() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::LBRACE()
        }

        pub type jrbrace = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jrbrace() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::RBRACE()
        }

        pub type jlbracket = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jlbracket() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::LBRACKET()
        }

        pub type jrbracket = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jrbracket() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::RBRACKET()
        }

        pub type jminus = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jminus() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::MINUS()
        }

        pub type jsign = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jsign() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::EMPTY()
        }

        pub type jblanks = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jblanks() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>))
        }

        #[derive(PartialEq, Clone)]
        pub enum Structural<T: ::dafny_runtime::DafnyType> {
            Structural {
                before: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
                t: T,
                after: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
            },
        }

        impl<T: ::dafny_runtime::DafnyType> Structural<T> {
            pub fn before(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks {
                match self {
                    Structural::Structural { before, t, after } => before,
                }
            }
            pub fn t(&self) -> &T {
                match self {
                    Structural::Structural { before, t, after } => t,
                }
            }
            pub fn after(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks {
                match self {
                    Structural::Structural { before, t, after } => after,
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType> Debug for Structural<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl<T: ::dafny_runtime::DafnyType> DafnyPrint for Structural<T> {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Structural::Structural { before, t, after } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Grammar_Compile.Structural.Structural("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(before, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(t, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(after, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType> Structural<T> {
            pub fn coerce<r#__T0: ::dafny_runtime::DafnyType>(
                f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
            ) -> ::std::rc::Rc<impl ::std::ops::Fn(Structural<T>) -> Structural<r#__T0>>
            {
                ::std::rc::Rc::new(move |this: Self| -> Structural<r#__T0> {
                    match this {
                        Structural::Structural { before, t, after } => Structural::Structural {
                            before: ::dafny_runtime::upcast_id::<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
                            >()(before),
                            t: f_0.clone()(t),
                            after: ::dafny_runtime::upcast_id::<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
                            >()(after),
                        },
                    }
                })
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Eq> Eq for Structural<T> {}

        impl<T: ::dafny_runtime::DafnyType + Hash> Hash for Structural<T> {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Structural::Structural { before, t, after } => {
                        ::std::hash::Hash::hash(before, _state);
                        ::std::hash::Hash::hash(t, _state);
                        ::std::hash::Hash::hash(after, _state)
                    }
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Default> Default for Structural<T> {
            fn default() -> Structural<T> {
                Structural::Structural {
                    before: ::std::default::Default::default(),
                    t: ::std::default::Default::default(),
                    after: ::std::default::Default::default(),
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType> AsRef<Structural<T>> for &Structural<T> {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum Maybe<T: ::dafny_runtime::DafnyType> {
            Empty {},
            NonEmpty { t: T },
        }

        impl<T: ::dafny_runtime::DafnyType> Maybe<T> {
            pub fn t(&self) -> &T {
                match self {
                    Maybe::Empty {} => panic!("field does not exist on this variant"),
                    Maybe::NonEmpty { t } => t,
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType> Debug for Maybe<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl<T: ::dafny_runtime::DafnyType> DafnyPrint for Maybe<T> {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Maybe::Empty {} => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Maybe.Empty")?;
                        Ok(())
                    }
                    Maybe::NonEmpty { t } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Maybe.NonEmpty(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(t, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType> Maybe<T> {
            pub fn coerce<r#__T0: ::dafny_runtime::DafnyType>(
                f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
            ) -> ::std::rc::Rc<impl ::std::ops::Fn(Maybe<T>) -> Maybe<r#__T0>> {
                ::std::rc::Rc::new(move |this: Self| -> Maybe<r#__T0> {
                    match this {
                        Maybe::Empty {} => Maybe::Empty {},
                        Maybe::NonEmpty { t } => Maybe::NonEmpty { t: f_0.clone()(t) },
                    }
                })
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Eq> Eq for Maybe<T> {}

        impl<T: ::dafny_runtime::DafnyType + Hash> Hash for Maybe<T> {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Maybe::Empty {} => {}
                    Maybe::NonEmpty { t } => ::std::hash::Hash::hash(t, _state),
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Default> Default for Maybe<T> {
            fn default() -> Maybe<T> {
                Maybe::Empty {}
            }
        }

        impl<T: ::dafny_runtime::DafnyType> AsRef<Maybe<T>> for &Maybe<T> {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum Suffixed<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> {
            Suffixed {
                t: T,
                suffix: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<S>>,
                    >,
                >,
            },
        }

        impl<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> Suffixed<T, S> {
            pub fn t(&self) -> &T {
                match self {
                    Suffixed::Suffixed { t, suffix } => t,
                }
            }
            pub fn suffix(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<S>>,
                >,
            > {
                match self {
                    Suffixed::Suffixed { t, suffix } => suffix,
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> Debug for Suffixed<T, S> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> DafnyPrint for Suffixed<T, S> {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Suffixed::Suffixed { t, suffix } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Grammar_Compile.Suffixed.Suffixed("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(t, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(suffix, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> Suffixed<T, S> {
            pub fn coerce<
                r#__T0: ::dafny_runtime::DafnyType,
                r#__T1: ::dafny_runtime::DafnyType,
            >(
                f_0: ::std::rc::Rc<impl ::std::ops::Fn(T) -> r#__T0 + 'static>,
                f_1: ::std::rc::Rc<impl ::std::ops::Fn(S) -> r#__T1 + 'static>,
            ) -> ::std::rc::Rc<impl ::std::ops::Fn(Suffixed<T, S>) -> Suffixed<r#__T0, r#__T1>>
            {
                ::std::rc::Rc::new(move |this: Self| -> Suffixed<r#__T0, r#__T1> {
                    match this {
                        Suffixed::Suffixed { t, suffix } => Suffixed::Suffixed {
                            t: f_0.clone()(t),
                            suffix:
                                ::dafny_runtime::rc_coerce(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                                S,
                                            >,
                                        >,
                                    >::coerce(
                                        ::dafny_runtime::rc_coerce(
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<
                                                S,
                                            >::coerce(
                                                f_1.clone()
                                            ),
                                        ),
                                    ),
                                )(suffix),
                        },
                    }
                })
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Eq, S: ::dafny_runtime::DafnyType + Eq> Eq for Suffixed<T, S> {}

        impl<T: ::dafny_runtime::DafnyType + Hash, S: ::dafny_runtime::DafnyType + Hash> Hash
            for Suffixed<T, S>
        {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Suffixed::Suffixed { t, suffix } => {
                        ::std::hash::Hash::hash(t, _state);
                        ::std::hash::Hash::hash(suffix, _state)
                    }
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType + Default, S: ::dafny_runtime::DafnyType + Default>
            Default for Suffixed<T, S>
        {
            fn default() -> Suffixed<T, S> {
                Suffixed::Suffixed {
                    t: ::std::default::Default::default(),
                    suffix: ::std::default::Default::default(),
                }
            }
        }

        impl<T: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> AsRef<Suffixed<T, S>>
            for &Suffixed<T, S>
        {
            fn as_ref(&self) -> Self {
                self
            }
        }

        pub type SuffixedSequence<D: ::dafny_runtime::DafnyType, S: ::dafny_runtime::DafnyType> =
            ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<D, S>>,
            >;

        #[derive(PartialEq, Clone)]
        pub enum Bracketed<
            L: ::dafny_runtime::DafnyType,
            D: ::dafny_runtime::DafnyType,
            S: ::dafny_runtime::DafnyType,
            R: ::dafny_runtime::DafnyType,
        > {
            Bracketed {
                l: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<L>>,
                data: crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<D, S>,
                r: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<R>>,
            },
        }

        impl<
                L: ::dafny_runtime::DafnyType,
                D: ::dafny_runtime::DafnyType,
                S: ::dafny_runtime::DafnyType,
                R: ::dafny_runtime::DafnyType,
            > Bracketed<L, D, S, R>
        {
            pub fn l(
                &self,
            ) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<L>>
            {
                match self {
                    Bracketed::Bracketed { l, data, r } => l,
                }
            }
            pub fn data(
                &self,
            ) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<D, S> {
                match self {
                    Bracketed::Bracketed { l, data, r } => data,
                }
            }
            pub fn r(
                &self,
            ) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<R>>
            {
                match self {
                    Bracketed::Bracketed { l, data, r } => r,
                }
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType,
                D: ::dafny_runtime::DafnyType,
                S: ::dafny_runtime::DafnyType,
                R: ::dafny_runtime::DafnyType,
            > Debug for Bracketed<L, D, S, R>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType,
                D: ::dafny_runtime::DafnyType,
                S: ::dafny_runtime::DafnyType,
                R: ::dafny_runtime::DafnyType,
            > DafnyPrint for Bracketed<L, D, S, R>
        {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Bracketed::Bracketed { l, data, r } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Grammar_Compile.Bracketed.Bracketed("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(l, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(data, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(r, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType,
                D: ::dafny_runtime::DafnyType,
                S: ::dafny_runtime::DafnyType,
                R: ::dafny_runtime::DafnyType,
            > Bracketed<L, D, S, R>
        {
            pub fn coerce<
                r#__T0: ::dafny_runtime::DafnyType,
                r#__T1: ::dafny_runtime::DafnyType,
                r#__T2: ::dafny_runtime::DafnyType,
                r#__T3: ::dafny_runtime::DafnyType,
            >(
                f_0: ::std::rc::Rc<impl ::std::ops::Fn(L) -> r#__T0 + 'static>,
                f_1: ::std::rc::Rc<impl ::std::ops::Fn(D) -> r#__T1 + 'static>,
                f_2: ::std::rc::Rc<impl ::std::ops::Fn(S) -> r#__T2 + 'static>,
                f_3: ::std::rc::Rc<impl ::std::ops::Fn(R) -> r#__T3 + 'static>,
            ) -> ::std::rc::Rc<
                impl ::std::ops::Fn(Bracketed<L, D, S, R>) -> Bracketed<r#__T0, r#__T1, r#__T2, r#__T3>,
            > {
                ::std::rc::Rc::new(
                    move |this: Self| -> Bracketed<r#__T0, r#__T1, r#__T2, r#__T3> {
                        match this {
              Bracketed::Bracketed{l, data, r, } => {
                Bracketed::Bracketed {
                  l: ::dafny_runtime::rc_coerce(crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<L>::coerce(f_0.clone()))(l),
                  data: todo!("Could not generate coercion function for contructor 1 of Bracketed"),
                  r: ::dafny_runtime::rc_coerce(crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<R>::coerce(f_3.clone()))(r)
                }
              },
            }
                    },
                )
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType + Eq,
                D: ::dafny_runtime::DafnyType + Eq,
                S: ::dafny_runtime::DafnyType + Eq,
                R: ::dafny_runtime::DafnyType + Eq,
            > Eq for Bracketed<L, D, S, R>
        {
        }

        impl<
                L: ::dafny_runtime::DafnyType + Hash,
                D: ::dafny_runtime::DafnyType + Hash,
                S: ::dafny_runtime::DafnyType + Hash,
                R: ::dafny_runtime::DafnyType + Hash,
            > Hash for Bracketed<L, D, S, R>
        {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Bracketed::Bracketed { l, data, r } => {
                        ::std::hash::Hash::hash(l, _state);
                        ::std::hash::Hash::hash(data, _state);
                        ::std::hash::Hash::hash(r, _state)
                    }
                }
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType + Default,
                D: ::dafny_runtime::DafnyType + Default,
                S: ::dafny_runtime::DafnyType + Default,
                R: ::dafny_runtime::DafnyType + Default,
            > Default for Bracketed<L, D, S, R>
        {
            fn default() -> Bracketed<L, D, S, R> {
                Bracketed::Bracketed {
                    l: ::std::default::Default::default(),
                    data: ::std::default::Default::default(),
                    r: ::std::default::Default::default(),
                }
            }
        }

        impl<
                L: ::dafny_runtime::DafnyType,
                D: ::dafny_runtime::DafnyType,
                S: ::dafny_runtime::DafnyType,
                R: ::dafny_runtime::DafnyType,
            > AsRef<Bracketed<L, D, S, R>> for &Bracketed<L, D, S, R>
        {
            fn as_ref(&self) -> Self {
                self
            }
        }

        pub type jnull = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jnull() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::NULL())
        }

        pub type jbool = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jbool() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::TRUE())
        }

        pub type jdigits = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jdigits() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>))
        }

        pub type jnum = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jnum() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8])
        }

        pub type jint = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jint() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8])
        }

        pub type jstr = ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        >;

        pub fn r#__init_jstr() -> ::std::rc::Rc<
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_,
        > {
            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>))
        }

        #[derive(PartialEq, Clone)]
        pub enum jstring {
            JString {
                lq: crate::r#_JSON_Compile::r#_Grammar_Compile::jquote,
                contents: crate::r#_JSON_Compile::r#_Grammar_Compile::jstr,
                rq: crate::r#_JSON_Compile::r#_Grammar_Compile::jquote,
            },
        }

        impl jstring {
            pub fn lq(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jquote {
                match self {
                    jstring::JString { lq, contents, rq } => lq,
                }
            }
            pub fn contents(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jstr {
                match self {
                    jstring::JString { lq, contents, rq } => contents,
                }
            }
            pub fn rq(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jquote {
                match self {
                    jstring::JString { lq, contents, rq } => rq,
                }
            }
        }

        impl Debug for jstring {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for jstring {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    jstring::JString { lq, contents, rq } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.jstring.JString(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(lq, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(contents, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(rq, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for jstring {}

        impl Hash for jstring {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    jstring::JString { lq, contents, rq } => {
                        ::std::hash::Hash::hash(lq, _state);
                        ::std::hash::Hash::hash(contents, _state);
                        ::std::hash::Hash::hash(rq, _state)
                    }
                }
            }
        }

        impl Default for jstring {
            fn default() -> jstring {
                jstring::JString {
                    lq: ::std::default::Default::default(),
                    contents: ::std::default::Default::default(),
                    rq: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<jstring> for &jstring {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum jKeyValue {
            KeyValue {
                k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
                colon: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon,
                    >,
                >,
                v: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
            },
        }

        impl jKeyValue {
            pub fn k(&self) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring> {
                match self {
                    jKeyValue::KeyValue { k, colon, v } => k,
                }
            }
            pub fn colon(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon,
                >,
            > {
                match self {
                    jKeyValue::KeyValue { k, colon, v } => colon,
                }
            }
            pub fn v(&self) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value> {
                match self {
                    jKeyValue::KeyValue { k, colon, v } => v,
                }
            }
        }

        impl Debug for jKeyValue {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for jKeyValue {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    jKeyValue::KeyValue { k, colon, v } => {
                        write!(
                            _formatter,
                            "JSON_Compile.Grammar_Compile.jKeyValue.KeyValue("
                        )?;
                        ::dafny_runtime::DafnyPrint::fmt_print(k, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(colon, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(v, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for jKeyValue {}

        impl Hash for jKeyValue {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    jKeyValue::KeyValue { k, colon, v } => {
                        ::std::hash::Hash::hash(k, _state);
                        ::std::hash::Hash::hash(colon, _state);
                        ::std::hash::Hash::hash(v, _state)
                    }
                }
            }
        }

        impl Default for jKeyValue {
            fn default() -> jKeyValue {
                jKeyValue::KeyValue {
                    k: ::std::default::Default::default(),
                    colon: ::std::default::Default::default(),
                    v: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<jKeyValue> for &jKeyValue {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum jfrac {
            JFrac {
                period: crate::r#_JSON_Compile::r#_Grammar_Compile::jperiod,
                num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum,
            },
        }

        impl jfrac {
            pub fn period(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jperiod {
                match self {
                    jfrac::JFrac { period, num } => period,
                }
            }
            pub fn num(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jnum {
                match self {
                    jfrac::JFrac { period, num } => num,
                }
            }
        }

        impl Debug for jfrac {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for jfrac {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    jfrac::JFrac { period, num } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.jfrac.JFrac(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(period, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(num, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for jfrac {}

        impl Hash for jfrac {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    jfrac::JFrac { period, num } => {
                        ::std::hash::Hash::hash(period, _state);
                        ::std::hash::Hash::hash(num, _state)
                    }
                }
            }
        }

        impl Default for jfrac {
            fn default() -> jfrac {
                jfrac::JFrac {
                    period: ::std::default::Default::default(),
                    num: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<jfrac> for &jfrac {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum jexp {
            JExp {
                e: crate::r#_JSON_Compile::r#_Grammar_Compile::je,
                sign: crate::r#_JSON_Compile::r#_Grammar_Compile::jsign,
                num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum,
            },
        }

        impl jexp {
            pub fn e(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::je {
                match self {
                    jexp::JExp { e, sign, num } => e,
                }
            }
            pub fn sign(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jsign {
                match self {
                    jexp::JExp { e, sign, num } => sign,
                }
            }
            pub fn num(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jnum {
                match self {
                    jexp::JExp { e, sign, num } => num,
                }
            }
        }

        impl Debug for jexp {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for jexp {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    jexp::JExp { e, sign, num } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.jexp.JExp(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(e, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(sign, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(num, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for jexp {}

        impl Hash for jexp {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    jexp::JExp { e, sign, num } => {
                        ::std::hash::Hash::hash(e, _state);
                        ::std::hash::Hash::hash(sign, _state);
                        ::std::hash::Hash::hash(num, _state)
                    }
                }
            }
        }

        impl Default for jexp {
            fn default() -> jexp {
                jexp::JExp {
                    e: ::std::default::Default::default(),
                    sign: ::std::default::Default::default(),
                    num: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<jexp> for &jexp {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum jnumber {
            JNumber {
                minus: crate::r#_JSON_Compile::r#_Grammar_Compile::jminus,
                num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum,
                frac: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                    >,
                >,
                exp: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                    >,
                >,
            },
        }

        impl jnumber {
            pub fn minus(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jminus {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => minus,
                }
            }
            pub fn num(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jnum {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => num,
                }
            }
            pub fn frac(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                >,
            > {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => frac,
                }
            }
            pub fn exp(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                >,
            > {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => exp,
                }
            }
        }

        impl Debug for jnumber {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for jnumber {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.jnumber.JNumber(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(minus, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(num, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(frac, _formatter, false)?;
                        write!(_formatter, ", ")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(exp, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for jnumber {}

        impl Hash for jnumber {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    jnumber::JNumber {
                        minus,
                        num,
                        frac,
                        exp,
                    } => {
                        ::std::hash::Hash::hash(minus, _state);
                        ::std::hash::Hash::hash(num, _state);
                        ::std::hash::Hash::hash(frac, _state);
                        ::std::hash::Hash::hash(exp, _state)
                    }
                }
            }
        }

        impl Default for jnumber {
            fn default() -> jnumber {
                jnumber::JNumber {
                    minus: ::std::default::Default::default(),
                    num: ::std::default::Default::default(),
                    frac: ::std::default::Default::default(),
                    exp: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<jnumber> for &jnumber {
            fn as_ref(&self) -> Self {
                self
            }
        }

        #[derive(PartialEq, Clone)]
        pub enum Value {
            Null {
                n: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull,
            },
            Bool {
                b: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool,
            },
            String {
                str: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
            },
            Number {
                num: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
            },
            Object {
                obj: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                    >,
                >,
            },
            Array {
                arr: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                    >,
                >,
            },
        }

        impl Value {
            pub fn n(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jnull {
                match self {
                    Value::Null { n } => n,
                    Value::Bool { b } => panic!("field does not exist on this variant"),
                    Value::String { str } => panic!("field does not exist on this variant"),
                    Value::Number { num } => panic!("field does not exist on this variant"),
                    Value::Object { obj } => panic!("field does not exist on this variant"),
                    Value::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn b(&self) -> &crate::r#_JSON_Compile::r#_Grammar_Compile::jbool {
                match self {
                    Value::Null { n } => panic!("field does not exist on this variant"),
                    Value::Bool { b } => b,
                    Value::String { str } => panic!("field does not exist on this variant"),
                    Value::Number { num } => panic!("field does not exist on this variant"),
                    Value::Object { obj } => panic!("field does not exist on this variant"),
                    Value::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn str(
                &self,
            ) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring> {
                match self {
                    Value::Null { n } => panic!("field does not exist on this variant"),
                    Value::Bool { b } => panic!("field does not exist on this variant"),
                    Value::String { str } => str,
                    Value::Number { num } => panic!("field does not exist on this variant"),
                    Value::Object { obj } => panic!("field does not exist on this variant"),
                    Value::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn num(
                &self,
            ) -> &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber> {
                match self {
                    Value::Null { n } => panic!("field does not exist on this variant"),
                    Value::Bool { b } => panic!("field does not exist on this variant"),
                    Value::String { str } => panic!("field does not exist on this variant"),
                    Value::Number { num } => num,
                    Value::Object { obj } => panic!("field does not exist on this variant"),
                    Value::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn obj(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                >,
            > {
                match self {
                    Value::Null { n } => panic!("field does not exist on this variant"),
                    Value::Bool { b } => panic!("field does not exist on this variant"),
                    Value::String { str } => panic!("field does not exist on this variant"),
                    Value::Number { num } => panic!("field does not exist on this variant"),
                    Value::Object { obj } => obj,
                    Value::Array { arr } => panic!("field does not exist on this variant"),
                }
            }
            pub fn arr(
                &self,
            ) -> &::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                >,
            > {
                match self {
                    Value::Null { n } => panic!("field does not exist on this variant"),
                    Value::Bool { b } => panic!("field does not exist on this variant"),
                    Value::String { str } => panic!("field does not exist on this variant"),
                    Value::Number { num } => panic!("field does not exist on this variant"),
                    Value::Object { obj } => panic!("field does not exist on this variant"),
                    Value::Array { arr } => arr,
                }
            }
        }

        impl Debug for Value {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
            }
        }

        impl DafnyPrint for Value {
            fn fmt_print(
                &self,
                _formatter: &mut ::std::fmt::Formatter,
                _in_seq: bool,
            ) -> std::fmt::Result {
                match self {
                    Value::Null { n } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.Null(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(n, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    Value::Bool { b } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.Bool(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(b, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    Value::String { str } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.String(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(str, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    Value::Number { num } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.Number(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(num, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    Value::Object { obj } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.Object(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(obj, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                    Value::Array { arr } => {
                        write!(_formatter, "JSON_Compile.Grammar_Compile.Value.Array(")?;
                        ::dafny_runtime::DafnyPrint::fmt_print(arr, _formatter, false)?;
                        write!(_formatter, ")")?;
                        Ok(())
                    }
                }
            }
        }

        impl Eq for Value {}

        impl Hash for Value {
            fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
                match self {
                    Value::Null { n } => ::std::hash::Hash::hash(n, _state),
                    Value::Bool { b } => ::std::hash::Hash::hash(b, _state),
                    Value::String { str } => ::std::hash::Hash::hash(str, _state),
                    Value::Number { num } => ::std::hash::Hash::hash(num, _state),
                    Value::Object { obj } => ::std::hash::Hash::hash(obj, _state),
                    Value::Array { arr } => ::std::hash::Hash::hash(arr, _state),
                }
            }
        }

        impl Default for Value {
            fn default() -> Value {
                Value::Null {
                    n: ::std::default::Default::default(),
                }
            }
        }

        impl AsRef<Value> for &Value {
            fn as_ref(&self) -> Self {
                self
            }
        }
    }

    pub mod r#_Serializer_Compile {
        pub struct _default {}

        impl _default {
            pub fn Bool(b: bool) -> crate::r#_JSON_Compile::r#_Grammar_Compile::jbool {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(if b {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::TRUE()
          } else {
            crate::r#_JSON_Compile::r#_Grammar_Compile::_default::FALSE()
          }))
            }
            pub fn CheckLength<_T: ::dafny_runtime::DafnyType>(
                s: &::dafny_runtime::Sequence<_T>,
                err: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Outcome<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                crate::r#_Wrappers_Compile::_default::Need::<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >(
                    s.cardinality() < crate::r#_BoundedInts_Compile::_default::TWO_TO_THE_32(),
                    err,
                )
            }
            pub fn String(
                str: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Spec_Compile::_default::EscapeToUTF8(
                    str,
                    &::dafny_runtime::int!(0),
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>()
                } else {
                    let mut bs: ::dafny_runtime::Sequence<u8> = valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::CheckLength::<u8>(&bs, &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::StringTooLong {
                  s: str.clone()
                }));
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>()
                    } else {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jstring::JString {
                      lq: crate::r#_JSON_Compile::r#_Grammar_Compile::_default::DOUBLEQUOTE(),
                      contents: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&bs),
                      rq: crate::r#_JSON_Compile::r#_Grammar_Compile::_default::DOUBLEQUOTE()
                    })
              })
                    }
                }
            }
            pub fn Sign(
                n: &::dafny_runtime::DafnyInt,
            ) -> crate::r#_JSON_Compile::r#_Grammar_Compile::jminus {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(if n.clone() < ::dafny_runtime::int!(0) {
            ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8]
          } else {
            ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
          }))
            }
            pub fn r#_Int_k(n: &::dafny_runtime::DafnyInt) -> ::dafny_runtime::Sequence<u8> {
                crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::OfInt_any(n, &crate::r#_JSON_Compile::r#_Serializer_Compile::_default::DIGITS(), crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MINUS())
            }
            pub fn Int(n: &::dafny_runtime::DafnyInt) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>>{
                let mut bs: ::dafny_runtime::Sequence<u8> =
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::r#_Int_k(n);
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::CheckLength::<u8>(&bs, &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::IntTooLarge {
                i: n.clone()
              }));
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>()
                } else {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
              value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&bs)
            })
                }
            }
            pub fn Number(
                dec: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut minus: crate::r#_JSON_Compile::r#_Grammar_Compile::jminus =
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Sign(dec.n());
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Int(&crate::r#_Math_Compile::_default::Abs(dec.n()));
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>()
                } else {
                    let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                        valueOrError0.Extract();
                    let mut frac: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                        >,
                    > = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                    >::Empty {});
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    > = if dec.e10().clone() == ::dafny_runtime::int!(0) {
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: ::std::rc::Rc::new(
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                                >::Empty {},
                            ),
                        })
                    } else {
                        {
                            let r#__pat_let7_0: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u8]);
                            {
                                let e: crate::r#_JSON_Compile::r#_Grammar_Compile::je =
                                    r#__pat_let7_0.clone();
                                {
                                    let r#__pat_let8_0: crate::r#_JSON_Compile::r#_Grammar_Compile::jminus = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Sign(dec.e10());
                                    {
                                        let sign: crate::r#_JSON_Compile::r#_Grammar_Compile::jsign = r#__pat_let8_0.clone();
                                        {
                                            let r#__pat_let9_0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Int(&crate::r#_Math_Compile::_default::Abs(dec.e10()));
                                            {
                                                let valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = r#__pat_let9_0.clone();
                                                if valueOrError2.IsFailure() {
                                                    valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>()
                                                } else {
                                                    {
                                                        let r#__pat_let10_0: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = valueOrError2.Extract();
                                                        {
                                                            let num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum = r#__pat_let10_0.clone();
                                                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>::NonEmpty {
                                          t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jexp::JExp {
                                                e: e.clone(),
                                                sign: sign.clone(),
                                                num: num.clone()
                                              })
                                        })
                                  })
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>()
                    } else {
                        let mut exp: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                            >,
                        > = valueOrError1.Extract();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: ::std::rc::Rc::new(
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber::JNumber {
                                    minus: minus.clone(),
                                    num: num.clone(),
                                    frac: ::std::rc::Rc::new(
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac,
                                            >,
                                        >::Empty {},
                                    ),
                                    exp: exp.clone(),
                                },
                            ),
                        })
                    }
                }
            }
            pub fn MkStructural<_T: ::dafny_runtime::DafnyType>(
                v: &_T,
            ) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>>
            {
                ::std::rc::Rc::new(
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<_T>::Structural {
                        before: crate::r#_JSON_Compile::r#_Grammar_Compile::_default::EMPTY(),
                        t: v.clone(),
                        after: crate::r#_JSON_Compile::r#_Grammar_Compile::_default::EMPTY(),
                    },
                )
            }
            pub fn KeyValue(
                kv: &(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                ),
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::String(&kv.0.clone());
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>()
                } else {
                    let mut k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring> =
                        valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    > = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Value(
                        &kv.1.clone(),
                    );
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>()
                    } else {
                        let mut v: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                        > = valueOrError1.Extract();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue::KeyValue {
                      k: k.clone(),
                      colon: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::COLON(),
                      v: v.clone()
                    })
              })
                    }
                }
            }
            pub fn MkSuffixedSequence<
                _D: ::dafny_runtime::DafnyType,
                _S: ::dafny_runtime::DafnyType,
            >(
                ds: &::dafny_runtime::Sequence<_D>,
                suffix: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_S>>,
                start: &::dafny_runtime::_System::nat,
            ) -> crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<_D, _S> {
                let mut _accumulator: crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<
                    _D,
                    _S,
                > = ::dafny_runtime::seq![]
                    as ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<_D, _S>>,
                    >;
                let mut ds = ds.clone();
                let mut suffix = suffix.clone();
                let mut start = start.clone();
                let mut _accumulator = _accumulator.clone();
                'TAIL_CALL_START: loop {
                    if start.clone() >= ds.cardinality() {
                        return _accumulator.concat(
                            &(::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            _D,
                                            _S,
                                        >,
                                    >,
                                >),
                        );
                    } else {
                        if start.clone() == ds.cardinality() - ::dafny_runtime::int!(1) {
                            return _accumulator.concat(&::dafny_runtime::seq![::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<_D, _S>::Suffixed {
                        t: ds.get(&start),
                        suffix: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_S>>>::Empty {})
                      })]);
                        } else {
                            _accumulator = _accumulator.concat(&::dafny_runtime::seq![::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<_D, _S>::Suffixed {
                        t: ds.get(&start),
                        suffix: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_S>>>::NonEmpty {
                              t: suffix.clone()
                            })
                      })]);
                            let mut _in208: ::dafny_runtime::Sequence<_D> = ds.clone();
                            let mut _in209: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_S>,
                            > = suffix.clone();
                            let mut _in210: ::dafny_runtime::DafnyInt =
                                start.clone() + ::dafny_runtime::int!(1);
                            ds = _in208.clone();
                            suffix = _in209.clone();
                            start = _in210.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
            }
            pub fn Object(
                obj: &::dafny_runtime::Sequence<(
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                )>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                        >,
                    >,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                        >,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_Seq_Compile::_default::MapWithResult::<
                    (
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ),
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >(
                    {
                        let obj: ::dafny_runtime::Sequence<(
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                        )> = obj.clone();
                        &({
                            ::std::rc::Rc::new(move |v: &(::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>)| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>>{
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::KeyValue(v)
                  })
                        })
                    },
                    obj,
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                } else {
                    let mut items: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                    > = valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
              value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>::Bracketed {
                    l: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::LBRACE()),
                    data: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkSuffixedSequence::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>(&items, &crate::r#_JSON_Compile::r#_Serializer_Compile::_default::COMMA(), &::dafny_runtime::int!(0)),
                    r: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::RBRACE())
                  })
            })
                }
            }
            pub fn Array(
                arr: &::dafny_runtime::Sequence<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                        >,
                    >,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_Seq_Compile::_default::MapWithResult::<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >(
                    {
                        let arr: ::dafny_runtime::Sequence<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                        > = arr.clone();
                        &({
                            ::std::rc::Rc::new(move |v: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>>{
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Value(v)
                  })
                        })
                    },
                    arr,
                );
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                } else {
                    let mut items: ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    > = valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
              value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>::Bracketed {
                    l: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::LBRACKET()),
                    data: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkSuffixedSequence::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>(&items, &crate::r#_JSON_Compile::r#_Serializer_Compile::_default::COMMA(), &::dafny_runtime::int!(0)),
                    r: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::RBRACKET())
                  })
            })
                }
            }
            pub fn Value(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut _source12: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON> =
                    js.clone();
                if matches!(
                    (&_source12).as_ref(),
                    crate::r#_JSON_Compile::r#_Values_Compile::JSON::Null { .. }
                ) {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
              value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Null {
                    n: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::NULL())
                  })
            })
                } else {
                    if matches!(
                        (&_source12).as_ref(),
                        crate::r#_JSON_Compile::r#_Values_Compile::JSON::Bool { .. }
                    ) {
                        let mut r#___mcc_h0: bool = _source12.b().clone();
                        let mut b: bool = r#___mcc_h0;
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool {
                      b: crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Bool(b)
                    })
              })
                    } else {
                        if matches!(
                            (&_source12).as_ref(),
                            crate::r#_JSON_Compile::r#_Values_Compile::JSON::String { .. }
                        ) {
                            let mut r#___mcc_h1: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = _source12.str().clone();
                            let mut str: ::dafny_runtime::Sequence<
                                ::dafny_runtime::DafnyCharUTF16,
                            > = r#___mcc_h1.clone();
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::String(&str);
                            if valueOrError0.IsFailure() {
                                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>()
                            } else {
                                let mut s: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                > = valueOrError0.Extract();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::String {
                          str: s.clone()
                        })
                  })
                            }
                        } else {
                            if matches!(
                                (&_source12).as_ref(),
                                crate::r#_JSON_Compile::r#_Values_Compile::JSON::Number { .. }
                            ) {
                                let mut r#___mcc_h2: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                > = _source12.num().clone();
                                let mut dec: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                > = r#___mcc_h2.clone();
                                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Number(&dec);
                                if valueOrError1.IsFailure() {
                                    valueOrError1.PropagateFailure::<::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >>()
                                } else {
                                    let mut n: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    > = valueOrError1.Extract();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                      value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Number {
                            num: n.clone()
                          })
                    })
                                }
                            } else {
                                if matches!(
                                    (&_source12).as_ref(),
                                    crate::r#_JSON_Compile::r#_Values_Compile::JSON::Object { .. }
                                ) {
                                    let mut r#___mcc_h3: ::dafny_runtime::Sequence<(
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    )> = _source12.obj().clone();
                                    let mut obj: ::dafny_runtime::Sequence<(
                                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    )> = r#___mcc_h3.clone();
                                    let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Object(&obj);
                                    if valueOrError2.IsFailure() {
                                        valueOrError2.PropagateFailure::<::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                        >>()
                                    } else {
                                        let mut o: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = valueOrError2.Extract();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Object {
                              obj: o.clone()
                            })
                      })
                                    }
                                } else {
                                    let mut r#___mcc_h4: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    > = _source12.arr().clone();
                                    let mut arr: ::dafny_runtime::Sequence<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >,
                                    > = r#___mcc_h4.clone();
                                    let mut valueOrError3: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>> = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Array(&arr);
                                    if valueOrError3.IsFailure() {
                                        valueOrError3.PropagateFailure::<::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                        >>()
                                    } else {
                                        let mut a: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = valueOrError3.Extract();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Array {
                              arr: a.clone()
                            })
                      })
                                    }
                                }
                            }
                        }
                    }
                }
            }
            pub fn JSON(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::Value(js);
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >>()
                } else {
                    let mut val: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value> =
                        valueOrError0.Extract();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >::Success {
                        value:
                            crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >(&val),
                    })
                }
            }
            pub fn DIGITS() -> ::dafny_runtime::Sequence<u8> {
                ::dafny_runtime::seq![
                    ::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(49 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(50 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(51 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(52 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(53 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(54 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(55 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(56 as u16).0 as u8,
                    ::dafny_runtime::DafnyCharUTF16(57 as u16).0 as u8
                ]
            }
            pub fn MINUS() -> u8 {
                ::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8
            }
            pub fn COLON() -> ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon,
                >,
            > {
                crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::COLON())
            }
            pub fn COMMA() -> ::std::rc::Rc<
                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                >,
            > {
                crate::r#_JSON_Compile::r#_Serializer_Compile::_default::MkStructural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(&crate::r#_JSON_Compile::r#_Grammar_Compile::_default::COMMA())
            }
        }

        pub type bytes32 = ::dafny_runtime::Sequence<u8>;

        pub type string32 = ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>;

        pub mod r#_ByteStrConversion_Compile {
            pub struct _default {}

            impl _default {
                pub fn Digits(
                    n: &::dafny_runtime::_System::nat,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> {
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>
                    } else {
                        let mut r#_digits_k: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> = crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::Digits(&(::dafny_runtime::euclidian_division)(n.clone(), base.clone()), base);
                        let mut digits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                            r#_digits_k.concat(&::dafny_runtime::seq![
                                (::dafny_runtime::euclidian_modulo)(n.clone(), base.clone())
                            ]);
                        digits.clone()
                    }
                }
                pub fn OfDigits(
                    digits: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
                    chars: &::dafny_runtime::Sequence<u8>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
                    let mut digits = digits.clone();
                    let mut chars = chars.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if digits.clone().to_array().len() == 0 {
                            return _accumulator.concat(
                                &(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>),
                            );
                        } else {
                            _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                chars.get(&digits.get(&::dafny_runtime::int!(0)))
                            ]);
                            let mut _in206: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                                digits.drop(&::dafny_runtime::int!(1));
                            let mut _in207: ::dafny_runtime::Sequence<u8> = chars.clone();
                            digits = _in206.clone();
                            chars = _in207.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
                pub fn OfNat_any(
                    n: &::dafny_runtime::_System::nat,
                    chars: &::dafny_runtime::Sequence<u8>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut base: ::dafny_runtime::DafnyInt = chars.cardinality();
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![chars.get(&::dafny_runtime::int!(0))]
                    } else {
                        crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::OfDigits(&crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::Digits(n, &base), chars)
                    }
                }
                pub fn NumberStr(
                    str: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                    is_digit: &::std::rc::Rc<dyn ::std::ops::Fn(&u8) -> bool>,
                ) -> bool {
                    !(str.clone().to_array().len() != 0)
                        || (str.get(&::dafny_runtime::int!(0)) == minus
                            || is_digit(&str.get(&::dafny_runtime::int!(0))))
                            && ::dafny_runtime::itertools::Itertools::unique(
                                (&str.drop(&::dafny_runtime::int!(1))).iter(),
                            )
                            .all(
                                ({
                                    let mut str = str.clone();
                                    let mut is_digit = is_digit.clone();
                                    ::std::rc::Rc::new(move |r#__forall_var_7: u8| -> bool {
                                        let mut c: u8 = r#__forall_var_7;
                                        !str.drop(&::dafny_runtime::int!(1)).contains(&c)
                                            || (&is_digit)(&c)
                                    })
                                })
                                .as_ref(),
                            )
                }
                pub fn OfInt_any(
                    n: &::dafny_runtime::DafnyInt,
                    chars: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                ) -> ::dafny_runtime::Sequence<u8> {
                    if n.clone() >= ::dafny_runtime::int!(0) {
                        crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::OfNat_any(n, chars)
                    } else {
                        ::dafny_runtime::seq![minus].concat(&crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::OfNat_any(&(::dafny_runtime::int!(0) - n.clone()), chars))
                    }
                }
                pub fn ToNat_any(
                    str: &::dafny_runtime::Sequence<u8>,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u8, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::_System::nat {
                    if str.clone().to_array().len() == 0 {
                        ::dafny_runtime::int!(0)
                    } else {
                        crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(&str.take(&(str.cardinality() - ::dafny_runtime::int!(1))), base, digits) * base.clone() + digits.get(&str.get(&(str.cardinality() - ::dafny_runtime::int!(1))))
                    }
                }
                pub fn ToInt_any(
                    str: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u8, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::DafnyInt {
                    if ::dafny_runtime::seq![minus] <= str.clone() {
                        ::dafny_runtime::int!(0) - crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(&str.drop(&::dafny_runtime::int!(1)), base, digits)
                    } else {
                        crate::r#_JSON_Compile::r#_Serializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(str, base, digits)
                    }
                }
            }
        }
    }

    pub mod r#_Deserializer_Compile {
        pub struct _default {}

        impl _default {
            pub fn Bool(js: &crate::r#_JSON_Compile::r#_Grammar_Compile::jbool) -> bool {
                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::At(js, 0) == ::dafny_runtime::DafnyCharUTF16(116 as u16).0 as u8
            }
            pub fn UnsupportedEscape16(
                code: &::dafny_runtime::Sequence<u16>,
            ) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>
            {
                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::UnsupportedEscape {
            str: crate::r#_UnicodeStrings_Compile::_default::FromUTF16Checked(code).UnwrapOr(&::dafny_runtime::string_utf16_of("Couldn't decode UTF-16"))
          })
            }
            pub fn ToNat16(str: &::dafny_runtime::Sequence<u16>) -> u16 {
                let mut hd: ::dafny_runtime::_System::nat = crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::ToNat_any(str, &::dafny_runtime::int!(16), &crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::HEX_TABLE_16());
                ::dafny_runtime::truncate!(hd.clone(), u16)
            }
            pub fn Unescape(
                str: &::dafny_runtime::Sequence<u16>,
                start: &::dafny_runtime::_System::nat,
                prefix: &::dafny_runtime::Sequence<u16>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut str = str.clone();
                let mut start = start.clone();
                let mut prefix = prefix.clone();
                'TAIL_CALL_START: loop {
                    if start.clone() >= str.cardinality() {
                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Sequence<u16>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >::Success {
                            value: prefix.clone(),
                        });
                    } else {
                        if str.get(&start) == ::dafny_runtime::DafnyCharUTF16(92 as u16).0 as u16 {
                            if str.cardinality() == start.clone() + ::dafny_runtime::int!(1) {
                                return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Failure {
                      error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::EscapeAtEOS {})
                    });
                            } else {
                                let mut c: u16 =
                                    str.get(&(start.clone() + ::dafny_runtime::int!(1)));
                                if c == ::dafny_runtime::DafnyCharUTF16(117 as u16).0 as u16 {
                                    if str.cardinality()
                                        <= (start.clone() + ::dafny_runtime::int!(6))
                                    {
                                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Failure {
                          error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::EscapeAtEOS {})
                        });
                                    } else {
                                        let mut code: ::dafny_runtime::Sequence<u16> = str.slice(
                                            &(start.clone() + ::dafny_runtime::int!(2)),
                                            &(start.clone() + ::dafny_runtime::int!(6)),
                                        );
                                        if ::dafny_runtime::itertools::Itertools::unique((&code).iter()).any(({
                          let mut code = code.clone();
                          ::std::rc::Rc::new(move |r#__exists_var_1: u16| -> bool{
                              let mut c: u16 = r#__exists_var_1;
                              code.contains(&c) && !crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::HEX_TABLE_16().contains(&c)
                            })
                        }).as_ref()) {
                      return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Failure {
                            error: crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::UnsupportedEscape16(&code)
                          });
                    } else {
                      let mut hd: u16 = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::ToNat16(&code);
                      let mut _in215: ::dafny_runtime::Sequence<u16> = str.clone();
                      let mut _in216: ::dafny_runtime::DafnyInt = start.clone() + ::dafny_runtime::int!(6);
                      let mut _in217: ::dafny_runtime::Sequence<u16> = prefix.concat(&::dafny_runtime::seq![hd]);
                      str = _in215.clone();
                      start = _in216.clone();
                      prefix = _in217.clone();
                      continue 'TAIL_CALL_START;
                    }
                                    }
                                } else {
                                    let mut unescaped: u16 = if c == 34 {
                                        34
                                    } else {
                                        if c == 92 {
                                            92
                                        } else {
                                            if c == 98 {
                                                8
                                            } else {
                                                if c == 102 {
                                                    12
                                                } else {
                                                    if c == 110 {
                                                        10
                                                    } else {
                                                        if c == 114 {
                                                            13
                                                        } else {
                                                            if c == 116 {
                                                                9
                                                            } else {
                                                                0
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    if ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                        unescaped,
                                    ) == ::dafny_runtime::int!(0)
                                    {
                                        return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Failure {
                          error: crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::UnsupportedEscape16(&str.slice(&start, &(start.clone() + ::dafny_runtime::int!(2))))
                        });
                                    } else {
                                        let mut _in218: ::dafny_runtime::Sequence<u16> =
                                            str.clone();
                                        let mut _in219: ::dafny_runtime::DafnyInt =
                                            start.clone() + ::dafny_runtime::int!(2);
                                        let mut _in220: ::dafny_runtime::Sequence<u16> =
                                            prefix.concat(&::dafny_runtime::seq![unescaped]);
                                        str = _in218.clone();
                                        start = _in219.clone();
                                        prefix = _in220.clone();
                                        continue 'TAIL_CALL_START;
                                    }
                                }
                            }
                        } else {
                            let mut _in221: ::dafny_runtime::Sequence<u16> = str.clone();
                            let mut _in222: ::dafny_runtime::DafnyInt =
                                start.clone() + ::dafny_runtime::int!(1);
                            let mut _in223: ::dafny_runtime::Sequence<u16> =
                                prefix.concat(&::dafny_runtime::seq![str.get(&start)]);
                            str = _in221.clone();
                            start = _in222.clone();
                            prefix = _in223.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
            }
            pub fn String(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_UnicodeStrings_Compile::_default::FromUTF8Checked(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Bytes(js.contents())).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::InvalidUnicode {}));
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>()
                } else {
                    let mut asUtf32: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<u16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_UnicodeStrings_Compile::_default::ToUTF16Checked(&asUtf32).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::InvalidUnicode {}));
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>()
                    } else {
                        let mut asUint16: ::dafny_runtime::Sequence<u16> = valueOrError1.Extract();
                        let mut valueOrError2: ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::dafny_runtime::Sequence<u16>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                                >,
                            >,
                        > = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Unescape(
                            &asUint16,
                            &::dafny_runtime::int!(0),
                            &(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>),
                        );
                        if valueOrError2.IsFailure() {
                            valueOrError2.PropagateFailure::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>()
                        } else {
                            let mut unescaped: ::dafny_runtime::Sequence<u16> =
                                valueOrError2.Extract();
                            crate::r#_UnicodeStrings_Compile::_default::FromUTF16Checked(&unescaped).r#_ToResult_k::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(&::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::InvalidUnicode {}))
                        }
                    }
                }
            }
            pub fn ToInt(
                sign: &crate::r#_JSON_Compile::r#_Grammar_Compile::jsign,
                n: &crate::r#_JSON_Compile::r#_Grammar_Compile::jnum,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::DafnyInt,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut n: ::dafny_runtime::DafnyInt = crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Bytes(n), &::dafny_runtime::int!(10), &crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::DIGITS());
                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::DafnyInt, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
            value: if crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::r#_Char_q(sign, &::dafny_runtime::DafnyCharUTF16(45 as u16)) {
                ::dafny_runtime::int!(0) - n.clone()
              } else {
                n.clone()
              }
          })
            }
            pub fn Number(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut r#__let_tmp_rhs7: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                > = js.clone();
                let mut minus: crate::r#_JSON_Compile::r#_Grammar_Compile::jminus =
                    r#__let_tmp_rhs7.minus().clone();
                let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                    r#__let_tmp_rhs7.num().clone();
                let mut frac: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                    >,
                > = r#__let_tmp_rhs7.frac().clone();
                let mut exp: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                    >,
                > = r#__let_tmp_rhs7.exp().clone();
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::DafnyInt,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::ToInt(&minus, &num);
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>>()
                } else {
                    let mut n: ::dafny_runtime::DafnyInt = valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::DafnyInt,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >,
                    > = (&({
                        ::std::rc::Rc::new(move |_source13: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::DafnyInt, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>{
                  if matches!(_source13.as_ref(), crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::Empty{ .. }) {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::DafnyInt, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                        value: ::dafny_runtime::int!(0)
                      })
                  } else {
                    let mut r#___mcc_h0: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp> = _source13.t().clone();
                    let mut _source14: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp> = r#___mcc_h0.clone();
                    let mut r#___mcc_h1: crate::r#_JSON_Compile::r#_Grammar_Compile::je = _source14.e().clone();
                    let mut r#___mcc_h2: crate::r#_JSON_Compile::r#_Grammar_Compile::jsign = _source14.sign().clone();
                    let mut r#___mcc_h3: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum = _source14.num().clone();
                    let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum = r#___mcc_h3.clone();
                    let mut sign: crate::r#_JSON_Compile::r#_Grammar_Compile::jsign = r#___mcc_h2.clone();
                    crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::ToInt(&sign, &num)
                  }
                })
                    }))(&exp);
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>>()
                    } else {
                        let mut e10: ::dafny_runtime::DafnyInt = valueOrError1.Extract();
                        let mut _source15: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                            >,
                        > = frac.clone();
                        if matches!(
                            (&_source15).as_ref(),
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::Empty { .. }
                        ) {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                                >,
                            >::Success {
                                value: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal::Decimal {
                                        n: n.clone(),
                                        e10: e10.clone(),
                                    },
                                ),
                            })
                        } else {
                            let mut r#___mcc_h4: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac,
                            > = _source15.t().clone();
                            let mut _source16: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac,
                            > = r#___mcc_h4.clone();
                            let mut r#___mcc_h5: crate::r#_JSON_Compile::r#_Grammar_Compile::jperiod = _source16.period().clone();
                            let mut r#___mcc_h6: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                                _source16.num().clone();
                            let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                                r#___mcc_h6.clone();
                            let mut pow10: ::dafny_runtime::DafnyInt = ::std::convert::Into::<::dafny_runtime::DafnyInt>::into(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(&num));
                            let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::DafnyInt, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::ToInt(&minus, &num);
                            if valueOrError2.IsFailure() {
                                valueOrError2.PropagateFailure::<::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                >>()
                            } else {
                                let mut frac: ::dafny_runtime::DafnyInt = valueOrError2.Extract();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::Decimal::Decimal {
                          n: n.clone() * crate::r#_Power_Compile::_default::Pow(&::dafny_runtime::int!(10), &pow10) + frac.clone(),
                          e10: e10.clone() - pow10.clone()
                        })
                  })
                            }
                        }
                    }
                }
            }
            pub fn KeyValue(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    (
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ),
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::String(js.k());
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<(
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    )>()
                } else {
                    let mut k: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                        valueOrError0.Extract();
                    let mut valueOrError1: ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >,
                    > = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Value(js.v());
                    if valueOrError1.IsFailure() {
                        valueOrError1.PropagateFailure::<(
                            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                        )>()
                    } else {
                        let mut v: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON> =
                            valueOrError1.Extract();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                            (
                                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                            ),
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >::Success {
                            value: (k.clone(), v.clone()),
                        })
                    }
                }
            }
            pub fn Object(
                js: &::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                    >,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<(
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    )>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                crate::r#_Seq_Compile::_default::MapWithResult::<
                    ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        >,
                    >,
                    (
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ),
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >(
                    {
                        let js: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                            >,
                        > = js.clone();
                        &({
                            ::std::rc::Rc::new(move |d: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<(::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>), ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>{
                  crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::KeyValue(d.t())
                })
                        })
                    },
                    js.data(),
                )
            }
            pub fn Array(
                js: &::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                    >,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    >,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                crate::r#_Seq_Compile::_default::MapWithResult::<
                    ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        >,
                    >,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >(
                    {
                        let js: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                            >,
                        > = js.clone();
                        &({
                            ::std::rc::Rc::new(move |d: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>{
                  crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Value(d.t())
                })
                        })
                    },
                    js.data(),
                )
            }
            pub fn Value(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut _source17: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                > = js.clone();
                if matches!(
                    (&_source17).as_ref(),
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Null { .. }
                ) {
                    let mut r#___mcc_h0: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull =
                        _source17.n().clone();
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                        >,
                    >::Success {
                        value: ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Values_Compile::JSON::Null {},
                        ),
                    })
                } else {
                    if matches!(
                        (&_source17).as_ref(),
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool { .. }
                    ) {
                        let mut r#___mcc_h1: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                            _source17.b().clone();
                        let mut b: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                            r#___mcc_h1.clone();
                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::JSON::Bool {
                      b: crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Bool(&b)
                    })
              })
                    } else {
                        if matches!(
                            (&_source17).as_ref(),
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value::String { .. }
                        ) {
                            let mut r#___mcc_h2: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                            > = _source17.str().clone();
                            let mut str: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                            > = r#___mcc_h2.clone();
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::String(&str);
                            if valueOrError0.IsFailure() {
                                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>>()
                            } else {
                                let mut s: ::dafny_runtime::Sequence<
                                    ::dafny_runtime::DafnyCharUTF16,
                                > = valueOrError0.Extract();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::JSON::String {
                          str: s.clone()
                        })
                  })
                            }
                        } else {
                            if matches!(
                                (&_source17).as_ref(),
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Number { .. }
                            ) {
                                let mut r#___mcc_h3: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                > = _source17.num().clone();
                                let mut dec: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                > = r#___mcc_h3.clone();
                                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::Decimal>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Number(&dec);
                                if valueOrError1.IsFailure() {
                                    valueOrError1.PropagateFailure::<::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                    >>()
                                } else {
                                    let mut n: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Values_Compile::Decimal,
                                    > = valueOrError1.Extract();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                      value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::JSON::Number {
                            num: n.clone()
                          })
                    })
                                }
                            } else {
                                if matches!(
                                    (&_source17).as_ref(),
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Object { .. }
                                ) {
                                    let mut r#___mcc_h4: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = _source17.obj().clone();
                                    let mut obj: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = r#___mcc_h4.clone();
                                    let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<(::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>)>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Object(&obj);
                                    if valueOrError2.IsFailure() {
                                        valueOrError2.PropagateFailure::<::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >>()
                                    } else {
                                        let mut o: ::dafny_runtime::Sequence<(
                                            ::dafny_runtime::Sequence<
                                                ::dafny_runtime::DafnyCharUTF16,
                                            >,
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                            >,
                                        )> = valueOrError2.Extract();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::JSON::Object {
                              obj: o.clone()
                            })
                      })
                                    }
                                } else {
                                    let mut r#___mcc_h5: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                                        >,
                                    > = _source17.arr().clone();
                                    let mut arr: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                                        >,
                                    > = r#___mcc_h5.clone();
                                    let mut valueOrError3: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Array(&arr);
                                    if valueOrError3.IsFailure() {
                                        valueOrError3.PropagateFailure::<::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                        >>()
                                    } else {
                                        let mut a: ::dafny_runtime::Sequence<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Values_Compile::JSON,
                                            >,
                                        > = valueOrError3.Extract();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Values_Compile::JSON::Array {
                              arr: a.clone()
                            })
                      })
                                    }
                                }
                            }
                        }
                    }
                }
            }
            pub fn JSON(
                js: &::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    >,
                >,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::Value(js.t())
            }
            pub fn HEX_TABLE_16() -> ::dafny_runtime::Map<u16, ::dafny_runtime::_System::nat> {
                ::dafny_runtime::map![(::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u16) => (::dafny_runtime::int!(0)), (::dafny_runtime::DafnyCharUTF16(49 as u16).0 as u16) => (::dafny_runtime::int!(1)), (::dafny_runtime::DafnyCharUTF16(50 as u16).0 as u16) => (::dafny_runtime::int!(2)), (::dafny_runtime::DafnyCharUTF16(51 as u16).0 as u16) => (::dafny_runtime::int!(3)), (::dafny_runtime::DafnyCharUTF16(52 as u16).0 as u16) => (::dafny_runtime::int!(4)), (::dafny_runtime::DafnyCharUTF16(53 as u16).0 as u16) => (::dafny_runtime::int!(5)), (::dafny_runtime::DafnyCharUTF16(54 as u16).0 as u16) => (::dafny_runtime::int!(6)), (::dafny_runtime::DafnyCharUTF16(55 as u16).0 as u16) => (::dafny_runtime::int!(7)), (::dafny_runtime::DafnyCharUTF16(56 as u16).0 as u16) => (::dafny_runtime::int!(8)), (::dafny_runtime::DafnyCharUTF16(57 as u16).0 as u16) => (::dafny_runtime::int!(9)), (::dafny_runtime::DafnyCharUTF16(97 as u16).0 as u16) => (::dafny_runtime::int!(10)), (::dafny_runtime::DafnyCharUTF16(98 as u16).0 as u16) => (::dafny_runtime::int!(11)), (::dafny_runtime::DafnyCharUTF16(99 as u16).0 as u16) => (::dafny_runtime::int!(12)), (::dafny_runtime::DafnyCharUTF16(100 as u16).0 as u16) => (::dafny_runtime::int!(13)), (::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u16) => (::dafny_runtime::int!(14)), (::dafny_runtime::DafnyCharUTF16(102 as u16).0 as u16) => (::dafny_runtime::int!(15)), (::dafny_runtime::DafnyCharUTF16(65 as u16).0 as u16) => (::dafny_runtime::int!(10)), (::dafny_runtime::DafnyCharUTF16(66 as u16).0 as u16) => (::dafny_runtime::int!(11)), (::dafny_runtime::DafnyCharUTF16(67 as u16).0 as u16) => (::dafny_runtime::int!(12)), (::dafny_runtime::DafnyCharUTF16(68 as u16).0 as u16) => (::dafny_runtime::int!(13)), (::dafny_runtime::DafnyCharUTF16(69 as u16).0 as u16) => (::dafny_runtime::int!(14)), (::dafny_runtime::DafnyCharUTF16(70 as u16).0 as u16) => (::dafny_runtime::int!(15))]
            }
            pub fn DIGITS() -> ::dafny_runtime::Map<u8, ::dafny_runtime::DafnyInt> {
                ::dafny_runtime::map![(::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8) => (::dafny_runtime::int!(0)), (::dafny_runtime::DafnyCharUTF16(49 as u16).0 as u8) => (::dafny_runtime::int!(1)), (::dafny_runtime::DafnyCharUTF16(50 as u16).0 as u8) => (::dafny_runtime::int!(2)), (::dafny_runtime::DafnyCharUTF16(51 as u16).0 as u8) => (::dafny_runtime::int!(3)), (::dafny_runtime::DafnyCharUTF16(52 as u16).0 as u8) => (::dafny_runtime::int!(4)), (::dafny_runtime::DafnyCharUTF16(53 as u16).0 as u8) => (::dafny_runtime::int!(5)), (::dafny_runtime::DafnyCharUTF16(54 as u16).0 as u8) => (::dafny_runtime::int!(6)), (::dafny_runtime::DafnyCharUTF16(55 as u16).0 as u8) => (::dafny_runtime::int!(7)), (::dafny_runtime::DafnyCharUTF16(56 as u16).0 as u8) => (::dafny_runtime::int!(8)), (::dafny_runtime::DafnyCharUTF16(57 as u16).0 as u8) => (::dafny_runtime::int!(9))]
            }
            pub fn MINUS() -> u8 {
                ::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8
            }
        }

        pub mod r#_Uint16StrConversion_Compile {
            pub struct _default {}

            impl _default {
                pub fn Digits(
                    n: &::dafny_runtime::_System::nat,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> {
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>
                    } else {
                        let mut r#_digits_k: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> = crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::Digits(&(::dafny_runtime::euclidian_division)(n.clone(), base.clone()), base);
                        let mut digits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                            r#_digits_k.concat(&::dafny_runtime::seq![
                                (::dafny_runtime::euclidian_modulo)(n.clone(), base.clone())
                            ]);
                        digits.clone()
                    }
                }
                pub fn OfDigits(
                    digits: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
                    chars: &::dafny_runtime::Sequence<u16>,
                ) -> ::dafny_runtime::Sequence<u16> {
                    let mut _accumulator: ::dafny_runtime::Sequence<u16> =
                        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>;
                    let mut digits = digits.clone();
                    let mut chars = chars.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if digits.clone().to_array().len() == 0 {
                            return _accumulator.concat(
                                &(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u16>),
                            );
                        } else {
                            _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                chars.get(&digits.get(&::dafny_runtime::int!(0)))
                            ]);
                            let mut _in211: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                                digits.drop(&::dafny_runtime::int!(1));
                            let mut _in212: ::dafny_runtime::Sequence<u16> = chars.clone();
                            digits = _in211.clone();
                            chars = _in212.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
                pub fn OfNat_any(
                    n: &::dafny_runtime::_System::nat,
                    chars: &::dafny_runtime::Sequence<u16>,
                ) -> ::dafny_runtime::Sequence<u16> {
                    let mut base: ::dafny_runtime::DafnyInt = chars.cardinality();
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![chars.get(&::dafny_runtime::int!(0))]
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::OfDigits(&crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::Digits(n, &base), chars)
                    }
                }
                pub fn NumberStr(
                    str: &::dafny_runtime::Sequence<u16>,
                    minus: u16,
                    is_digit: &::std::rc::Rc<dyn ::std::ops::Fn(&u16) -> bool>,
                ) -> bool {
                    !(str.clone().to_array().len() != 0)
                        || (str.get(&::dafny_runtime::int!(0)) == minus
                            || is_digit(&str.get(&::dafny_runtime::int!(0))))
                            && ::dafny_runtime::itertools::Itertools::unique(
                                (&str.drop(&::dafny_runtime::int!(1))).iter(),
                            )
                            .all(
                                ({
                                    let mut str = str.clone();
                                    let mut is_digit = is_digit.clone();
                                    ::std::rc::Rc::new(move |r#__forall_var_8: u16| -> bool {
                                        let mut c: u16 = r#__forall_var_8;
                                        !str.drop(&::dafny_runtime::int!(1)).contains(&c)
                                            || (&is_digit)(&c)
                                    })
                                })
                                .as_ref(),
                            )
                }
                pub fn OfInt_any(
                    n: &::dafny_runtime::DafnyInt,
                    chars: &::dafny_runtime::Sequence<u16>,
                    minus: u16,
                ) -> ::dafny_runtime::Sequence<u16> {
                    if n.clone() >= ::dafny_runtime::int!(0) {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::OfNat_any(n, chars)
                    } else {
                        ::dafny_runtime::seq![minus].concat(&crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::OfNat_any(&(::dafny_runtime::int!(0) - n.clone()), chars))
                    }
                }
                pub fn ToNat_any(
                    str: &::dafny_runtime::Sequence<u16>,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u16, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::_System::nat {
                    if str.clone().to_array().len() == 0 {
                        ::dafny_runtime::int!(0)
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::ToNat_any(&str.take(&(str.cardinality() - ::dafny_runtime::int!(1))), base, digits) * base.clone() + digits.get(&str.get(&(str.cardinality() - ::dafny_runtime::int!(1))))
                    }
                }
                pub fn ToInt_any(
                    str: &::dafny_runtime::Sequence<u16>,
                    minus: u16,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u16, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::DafnyInt {
                    if ::dafny_runtime::seq![minus] <= str.clone() {
                        ::dafny_runtime::int!(0) - crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::ToNat_any(&str.drop(&::dafny_runtime::int!(1)), base, digits)
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_Uint16StrConversion_Compile::_default::ToNat_any(str, base, digits)
                    }
                }
            }
        }

        pub mod r#_ByteStrConversion_Compile {
            pub struct _default {}

            impl _default {
                pub fn Digits(
                    n: &::dafny_runtime::_System::nat,
                    base: &::dafny_runtime::DafnyInt,
                ) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> {
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![]
                            as ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>
                    } else {
                        let mut r#_digits_k: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> = crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::Digits(&(::dafny_runtime::euclidian_division)(n.clone(), base.clone()), base);
                        let mut digits: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                            r#_digits_k.concat(&::dafny_runtime::seq![
                                (::dafny_runtime::euclidian_modulo)(n.clone(), base.clone())
                            ]);
                        digits.clone()
                    }
                }
                pub fn OfDigits(
                    digits: &::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
                    chars: &::dafny_runtime::Sequence<u8>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
                    let mut digits = digits.clone();
                    let mut chars = chars.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if digits.clone().to_array().len() == 0 {
                            return _accumulator.concat(
                                &(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>),
                            );
                        } else {
                            _accumulator = _accumulator.concat(&::dafny_runtime::seq![
                                chars.get(&digits.get(&::dafny_runtime::int!(0)))
                            ]);
                            let mut _in213: ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt> =
                                digits.drop(&::dafny_runtime::int!(1));
                            let mut _in214: ::dafny_runtime::Sequence<u8> = chars.clone();
                            digits = _in213.clone();
                            chars = _in214.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
                pub fn OfNat_any(
                    n: &::dafny_runtime::_System::nat,
                    chars: &::dafny_runtime::Sequence<u8>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut base: ::dafny_runtime::DafnyInt = chars.cardinality();
                    if n.clone() == ::dafny_runtime::int!(0) {
                        ::dafny_runtime::seq![chars.get(&::dafny_runtime::int!(0))]
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::OfDigits(&crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::Digits(n, &base), chars)
                    }
                }
                pub fn NumberStr(
                    str: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                    is_digit: &::std::rc::Rc<dyn ::std::ops::Fn(&u8) -> bool>,
                ) -> bool {
                    !(str.clone().to_array().len() != 0)
                        || (str.get(&::dafny_runtime::int!(0)) == minus
                            || is_digit(&str.get(&::dafny_runtime::int!(0))))
                            && ::dafny_runtime::itertools::Itertools::unique(
                                (&str.drop(&::dafny_runtime::int!(1))).iter(),
                            )
                            .all(
                                ({
                                    let mut str = str.clone();
                                    let mut is_digit = is_digit.clone();
                                    ::std::rc::Rc::new(move |r#__forall_var_9: u8| -> bool {
                                        let mut c: u8 = r#__forall_var_9;
                                        !str.drop(&::dafny_runtime::int!(1)).contains(&c)
                                            || (&is_digit)(&c)
                                    })
                                })
                                .as_ref(),
                            )
                }
                pub fn OfInt_any(
                    n: &::dafny_runtime::DafnyInt,
                    chars: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                ) -> ::dafny_runtime::Sequence<u8> {
                    if n.clone() >= ::dafny_runtime::int!(0) {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::OfNat_any(n, chars)
                    } else {
                        ::dafny_runtime::seq![minus].concat(&crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::OfNat_any(&(::dafny_runtime::int!(0) - n.clone()), chars))
                    }
                }
                pub fn ToNat_any(
                    str: &::dafny_runtime::Sequence<u8>,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u8, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::_System::nat {
                    if str.clone().to_array().len() == 0 {
                        ::dafny_runtime::int!(0)
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(&str.take(&(str.cardinality() - ::dafny_runtime::int!(1))), base, digits) * base.clone() + digits.get(&str.get(&(str.cardinality() - ::dafny_runtime::int!(1))))
                    }
                }
                pub fn ToInt_any(
                    str: &::dafny_runtime::Sequence<u8>,
                    minus: u8,
                    base: &::dafny_runtime::_System::nat,
                    digits: &::dafny_runtime::Map<u8, ::dafny_runtime::_System::nat>,
                ) -> ::dafny_runtime::DafnyInt {
                    if ::dafny_runtime::seq![minus] <= str.clone() {
                        ::dafny_runtime::int!(0) - crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(&str.drop(&::dafny_runtime::int!(1)), base, digits)
                    } else {
                        crate::r#_JSON_Compile::r#_Deserializer_Compile::r#_ByteStrConversion_Compile::_default::ToNat_any(str, base, digits)
                    }
                }
            }
        }
    }

    pub mod r#_ConcreteSyntax_Compile {
        pub mod r#_Spec_Compile {
            pub struct _default {}

            impl _default {
                pub fn View(
                    v: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Bytes(v)
                }
                pub fn Structural<_T: ::dafny_runtime::DafnyType>(
                    r#_self: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>,
                    >,
                    fT: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> ::dafny_runtime::Sequence<u8>>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.before()).concat(&fT(r#_self.t())).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.after()))
                }
                pub fn StructuralView(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>(r#_self, &(::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>))
                }
                pub fn Maybe<_T: ::dafny_runtime::DafnyType>(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<_T>>,
                    fT: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> ::dafny_runtime::Sequence<u8>>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    if matches!(
                        r#_self.as_ref(),
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::Empty { .. }
                    ) {
                        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>
                    } else {
                        fT(r#_self.t())
                    }
                }
                pub fn ConcatBytes<_T: ::dafny_runtime::DafnyType>(
                    ts: &::dafny_runtime::Sequence<_T>,
                    fT: &::std::rc::Rc<dyn ::std::ops::Fn(&_T) -> ::dafny_runtime::Sequence<u8>>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut _accumulator: ::dafny_runtime::Sequence<u8> =
                        ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>;
                    let mut ts = ts.clone();
                    let mut fT = fT.clone();
                    let mut _accumulator = _accumulator.clone();
                    'TAIL_CALL_START: loop {
                        if ts.cardinality() == ::dafny_runtime::int!(0) {
                            return _accumulator.concat(
                                &(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>),
                            );
                        } else {
                            _accumulator =
                                _accumulator.concat(&(&fT)(&ts.get(&::dafny_runtime::int!(0))));
                            let mut _in224: ::dafny_runtime::Sequence<_T> =
                                ts.drop(&::dafny_runtime::int!(1));
                            let mut _in225: ::std::rc::Rc<
                                dyn ::std::ops::Fn(&_T) -> ::dafny_runtime::Sequence<u8>,
                            > = fT.clone();
                            ts = _in224.clone();
                            fT = _in225.clone();
                            continue 'TAIL_CALL_START;
                        }
                    }
                }
                pub fn Bracketed<_D: ::dafny_runtime::DafnyType, _S: ::dafny_runtime::DafnyType>(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View, _D, _S, crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>,
                    fDatum: &::std::rc::Rc<
                        dyn ::std::ops::Fn(
                            &::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<_D, _S>,
                            >,
                        )
                            -> ::dafny_runtime::Sequence<u8>,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::StructuralView(r#_self.l()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::ConcatBytes::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<_D, _S>>>(r#_self.data(), fDatum)).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::StructuralView(r#_self.r()))
                }
                pub fn KeyValue(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::String(r#_self.k()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::StructuralView(r#_self.colon())).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Value(r#_self.v()))
                }
                pub fn Frac(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.period()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.num()))
                }
                pub fn Exp(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.e()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.sign())).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.num()))
                }
                pub fn Number(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.minus()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.num())).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>(r#_self.frac(), &(::std::rc::Rc::new(|x0: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>| crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Frac(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>))).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>(r#_self.exp(), &(::std::rc::Rc::new(|x0: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>| crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Exp(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>)))
                }
                pub fn String(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.lq()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.contents())).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(r#_self.rq()))
                }
                pub fn CommaSuffix(
                    c: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                >,
                            >,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>(c, &(::std::rc::Rc::new(|x0: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>| crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::StructuralView(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>))
                }
                pub fn Member(
                    r#_self: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::KeyValue(r#_self.t()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::CommaSuffix(r#_self.suffix()))
                }
                pub fn Item(
                    r#_self: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Value(r#_self.t()).concat(&crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::CommaSuffix(r#_self.suffix()))
                }
                pub fn Object(
                    obj: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Bracketed::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>(obj, {
              let obj: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = obj.clone();
              &({
                ::std::rc::Rc::new(move |d: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>| -> ::dafny_runtime::Sequence<u8>{
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Member(d)
                  })
              })
            })
                }
                pub fn Array(
                    arr: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Bracketed::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>(arr, {
              let arr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = arr.clone();
              &({
                ::std::rc::Rc::new(move |d: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>| -> ::dafny_runtime::Sequence<u8>{
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Item(d)
                  })
              })
            })
                }
                pub fn Value(
                    r#_self: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                ) -> ::dafny_runtime::Sequence<u8> {
                    let mut _source18: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                    > = r#_self.clone();
                    if matches!(
                        (&_source18).as_ref(),
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Null { .. }
                    ) {
                        let mut r#___mcc_h0: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull =
                            _source18.n().clone();
                        let mut n: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull =
                            r#___mcc_h0.clone();
                        crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(&n)
                    } else {
                        if matches!(
                            (&_source18).as_ref(),
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool { .. }
                        ) {
                            let mut r#___mcc_h1: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                                _source18.b().clone();
                            let mut b: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                                r#___mcc_h1.clone();
                            crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(&b)
                        } else {
                            if matches!(
                                (&_source18).as_ref(),
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value::String { .. }
                            ) {
                                let mut r#___mcc_h2: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                > = _source18.str().clone();
                                let mut str: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                > = r#___mcc_h2.clone();
                                crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::String(&str)
                            } else {
                                if matches!(
                                    (&_source18).as_ref(),
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Number { .. }
                                ) {
                                    let mut r#___mcc_h3: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    > = _source18.num().clone();
                                    let mut num: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    > = r#___mcc_h3.clone();
                                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Number(&num)
                                } else {
                                    if matches!(
                                        (&_source18).as_ref(),
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Object { .. }
                                    ) {
                                        let mut r#___mcc_h4: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = _source18.obj().clone();
                                        let mut obj: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = r#___mcc_h4.clone();
                                        crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Object(&obj)
                                    } else {
                                        let mut r#___mcc_h5: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = _source18.arr().clone();
                                        let mut arr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = r#___mcc_h5.clone();
                                        crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Array(&arr)
                                    }
                                }
                            }
                        }
                    }
                }
                pub fn JSON(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                ) -> ::dafny_runtime::Sequence<u8> {
                    crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Structural::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>(js, &(::std::rc::Rc::new(|x0: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>| crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Value(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>))
                }
            }
        }

        pub mod r#_SpecProperties_Compile {}
    }

    pub mod r#_ZeroCopy_Compile {
        pub mod r#_Serializer_Compile {
            pub struct _default {}

            impl _default {
                pub fn Serialize(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Object<[u8]>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > {
                    let mut rbs = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::dafny_runtime::Object<[u8]>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    let mut writer: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Text(js);
                    let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Outcome<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    valueOrError0 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(writer.r#_Unsaturated_q().clone(), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::OutOfMemory {})));
                    if valueOrError0.read().IsFailure() {
                        rbs = ::dafny_runtime::MaybePlacebo::from(
                            valueOrError0
                                .read()
                                .PropagateFailure::<::dafny_runtime::Object<[u8]>>(),
                        );
                        return rbs.read();
                    };
                    let mut bs =
                        ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[u8]>>::new();
                    let mut _out24 =
                        ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<[u8]>>::new();
                    _out24 = ::dafny_runtime::MaybePlacebo::from(writer.ToArray());
                    bs = ::dafny_runtime::MaybePlacebo::from(_out24.read());
                    rbs = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                        crate::r#_Wrappers_Compile::Result::<
                            ::dafny_runtime::Object<[u8]>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: bs.read(),
                        },
                    ));
                    return rbs.read();
                }
                pub fn SerializeTo(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                    dest: &::dafny_runtime::Object<[u8]>,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u32,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > {
                    let mut len = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                u32,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    let mut writer: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Text(js);
                    let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Outcome<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    valueOrError0 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(writer.r#_Unsaturated_q().clone(), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::OutOfMemory {})));
                    if valueOrError0.read().IsFailure() {
                        len = ::dafny_runtime::MaybePlacebo::from(
                            valueOrError0.read().PropagateFailure::<u32>(),
                        );
                        return len.read();
                    };
                    let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Outcome<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    valueOrError1 = ::dafny_runtime::MaybePlacebo::from(crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>(::std::convert::Into::<::dafny_runtime::DafnyInt>::into(writer.length().clone()) <= ::dafny_runtime::int!(::dafny_runtime::rd!(dest.clone()).len()), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError::OutOfMemory {})));
                    if valueOrError1.read().IsFailure() {
                        len = ::dafny_runtime::MaybePlacebo::from(
                            valueOrError1.read().PropagateFailure::<u32>(),
                        );
                        return len.read();
                    };
                    writer.CopyTo(dest);
                    len = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                        crate::r#_Wrappers_Compile::Result::<
                            u32,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >::Success {
                            value: writer.length().clone(),
                        },
                    ));
                    return len.read();
                }
                pub fn Text(js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::JSON(js, &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Empty())
                }
                pub fn JSON(js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Then(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, js.before()), {
                let js: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = js.clone();
                &({
                  let mut js = js.clone();
                  ::std::rc::Rc::new(move |wr: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer| -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                      crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Value(js.t(), wr)
                    })
                })
              }), js.after())
                }
                pub fn Value(v: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut _source19: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                    > = v.clone();
                    if matches!(
                        (&_source19).as_ref(),
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Null { .. }
                    ) {
                        let mut r#___mcc_h0: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull =
                            _source19.n().clone();
                        let mut n: crate::r#_JSON_Compile::r#_Grammar_Compile::jnull =
                            r#___mcc_h0.clone();
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, &n)
                    } else {
                        if matches!(
                            (&_source19).as_ref(),
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool { .. }
                        ) {
                            let mut r#___mcc_h1: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                                _source19.b().clone();
                            let mut b: crate::r#_JSON_Compile::r#_Grammar_Compile::jbool =
                                r#___mcc_h1.clone();
                            let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, &b);
                            wr.clone()
                        } else {
                            if matches!(
                                (&_source19).as_ref(),
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value::String { .. }
                            ) {
                                let mut r#___mcc_h2: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                > = _source19.str().clone();
                                let mut str: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                > = r#___mcc_h2.clone();
                                let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::String(&str, writer);
                                wr.clone()
                            } else {
                                if matches!(
                                    (&_source19).as_ref(),
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Number { .. }
                                ) {
                                    let mut r#___mcc_h3: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    > = _source19.num().clone();
                                    let mut num: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    > = r#___mcc_h3.clone();
                                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Number(&num, writer);
                                    wr.clone()
                                } else {
                                    if matches!(
                                        (&_source19).as_ref(),
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Object { .. }
                                    ) {
                                        let mut r#___mcc_h4: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = _source19.obj().clone();
                                        let mut obj: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>> = r#___mcc_h4.clone();
                                        let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Object(&obj, writer);
                                        wr.clone()
                                    } else {
                                        let mut r#___mcc_h5: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = _source19.arr().clone();
                                        let mut arr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>> = r#___mcc_h5.clone();
                                        let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Array(&arr, writer);
                                        wr.clone()
                                    }
                                }
                            }
                        }
                    }
                }
                pub fn String(str: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, str.lq()), str.contents()), str.rq())
                }
                pub fn Number(num: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, num.minus()), num.num());
                    let mut wr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = if matches!(num.frac().as_ref(), crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::NonEmpty{ .. }) {
              crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&wr, num.frac().t().period()), num.frac().t().num())
            } else {
              wr.clone()
            };
                    let mut wr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = if matches!(num.exp().as_ref(), crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::NonEmpty{ .. }) {
              crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&wr.Append(num.exp().t().e()), num.exp().t().sign()), num.exp().t().num())
            } else {
              wr.clone()
            };
                    wr.clone()
                }
                pub fn StructuralView(st: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Append(writer, st.before()), st.t()), st.after())
                }
                pub fn Object(obj: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(obj.l(), writer);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Members(obj, &wr);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(obj.r(), &wr);
                    wr.clone()
                }
                pub fn Array(arr: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(arr.l(), writer);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Items(arr, &wr);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(arr.r(), &wr);
                    wr.clone()
                }
                pub fn Members(obj: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: 0,
                chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
              });
                    let mut _out25 = ::dafny_runtime::MaybePlacebo::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer>::new();
                    _out25 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::MembersImpl(obj, writer));
                    wr = _out25.read();
                    return wr.clone();
                }
                pub fn Items(arr: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: 0,
                chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
              });
                    let mut _out26 = ::dafny_runtime::MaybePlacebo::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer>::new();
                    _out26 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::ItemsImpl(arr, writer));
                    wr = _out26.read();
                    return wr.clone();
                }
                pub fn MembersImpl(obj: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: 0,
                chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
              });
                    wr = writer.clone();
                    let mut members: crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                    > = obj.data().clone();
                    let mut _hi9: ::dafny_runtime::DafnyInt = members.cardinality();
                    for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi9.clone())
                    {
                        wr = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Member(&members.get(&i), &wr);
                    }
                    return wr.clone();
                }
                pub fn ItemsImpl(arr: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Writer {
                length: 0,
                chain: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Chain::Empty {})
              });
                    wr = writer.clone();
                    let mut items: crate::r#_JSON_Compile::r#_Grammar_Compile::SuffixedSequence<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                    > = arr.data().clone();
                    let mut _hi10: ::dafny_runtime::DafnyInt = items.cardinality();
                    for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi10.clone())
                    {
                        wr = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Item(&items.get(&i), &wr);
                    }
                    return wr.clone();
                }
                pub fn Member(m: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::String(m.t().k(), writer);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(m.t().colon(), &wr);
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Value(m.t().v(), &wr);
                    let mut wr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = if matches!(m.suffix().as_ref(), crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::Empty{ .. }) {
              wr.clone()
            } else {
              crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(m.suffix().t(), &wr)
            };
                    wr.clone()
                }
                pub fn Item(m: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>, writer: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer) -> crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer{
                    let mut wr: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Value(m.t(), writer);
                    let mut wr: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_> = if matches!(m.suffix().as_ref(), crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::Empty{ .. }) {
              wr.clone()
            } else {
              crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::StructuralView(m.suffix().t(), &wr)
            };
                    wr.clone()
                }
            }
        }

        pub mod r#_Deserializer_Compile {
            pub mod r#_Core_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Get(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, err: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jchar>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Get::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, err);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn WS(
                        cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
                        >,
                    > {
                        let mut sp = ::dafny_runtime::MaybePlacebo::<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks,
                                >,
                            >,
                        >::new();
                        let mut r#_point_k: u32 = cs.point().clone();
                        let mut end: u32 = cs.end().clone();
                        while r#_point_k < end
                            && crate::r#_JSON_Compile::r#_Grammar_Compile::_default::r#_Blank_q(
                                cs.s().get(
                                    &::std::convert::Into::<::dafny_runtime::DafnyInt>::into(
                                        r#_point_k,
                                    ),
                                ),
                            )
                        {
                            r#_point_k = r#_point_k + 1;
                        }
                        sp = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                    s: cs.s().clone(),
                    beg: cs.beg().clone(),
                    point: r#_point_k,
                    end: cs.end().clone()
                  }).Split());
                        return sp.read();
                    }
                    pub fn Structural<_T: ::dafny_runtime::DafnyType>(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, parser: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser<_T, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut r#__let_tmp_rhs8: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::WS(cs);
                        let mut before: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks =
                            r#__let_tmp_rhs8.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs8.cs().clone();
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<_T>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = parser.r#fn()(&cs);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>,
                                    >,
                                >,
                            >>()
                        } else {
                            let mut r#__let_tmp_rhs9: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    _T,
                                >,
                            > = valueOrError0.Extract();
                            let mut val: _T = r#__let_tmp_rhs9.t().clone();
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs9.cs().clone();
                            let mut r#__let_tmp_rhs10: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::WS(&cs);
                            let mut after: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks =
                                r#__let_tmp_rhs10.t().clone();
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs10.cs().clone();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<_T>>>::SP {
                        t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<_T>::Structural {
                              before: before.clone(),
                              t: val.clone(),
                              after: after.clone()
                            }),
                        cs: cs.clone()
                      })
                })
                        }
                    }
                    pub fn TryStructural(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::jopt>>>>{
                        let mut r#__let_tmp_rhs11: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::WS(cs);
                        let mut before: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks =
                            r#__let_tmp_rhs11.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs11.cs().clone();
                        let mut r#__let_tmp_rhs12: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipByte(&cs));
                        let mut val: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs12.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs12.cs().clone();
                        let mut r#__let_tmp_rhs13: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::WS(&cs);
                        let mut after: crate::r#_JSON_Compile::r#_Grammar_Compile::jblanks =
                            r#__let_tmp_rhs13.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs13.cs().clone();
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>::SP {
                t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Structural::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>::Structural {
                      before: before.clone(),
                      t: val.clone(),
                      after: after.clone()
                    }),
                cs: cs.clone()
              })
                    }
                    pub fn SpecView() -> ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View) -> ::dafny_runtime::Sequence<u8>>{
                        {
                            ::std::rc::Rc::new(move |v: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| -> ::dafny_runtime::Sequence<u8>{
                  crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::View(v)
                })
                        }
                    }
                }

                pub type jopt = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_jopt() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&(::dafny_runtime::seq![] as ::dafny_runtime::Sequence<u8>))
                }

                pub type ValueParser = ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                        >,
                    >,
                >;
            }

            pub mod r#_Strings_Compile {
                pub struct _default {}

                impl _default {
                    pub fn StringBody(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut pr = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>>::new();
                        let mut escaped: bool = false;
                        let mut _hi11: u32 = cs.end().clone();
                        for r#_point_k in ::dafny_runtime::integer_range(cs.point().clone(), _hi11)
                            .map(::std::convert::Into::<u32>::into)
                        {
                            let mut byte: u8 = cs.s().get(&::std::convert::Into::<
                                ::dafny_runtime::DafnyInt,
                            >::into(
                                r#_point_k
                            ));
                            if byte == ::dafny_runtime::DafnyCharUTF16(34 as u16).0 as u8
                                && !escaped
                            {
                                pr = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Cursor {
                              s: cs.s().clone(),
                              beg: cs.beg().clone(),
                              point: r#_point_k,
                              end: cs.end().clone()
                            })
                      }));
                                return pr.read();
                            } else {
                                if byte == ::dafny_runtime::DafnyCharUTF16(92 as u16).0 as u8 {
                                    escaped = !escaped;
                                } else {
                                    escaped = false;
                                }
                            }
                        }
                        pr = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Failure {
                    error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::EOF {})
                  }));
                        return pr.read();
                    }
                    pub fn Quote(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jquote>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertChar::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, &::dafny_runtime::DafnyCharUTF16(34 as u16));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn String(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jquote>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Strings_Compile::_default::Quote(cs);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                    >,
                                >,
                            >>()
                        } else {
                            let mut r#__let_tmp_rhs14: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jquote,
                                >,
                            > = valueOrError0.Extract();
                            let mut lq: crate::r#_JSON_Compile::r#_Grammar_Compile::jquote =
                                r#__let_tmp_rhs14.t().clone();
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs14.cs().clone();
                            let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Strings_Compile::_default::StringBody(&cs);
                            if valueOrError1.IsFailure() {
                                valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>>()
                            } else {
                                let mut contents: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError1.Extract();
                                let mut r#__let_tmp_rhs15: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&contents);
                                let mut contents: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs15.t().clone();
                                let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs15.cs().clone();
                                let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jquote>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Strings_Compile::_default::Quote(&cs);
                                if valueOrError2.IsFailure() {
                                    valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>>()
                                } else {
                                    let mut r#__let_tmp_rhs16: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jquote>> = valueOrError2.Extract();
                                    let mut rq: crate::r#_JSON_Compile::r#_Grammar_Compile::jquote =
                                        r#__let_tmp_rhs16.t().clone();
                                    let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs16.cs().clone();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>::SP {
                            t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jstring::JString {
                                  lq: lq.clone(),
                                  contents: contents.clone(),
                                  rq: rq.clone()
                                }),
                            cs: cs.clone()
                          })
                    })
                                }
                            }
                        }
                    }
                }
            }

            pub mod r#_Numbers_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Digits(
                        cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jdigits,
                        >,
                    > {
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipWhile(cs, &(::std::rc::Rc::new(|x0: &u8| crate::r#_JSON_Compile::r#_Grammar_Compile::_default::r#_Digit_q(x0.clone())) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>)))
                    }
                    pub fn NonEmptyDigits(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jnum>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jdigits>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::Digits(cs);
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>(!sp.t().r#_Empty_q().clone(), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::OtherError {
                    err: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::EmptyNumber {})
                  }));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jdigits,
                                >,
                            >>()
                        } else {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jdigits>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: sp.clone()
                })
                        }
                    }
                    pub fn NonZeroInt(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jint>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::NonEmptyDigits(cs)
                    }
                    pub fn OptionalMinus(
                        cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jminus,
                        >,
                    > {
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipIf(cs, &({
                  ::std::rc::Rc::new(move |c: &u8| -> bool{
                      c.clone() == ::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8
                    })
                })))
                    }
                    pub fn OptionalSign(
                        cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::jsign,
                        >,
                    > {
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipIf(cs, &({
                  ::std::rc::Rc::new(move |c: &u8| -> bool{
                      c.clone() == ::dafny_runtime::DafnyCharUTF16(45 as u16).0 as u8 || c.clone() == ::dafny_runtime::DafnyCharUTF16(43 as u16).0 as u8
                    })
                })))
                    }
                    pub fn TrimmedInt(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jint>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipIf(cs, &({
                    ::std::rc::Rc::new(move |c: &u8| -> bool{
                        c.clone() == ::dafny_runtime::DafnyCharUTF16(48 as u16).0 as u8
                      })
                  })));
                        if sp.t().r#_Empty_q().clone() {
                            crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::NonZeroInt(sp.cs())
                        } else {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: sp.clone()
                })
                        }
                    }
                    pub fn Exp(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut r#__let_tmp_rhs17: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipIf(cs, &({
                    ::std::rc::Rc::new(move |c: &u8| -> bool{
                        c.clone() == ::dafny_runtime::DafnyCharUTF16(101 as u16).0 as u8 || c.clone() == ::dafny_runtime::DafnyCharUTF16(69 as u16).0 as u8
                      })
                  })));
                        let mut e: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs17.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs17.cs().clone();
                        if e.r#_Empty_q().clone() {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>::SP {
                        t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>::Empty {}),
                        cs: cs.clone()
                      })
                })
                        } else {
                            let mut r#__let_tmp_rhs18: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jsign>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::OptionalSign(&cs);
                            let mut sign: crate::r#_JSON_Compile::r#_Grammar_Compile::jsign =
                                r#__let_tmp_rhs18.t().clone();
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs18.cs().clone();
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jnum>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::NonEmptyDigits(&cs);
                            if valueOrError0.IsFailure() {
                                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>>>()
                            } else {
                                let mut r#__let_tmp_rhs19: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jnum>> = valueOrError0.Extract();
                                let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                                    r#__let_tmp_rhs19.t().clone();
                                let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs19.cs().clone();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>::SP {
                          t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>::NonEmpty {
                                t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jexp::JExp {
                                      e: e.clone(),
                                      sign: sign.clone(),
                                      num: num.clone()
                                    })
                              }),
                          cs: cs.clone()
                        })
                  })
                            }
                        }
                    }
                    pub fn Frac(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut r#__let_tmp_rhs20: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::SkipIf(cs, &({
                    ::std::rc::Rc::new(move |c: &u8| -> bool{
                        c.clone() == ::dafny_runtime::DafnyCharUTF16(46 as u16).0 as u8
                      })
                  })));
                        let mut period: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs20.t().clone();
                        let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs20.cs().clone();
                        if period.r#_Empty_q().clone() {
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>::SP {
                        t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>::Empty {}),
                        cs: cs.clone()
                      })
                })
                        } else {
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jnum>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::NonEmptyDigits(&cs);
                            if valueOrError0.IsFailure() {
                                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>>>()
                            } else {
                                let mut r#__let_tmp_rhs21: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jnum>> = valueOrError0.Extract();
                                let mut num: crate::r#_JSON_Compile::r#_Grammar_Compile::jnum =
                                    r#__let_tmp_rhs21.t().clone();
                                let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs21.cs().clone();
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                    value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>::SP {
                          t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>::NonEmpty {
                                t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac::JFrac {
                                      period: period.clone(),
                                      num: num.clone()
                                    })
                              }),
                          cs: cs.clone()
                        })
                  })
                            }
                        }
                    }
                    pub fn NumberFromParts(
                        minus: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jminus,
                            >,
                        >,
                        num: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jint,
                            >,
                        >,
                        frac: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac,
                                        >,
                                    >,
                                >,
                            >,
                        >,
                        exp: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jexp,
                                        >,
                                    >,
                                >,
                            >,
                        >,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                        >,
                    > {
                        let mut sp: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>,
                            >::SP {
                                t: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber::JNumber {
                                        minus: minus.t().clone(),
                                        num: num.t().clone(),
                                        frac: frac.t().clone(),
                                        exp: exp.t().clone(),
                                    },
                                ),
                                cs: exp.cs().clone(),
                            },
                        );
                        sp.clone()
                    }
                    pub fn Number(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut minus: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jminus>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::OptionalMinus(cs);
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jint>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::TrimmedInt(minus.cs());
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber,
                                    >,
                                >,
                            >>()
                        } else {
                            let mut num: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jint,
                                >,
                            > = valueOrError0.Extract();
                            let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::Frac(num.cs());
                            if valueOrError1.IsFailure() {
                                valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>>>()
                            } else {
                                let mut frac: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jfrac>>>>> = valueOrError1.Extract();
                                let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::Exp(frac.cs());
                                if valueOrError2.IsFailure() {
                                    valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>>>()
                                } else {
                                    let mut exp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jexp>>>>> = valueOrError2.Extract();
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::NumberFromParts(&minus, &num, &frac, &exp)
                    })
                                }
                            }
                        }
                    }
                }
            }

            pub mod r#_ObjectParams_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Colon(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertChar::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, &::dafny_runtime::DafnyCharUTF16(58 as u16));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn KeyValueFromParts(
                        k: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>,
                            >,
                        >,
                        colon: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon,
                                    >,
                                >,
                            >,
                        >,
                        v: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                        >,
                    > {
                        let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>::SP {
                  t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue::KeyValue {
                        k: k.t().clone(),
                        colon: colon.t().clone(),
                        v: v.t().clone()
                      }),
                  cs: v.cs().clone()
                });
                        sp.clone()
                    }
                    pub fn ElementSpec(
                        t: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>,
                    ) -> ::dafny_runtime::Sequence<u8> {
                        crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::KeyValue(t)
                    }
                    pub fn Element(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Strings_Compile::_default::String(cs);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                    >,
                                >,
                            >>()
                        } else {
                            let mut k: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                    >,
                                >,
                            > = valueOrError0.Extract();
                            let mut p: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                    r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::Colon(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                  });
                            let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon>(k.cs(), &p);
                            if valueOrError1.IsFailure() {
                                valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>>>()
                            } else {
                                let mut colon: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Grammar_Compile::jcolon>>>> = valueOrError1.Extract();
                                let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = json.r#fn()(colon.cs());
                                if valueOrError2.IsFailure() {
                                    valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>>>()
                                } else {
                                    let mut v: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = valueOrError2.Extract();
                                    let mut kv: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::KeyValueFromParts(&k, &colon, &v);
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: kv.clone()
                    })
                                }
                            }
                        }
                    }
                    pub fn OPEN() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(123 as u16).0 as u8
                    }
                    pub fn CLOSE() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(125 as u16).0 as u8
                    }
                }
            }

            pub mod r#_Objects_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Object(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::Bracketed(cs, json);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>>()
                        } else {
                            let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>> = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: sp.clone()
                })
                        }
                    }
                    pub fn Open(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertByte::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::OPEN());
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn Close(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertByte::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::CLOSE());
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn BracketedFromParts(open: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>>>, elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>, close: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>{
                        let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>::SP {
                  t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>::Bracketed {
                        l: open.t().clone(),
                        data: elems.t().clone(),
                        r: close.t().clone()
                      }),
                  cs: close.cs().clone()
                });
                        sp.clone()
                    }
                    pub fn AppendWithSuffix(
                        elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>,
                        elem: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                            >,
                        >,
                        sep: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                        >,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    > {
                        let mut suffixed: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >::Suffixed {
                                t: elem.t().clone(),
                                suffix: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            >,
                                        >,
                                    >::NonEmpty {
                                        t: sep.t().clone(),
                                    },
                                ),
                            },
                        );
                        let mut r#_elems_k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>::SP {
                  t: elems.t().concat(&::dafny_runtime::seq![suffixed.clone()]),
                  cs: sep.cs().clone()
                });
                        r#_elems_k.clone()
                    }
                    pub fn AppendLast(
                        elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>,
                        elem: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                            >,
                        >,
                        sep: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                        >,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    > {
                        let mut suffixed: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                >,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >::Suffixed {
                                t: elem.t().clone(),
                                suffix: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            >,
                                        >,
                                    >::Empty {},
                                ),
                            },
                        );
                        let mut r#_elems_k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>::SP {
                  t: elems.t().concat(&::dafny_runtime::seq![suffixed.clone()]),
                  cs: elem.cs().clone()
                });
                        r#_elems_k.clone()
                    }
                    pub fn Elements(json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser, open: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>>>, elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut json = json.clone();
                        let mut open = open.clone();
                        let mut elems = elems.clone();
                        'TAIL_CALL_START: loop {
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::Element(elems.cs(), &json);
                            if valueOrError0.IsFailure() {
                                return valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>>();
                            } else {
                                let mut elem: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>>> = valueOrError0.Extract();
                                if elem.cs().r#_EOF_q().clone() {
                                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Failure {
                        error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::EOF {})
                      });
                                } else {
                                    let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::jopt>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::TryStructural(elem.cs());
                                    let mut s0: i16 = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Peek(sep.t().t());
                                    if s0 == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::SEPARATOR() as i16 && crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(sep.t().t()) == 1 {
                    let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>> = sep.clone();
                    let mut elems: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::AppendWithSuffix(&elems, &elem, &sep);
                    let mut _in226: crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser = json.clone();
                    let mut _in227: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>>> = open.clone();
                    let mut _in228: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = elems.clone();
                    json = _in226.clone();
                    open = _in227.clone();
                    elems = _in228.clone();
                    continue 'TAIL_CALL_START;
                  } else {
                    if s0 == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::CLOSE() as i16 && crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(sep.t().t()) == 1 {
                      let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>> = sep.clone();
                      let mut r#_elems_k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::AppendLast(&elems, &elem, &sep);
                      let mut bracketed: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::BracketedFromParts(&open, &r#_elems_k, &sep);
                      return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                            value: bracketed.clone()
                          });
                    } else {
                      let mut separator: u8 = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::SEPARATOR();
                      let mut pr: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Failure {
                            error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::ExpectingAnyByte {
                                  expected_sq: ::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::CLOSE(), separator],
                                  b: s0
                                })
                          });
                      return pr.clone();
                    }
                  }
                                }
                            }
                        }
                    }
                    pub fn Bracketed(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>(cs, &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                    r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::Open(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                  }));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>>()
                        } else {
                            let mut open: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen>>>> = valueOrError0.Extract();
                            let mut elems: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>::SP {
                    t: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>,
                    cs: open.cs().clone()
                  });
                            if crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Peek(open.cs()) == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::CLOSE() as i16 {
                let mut p: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                      r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::Close(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    });
                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>(open.cs(), &p);
                if valueOrError1.IsFailure() {
                  valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>>()
                } else {
                  let mut close: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>> = valueOrError1.Extract();
                  ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::BracketedFromParts(&open, &elems, &close)
                    })
                }
              } else {
                crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::Elements(json, &open, &elems)
              }
                        }
                    }
                    pub fn SpecViewOpen() -> ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jopen) -> ::dafny_runtime::Sequence<u8>>{
                        ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::SpecView()(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    }
                    pub fn SpecViewClose() -> ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::jclose) -> ::dafny_runtime::Sequence<u8>>{
                        ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::SpecView()(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    }
                    pub fn SEPARATOR() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(44 as u16).0 as u8
                    }
                }

                pub type jopen = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_jopen() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::OPEN()])
                }

                pub type jclose = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_jclose() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ObjectParams_Compile::_default::CLOSE()])
                }
            }

            pub mod r#_ArrayParams_Compile {
                pub struct _default {}

                impl _default {
                    pub fn ElementSpec(
                        t: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    ) -> ::dafny_runtime::Sequence<u8> {
                        crate::r#_JSON_Compile::r#_ConcreteSyntax_Compile::r#_Spec_Compile::_default::Value(t)
                    }
                    pub fn Element(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        json.r#fn()(cs)
                    }
                    pub fn OPEN() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(91 as u16).0 as u8
                    }
                    pub fn CLOSE() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(93 as u16).0 as u8
                    }
                }
            }

            pub mod r#_Arrays_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Array(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::Bracketed(cs, json);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>>()
                        } else {
                            let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>> = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: sp.clone()
                })
                        }
                    }
                    pub fn Open(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertByte::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::OPEN());
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn Close(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertByte::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::CLOSE());
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                    pub fn BracketedFromParts(open: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>>>, elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>, close: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>) -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>{
                        let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>::SP {
                  t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>::Bracketed {
                        l: open.t().clone(),
                        data: elems.t().clone(),
                        r: close.t().clone()
                      }),
                  cs: close.cs().clone()
                });
                        sp.clone()
                    }
                    pub fn AppendWithSuffix(
                        elems: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >,
                        >,
                        elem: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                        sep: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                        >,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    > {
                        let mut suffixed: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >::Suffixed {
                                t: elem.t().clone(),
                                suffix: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            >,
                                        >,
                                    >::NonEmpty {
                                        t: sep.t().clone(),
                                    },
                                ),
                            },
                        );
                        let mut r#_elems_k: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >::SP {
                                t: elems.t().concat(&::dafny_runtime::seq![suffixed.clone()]),
                                cs: sep.cs().clone(),
                            },
                        );
                        r#_elems_k.clone()
                    }
                    pub fn AppendLast(
                        elems: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >,
                        >,
                        elem: &::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                        sep: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                            ::dafny_runtime::Sequence<
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                        >,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                    >,
                                >,
                            >,
                        >,
                    > {
                        let mut suffixed: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed::<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                            >::Suffixed {
                                t: elem.t().clone(),
                                suffix: ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Maybe::<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            >,
                                        >,
                                    >::Empty {},
                                ),
                            },
                        );
                        let mut r#_elems_k: ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >,
                        > = ::std::rc::Rc::new(
                            crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<
                                ::dafny_runtime::Sequence<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        >,
                                    >,
                                >,
                            >::SP {
                                t: elems.t().concat(&::dafny_runtime::seq![suffixed.clone()]),
                                cs: elem.cs().clone(),
                            },
                        );
                        r#_elems_k.clone()
                    }
                    pub fn Elements(json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser, open: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>>>, elems: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut json = json.clone();
                        let mut open = open.clone();
                        let mut elems = elems.clone();
                        'TAIL_CALL_START: loop {
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::Element(elems.cs(), &json);
                            if valueOrError0.IsFailure() {
                                return valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>>();
                            } else {
                                let mut elem: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = valueOrError0.Extract();
                                if elem.cs().r#_EOF_q().clone() {
                                    return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Failure {
                        error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::EOF {})
                      });
                                } else {
                                    let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::jopt>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::TryStructural(elem.cs());
                                    let mut s0: i16 = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Peek(sep.t().t());
                                    if s0 == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::SEPARATOR() as i16 && crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(sep.t().t()) == 1 {
                    let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>> = sep.clone();
                    let mut elems: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::AppendWithSuffix(&elems, &elem, &sep);
                    let mut _in229: crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser = json.clone();
                    let mut _in230: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>>> = open.clone();
                    let mut _in231: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = elems.clone();
                    json = _in229.clone();
                    open = _in230.clone();
                    elems = _in231.clone();
                    continue 'TAIL_CALL_START;
                  } else {
                    if s0 == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::CLOSE() as i16 && crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::Length(sep.t().t()) == 1 {
                      let mut sep: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>> = sep.clone();
                      let mut r#_elems_k: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::AppendLast(&elems, &elem, &sep);
                      let mut bracketed: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::BracketedFromParts(&open, &r#_elems_k, &sep);
                      return ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                            value: bracketed.clone()
                          });
                    } else {
                      let mut separator: u8 = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::SEPARATOR();
                      let mut pr: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Failure {
                            error: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::ExpectingAnyByte {
                                  expected_sq: ::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::CLOSE(), separator],
                                  b: s0
                                })
                          });
                      return pr.clone();
                    }
                  }
                                }
                            }
                        }
                    }
                    pub fn Bracketed(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, json: &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>(cs, &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                    r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::Open(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                  }));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>>()
                        } else {
                            let mut open: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen>>>> = valueOrError0.Extract();
                            let mut elems: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>>::SP {
                    t: ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Suffixed<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma>>>,
                    cs: open.cs().clone()
                  });
                            if crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Peek(open.cs()) == crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::CLOSE() as i16 {
                let mut p: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                      r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::Close(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    });
                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>(open.cs(), &p);
                if valueOrError1.IsFailure() {
                  valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>>()
                } else {
                  let mut close: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>> = valueOrError1.Extract();
                  ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::BracketedFromParts(&open, &elems, &close)
                    })
                }
              } else {
                crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::Elements(json, &open, &elems)
              }
                        }
                    }
                    pub fn SpecViewOpen() -> ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jopen) -> ::dafny_runtime::Sequence<u8>>{
                        ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::SpecView()(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    }
                    pub fn SpecViewClose() -> ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::jclose) -> ::dafny_runtime::Sequence<u8>>{
                        ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::SpecView()(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                    }
                    pub fn SEPARATOR() -> u8 {
                        ::dafny_runtime::DafnyCharUTF16(44 as u16).0 as u8
                    }
                }

                pub type jopen = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_jopen() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::OPEN()])
                }

                pub type jclose = ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>;

                pub fn r#__init_jclose() -> ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_>{
                    crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(&::dafny_runtime::seq![crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_ArrayParams_Compile::_default::CLOSE()])
                }
            }

            pub mod r#_Constants_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Constant(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor, expected: &::dafny_runtime::Sequence<u8>) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::AssertBytes::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs, expected, 0);
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>>()
                        } else {
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor = valueOrError0.Extract();
                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                  value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Split(&cs)
                })
                        }
                    }
                }
            }

            pub mod r#_Values_Compile {
                pub struct _default {}

                impl _default {
                    pub fn Value(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                        let mut c: i16 = crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Peek(cs);
                        if c == ::dafny_runtime::DafnyCharUTF16(123 as u16).0 as i16 {
                            let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Objects_Compile::_default::Object(cs, &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Values_Compile::_default::ValueParser(cs));
                            if valueOrError0.IsFailure() {
                                valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                            } else {
                                let mut r#__let_tmp_rhs22: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace>>>> = valueOrError0.Extract();
                                let mut obj: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jlbrace,
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jKeyValue,
                                        >,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::jrbrace,
                                    >,
                                > = r#__let_tmp_rhs22.t().clone();
                                let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs22.cs().clone();
                                let mut v: ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                > = ::std::rc::Rc::new(
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Object {
                                        obj: obj.clone(),
                                    },
                                );
                                let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                      t: v.clone(),
                      cs: r#_cs_k.clone()
                    });
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                    value: sp.clone()
                  })
                            }
                        } else {
                            if c == ::dafny_runtime::DafnyCharUTF16(91 as u16).0 as i16 {
                                let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Arrays_Compile::_default::Array(cs, &crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Values_Compile::_default::ValueParser(cs));
                                if valueOrError1.IsFailure() {
                                    valueOrError1.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                } else {
                                    let mut r#__let_tmp_rhs23: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma, crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket>>>> = valueOrError1.Extract();
                                    let mut arr: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Bracketed<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jlbracket,
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jcomma,
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jrbracket,
                                        >,
                                    > = r#__let_tmp_rhs23.t().clone();
                                    let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs23.cs().clone();
                                    let mut v: ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    > = ::std::rc::Rc::new(
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Array {
                                            arr: arr.clone(),
                                        },
                                    );
                                    let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                        t: v.clone(),
                        cs: r#_cs_k.clone()
                      });
                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                      value: sp.clone()
                    })
                                }
                            } else {
                                if c == ::dafny_runtime::DafnyCharUTF16(34 as u16).0 as i16 {
                                    let mut valueOrError2: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Strings_Compile::_default::String(cs);
                                    if valueOrError2.IsFailure() {
                                        valueOrError2.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                    } else {
                                        let mut r#__let_tmp_rhs24: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jstring>>> = valueOrError2.Extract();
                                        let mut str: ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::jstring,
                                        > = r#__let_tmp_rhs24.t().clone();
                                        let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs24.cs().clone();
                                        ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                        value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                              t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::String {
                                    str: str.clone()
                                  }),
                              cs: r#_cs_k.clone()
                            })
                      })
                                    }
                                } else {
                                    if c == ::dafny_runtime::DafnyCharUTF16(116 as u16).0 as i16 {
                                        let mut valueOrError3: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Constants_Compile::_default::Constant(cs, &crate::r#_JSON_Compile::r#_Grammar_Compile::_default::TRUE());
                                        if valueOrError3.IsFailure() {
                                            valueOrError3.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                        } else {
                                            let mut r#__let_tmp_rhs25: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = valueOrError3.Extract();
                                            let mut cst: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs25.t().clone();
                                            let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs25.cs().clone();
                                            ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                          value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                                t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool {
                                      b: cst.clone()
                                    }),
                                cs: r#_cs_k.clone()
                              })
                        })
                                        }
                                    } else {
                                        if c == ::dafny_runtime::DafnyCharUTF16(102 as u16).0 as i16
                                        {
                                            let mut valueOrError4: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Constants_Compile::_default::Constant(cs, &crate::r#_JSON_Compile::r#_Grammar_Compile::_default::FALSE());
                                            if valueOrError4.IsFailure() {
                                                valueOrError4.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                            } else {
                                                let mut r#__let_tmp_rhs26: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = valueOrError4.Extract();
                                                let mut cst: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs26.t().clone();
                                                let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs26.cs().clone();
                                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                            value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                                  t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Bool {
                                        b: cst.clone()
                                      }),
                                  cs: r#_cs_k.clone()
                                })
                          })
                                            }
                                        } else {
                                            if c == ::dafny_runtime::DafnyCharUTF16(110 as u16).0
                                                as i16
                                            {
                                                let mut valueOrError5: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Constants_Compile::_default::Constant(cs, &crate::r#_JSON_Compile::r#_Grammar_Compile::_default::NULL());
                                                if valueOrError5.IsFailure() {
                                                    valueOrError5.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                                } else {
                                                    let mut r#__let_tmp_rhs27: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View>> = valueOrError5.Extract();
                                                    let mut cst: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View = r#__let_tmp_rhs27.t().clone();
                                                    let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs27.cs().clone();
                                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                              value: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                                    t: ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Null {
                                          n: cst.clone()
                                        }),
                                    cs: r#_cs_k.clone()
                                  })
                            })
                                                }
                                            } else {
                                                let mut valueOrError6: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Numbers_Compile::_default::Number(cs);
                                                if valueOrError6.IsFailure() {
                                                    valueOrError6.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>()
                                                } else {
                                                    let mut r#__let_tmp_rhs28: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber>>> = valueOrError6.Extract();
                                                    let mut num: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::jnumber> = r#__let_tmp_rhs28.t().clone();
                                                    let mut r#_cs_k: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs28.cs().clone();
                                                    let mut v: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Grammar_Compile::Value::Number {
                                num: num.clone()
                              });
                                                    let mut sp: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>> = ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>::SP {
                                t: v.clone(),
                                cs: r#_cs_k.clone()
                              });
                                                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>::Success {
                              value: sp.clone()
                            })
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    pub fn ValueParser(cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::ValueParser{
                        let mut pre: ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> bool> = {
                let cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = cs.clone();
                {
                  let mut cs = cs.clone();
                  ::std::rc::Rc::new(move |r#_ps_k: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| -> bool{
                      crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Length(r#_ps_k) < crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::Length(&cs)
                    })
                }
              };
                        let mut r#fn: ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>> = {
                let pre: ::std::rc::Rc<dyn ::std::ops::Fn(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor) -> bool> = pre.clone();
                {
                  ::std::rc::Rc::new(move |r#_ps_k: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| -> ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>>>{
                      crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Values_Compile::_default::Value(r#_ps_k)
                    })
                }
              };
                        ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::SubParser_::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::SubParser {
                r#fn: r#fn.clone()
              })
                    }
                }
            }

            pub mod r#_API_Compile {
                pub struct _default {}

                impl _default {
                    pub fn LiftCursorError(
                        err: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>,
                    ) -> ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                    > {
                        let mut _source20: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = err.clone();
                        if matches!((&_source20).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::EOF{ .. }) {
              ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ReachedEOF {})
            } else {
              if matches!((&_source20).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::ExpectingByte{ .. }) {
                let mut r#___mcc_h0: u8 = _source20.expected().clone();
                let mut r#___mcc_h1: i16 = _source20.b().clone();
                let mut b: i16 = r#___mcc_h1;
                let mut expected: u8 = r#___mcc_h0;
                ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingByte {
                    expected: expected,
                    b: b
                  })
              } else {
                if matches!((&_source20).as_ref(), crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError::ExpectingAnyByte{ .. }) {
                  let mut r#___mcc_h2: ::dafny_runtime::Sequence<u8> = _source20.expected_sq().clone();
                  let mut r#___mcc_h3: i16 = _source20.b().clone();
                  let mut b: i16 = r#___mcc_h3;
                  let mut expected_sq: ::dafny_runtime::Sequence<u8> = r#___mcc_h2.clone();
                  ::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingAnyByte {
                      expected_sq: expected_sq.clone(),
                      b: b
                    })
                } else {
                  let mut r#___mcc_h4: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError> = _source20.err().clone();
                  let mut err: ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError> = r#___mcc_h4.clone();
                  err.clone()
                }
              }
            }
                    }
                    pub fn JSON(
                        cs: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor,
                    ) -> ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                        >,
                                    >,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >,
                    > {
                        crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Core_Compile::_default::Structural::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>(cs, &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Utils_Compile::r#_Parsers_Compile::Parser_::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Parser {
                  r#fn: ::std::rc::Rc::new(|x0: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_Values_Compile::_default::Value(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>
                })).MapFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(&(::std::rc::Rc::new(|x0: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::CursorError<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>>| crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_API_Compile::_default::LiftCursorError(x0)) as ::std::rc::Rc<dyn ::std::ops::Fn(&_) -> _>))
                    }
                    pub fn Text(
                        v: &crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View,
                    ) -> ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >,
                    > {
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_API_Compile::_default::JSON(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Cursor_::OfView(v));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >>()
                        } else {
                            let mut r#__let_tmp_rhs29: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::Split<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                            ::std::rc::Rc<
                                                crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                            >,
                                        >,
                                    >,
                                >,
                            > = valueOrError0.Extract();
                            let mut text: ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            > = r#__let_tmp_rhs29.t().clone();
                            let mut cs: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Cursors_Compile::FreshCursor = r#__let_tmp_rhs29.cs().clone();
                            let mut valueOrError1: ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(cs.r#_EOF_q().clone(), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::ExpectingEOF {}));
                            if valueOrError1.IsFailure() {
                                valueOrError1.PropagateFailure::<::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                        ::std::rc::Rc<
                                            crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                        >,
                                    >,
                                >>()
                            } else {
                                ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>::Success {
                    value: text.clone()
                  })
                            }
                        }
                    }
                    pub fn OfBytes(
                        bs: &::dafny_runtime::Sequence<u8>,
                    ) -> ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                            >,
                        >,
                    > {
                        let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Outcome<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_Wrappers_Compile::_default::Need::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>(bs.cardinality() < crate::r#_BoundedInts_Compile::_default::TWO_TO_THE_32(), &::std::rc::Rc::new(crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError::IntOverflow {}));
                        if valueOrError0.IsFailure() {
                            valueOrError0.PropagateFailure::<::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >>()
                        } else {
                            crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_API_Compile::_default::Text(&crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Core_Compile::View_::OfBytes(bs))
                        }
                    }
                }
            }
        }

        pub mod r#_API_Compile {
            pub struct _default {}

            impl _default {
                pub fn Serialize(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > {
                    ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Result::<::dafny_runtime::Sequence<u8>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>>::Success {
              value: crate::r#_JSON_Compile::r#_Utils_Compile::r#_Views_Compile::r#_Writers_Compile::Writer_::Bytes(&crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Text(js))
            })
                }
                pub fn SerializeAlloc(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Object<[u8]>,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > {
                    let mut bs = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::dafny_runtime::Object<[u8]>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    let mut _out27 = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                ::dafny_runtime::Object<[u8]>,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    _out27 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::Serialize(js));
                    bs = ::dafny_runtime::MaybePlacebo::from(_out27.read());
                    return bs.read();
                }
                pub fn SerializeInto(
                    js: &::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    >,
                    bs: &::dafny_runtime::Object<[u8]>,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        u32,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > {
                    let mut len = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                u32,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    let mut _out28 = ::dafny_runtime::MaybePlacebo::<
                        ::std::rc::Rc<
                            crate::r#_Wrappers_Compile::Result<
                                u32,
                                ::std::rc::Rc<
                                    crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                                >,
                            >,
                        >,
                    >::new();
                    _out28 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Serializer_Compile::_default::SerializeTo(js, bs));
                    len = ::dafny_runtime::MaybePlacebo::from(_out28.read());
                    return len.read();
                }
                pub fn Deserialize(
                    bs: &::dafny_runtime::Sequence<u8>,
                ) -> ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError,
                        >,
                    >,
                > {
                    crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_Deserializer_Compile::r#_API_Compile::_default::OfBytes(bs)
                }
            }
        }
    }

    pub mod r#_API_Compile {
        pub struct _default {}

        impl _default {
            pub fn Serialize(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Sequence<u8>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                            >,
                        >,
                        ::std::rc::Rc<
                            crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                        >,
                    >,
                > = crate::r#_JSON_Compile::r#_Serializer_Compile::_default::JSON(js);
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::dafny_runtime::Sequence<u8>>()
                } else {
                    let mut js: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    > = valueOrError0.Extract();
                    crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_API_Compile::_default::Serialize(
                        &js,
                    )
                }
            }
            pub fn SerializeAlloc(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::dafny_runtime::Object<[u8]>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut bs = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::Object<[u8]>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::JSON(js),
                );
                if valueOrError0.read().IsFailure() {
                    bs = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0
                            .read()
                            .PropagateFailure::<::dafny_runtime::Object<[u8]>>(),
                    );
                    return bs.read();
                };
                let mut js: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    >,
                > = valueOrError0.read().Extract();
                let mut _out29 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::dafny_runtime::Object<[u8]>,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                _out29 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_API_Compile::_default::SerializeAlloc(&js));
                bs = ::dafny_runtime::MaybePlacebo::from(_out29.read());
                return bs.read();
            }
            pub fn SerializeInto(
                js: &::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                bs: &::dafny_runtime::Object<[u8]>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    u32,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError>,
                >,
            > {
                let mut len = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            u32,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                                    ::std::rc::Rc<
                                        crate::r#_JSON_Compile::r#_Grammar_Compile::Value,
                                    >,
                                >,
                            >,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                    crate::r#_JSON_Compile::r#_Serializer_Compile::_default::JSON(js),
                );
                if valueOrError0.read().IsFailure() {
                    len = ::dafny_runtime::MaybePlacebo::from(
                        valueOrError0.read().PropagateFailure::<u32>(),
                    );
                    return len.read();
                };
                let mut js: ::std::rc::Rc<
                    crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                        ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                    >,
                > = valueOrError0.read().Extract();
                let mut _out30 = ::dafny_runtime::MaybePlacebo::<
                    ::std::rc::Rc<
                        crate::r#_Wrappers_Compile::Result<
                            u32,
                            ::std::rc::Rc<
                                crate::r#_JSON_Compile::r#_Errors_Compile::SerializationError,
                            >,
                        >,
                    >,
                >::new();
                _out30 = ::dafny_runtime::MaybePlacebo::from(crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_API_Compile::_default::SerializeInto(&js, bs));
                len = ::dafny_runtime::MaybePlacebo::from(_out30.read());
                return len.read();
            }
            pub fn Deserialize(
                bs: &::dafny_runtime::Sequence<u8>,
            ) -> ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>,
                    ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>,
                >,
            > {
                let mut valueOrError0: ::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>>>, ::std::rc::Rc<crate::r#_JSON_Compile::r#_Errors_Compile::DeserializationError>>> = crate::r#_JSON_Compile::r#_ZeroCopy_Compile::r#_API_Compile::_default::Deserialize(bs);
                if valueOrError0.IsFailure() {
                    valueOrError0.PropagateFailure::<::std::rc::Rc<crate::r#_JSON_Compile::r#_Values_Compile::JSON>>()
                } else {
                    let mut js: ::std::rc::Rc<
                        crate::r#_JSON_Compile::r#_Grammar_Compile::Structural<
                            ::std::rc::Rc<crate::r#_JSON_Compile::r#_Grammar_Compile::Value>,
                        >,
                    > = valueOrError0.Extract();
                    crate::r#_JSON_Compile::r#_Deserializer_Compile::_default::JSON(&js)
                }
            }
        }
    }
}

pub mod r#_TestUTF8_Compile {
    pub struct _default {}

    impl _default {
        pub fn TestEncodeHappyCase() -> () {
            let mut unicodeString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                ::dafny_runtime::DafnyCharUTF16(97 as u16),
                ::dafny_runtime::DafnyCharUTF16(98 as u16),
                ::dafny_runtime::DafnyCharUTF16(99 as u16),
                ::dafny_runtime::DafnyCharUTF16(774 as u16),
                ::dafny_runtime::DafnyCharUTF16(509 as u16),
                ::dafny_runtime::DafnyCharUTF16(946 as u16)
            ];
            let mut expectedBytes: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![97, 98, 99, 204, 134, 199, 189, 206, 178];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&unicodeString));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut encoded: crate::UTF8::ValidUTF8Bytes = valueOrError0.read().Extract();
            let mut _e00: ::dafny_runtime::Sequence<u8> = expectedBytes.clone();
            let mut _e10: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e00.clone() == _e10.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e00));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e10));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestEncodeInvalidUnicode() -> () {
            let mut invalidUnicode: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                ::dafny_runtime::DafnyCharUTF16(97 as u16),
                ::dafny_runtime::DafnyCharUTF16(98 as u16),
                ::dafny_runtime::DafnyCharUTF16(99 as u16),
                ::dafny_runtime::DafnyCharUTF16(55296 as u16)
            ];
            let mut encoded: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    crate::UTF8::ValidUTF8Bytes,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::UTF8::_default::Encode(&invalidUnicode);
            if !matches!(
                (&encoded).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestDecodeHappyCase() -> () {
            let mut unicodeBytes: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![97, 98, 99, 204, 134, 199, 189, 206, 178];
            let mut expectedString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                ::dafny_runtime::DafnyCharUTF16(97 as u16),
                ::dafny_runtime::DafnyCharUTF16(98 as u16),
                ::dafny_runtime::DafnyCharUTF16(99 as u16),
                ::dafny_runtime::DafnyCharUTF16(774 as u16),
                ::dafny_runtime::DafnyCharUTF16(509 as u16),
                ::dafny_runtime::DafnyCharUTF16(946 as u16)
            ];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&unicodeBytes));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut decoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            let mut _e01: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                expectedString.clone();
            let mut _e11: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            if !(_e01.clone() == _e11.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e01));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e11));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestDecodeInvalidUnicode() -> () {
            let mut invalidUnicode: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![97, 98, 99, 237, 160, 128];
            if !(!crate::UTF8::_default::ValidUTF8Seq(&invalidUnicode)) {
                panic!("Halt")
            };
            if !matches!(
                (&crate::UTF8::_default::Decode(&invalidUnicode)).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            return ();
        }
        pub fn Test1Byte() -> () {
            let mut decoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(0 as u16)];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut encoded: crate::UTF8::ValidUTF8Bytes = valueOrError0.read().Extract();
            let mut _e02: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![0];
            let mut _e12: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e02.clone() == _e12.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e02));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e12));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut redecoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            let mut _e03: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e13: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e03.clone() == _e13.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e03));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e13));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(32 as u16)];
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError2.read().Extract();
            let mut _e04: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![32];
            let mut _e14: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e04.clone() == _e14.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e04));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e14));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError3.read().Extract();
            let mut _e05: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e15: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e05.clone() == _e15.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e05));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e15));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::string_utf16_of("$");
            let mut valueOrError4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError4 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError4.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError4.read().Extract();
            let mut _e06: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![36];
            let mut _e16: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e06.clone() == _e16.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e06));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e16));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError5 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError5 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError5.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError5.read().Extract();
            let mut _e07: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e17: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e07.clone() == _e17.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e07));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e17));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::string_utf16_of("0");
            let mut valueOrError6 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError6 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError6.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError6.read().Extract();
            let mut _e08: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![48];
            let mut _e18: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e08.clone() == _e18.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e08));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e18));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError7 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError7 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError7.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError7.read().Extract();
            let mut _e09: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e19: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e09.clone() == _e19.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e09));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e19));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::string_utf16_of("A");
            let mut valueOrError8 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError8 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError8.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError8.read().Extract();
            let mut _e010: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![65];
            let mut _e110: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e010.clone() == _e110.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e010));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e110));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError9 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError9 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError9.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError9.read().Extract();
            let mut _e011: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e111: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e011.clone() == _e111.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e011));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e111));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::string_utf16_of("a");
            let mut valueOrError10 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError10 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError10.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError10.read().Extract();
            let mut _e012: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![97];
            let mut _e112: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e012.clone() == _e112.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e012));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e112));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses1Byte(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError11 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError11 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError11.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError11.read().Extract();
            let mut _e013: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e113: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e013.clone() == _e113.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e013));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e113));
                panic!("Halt")
            };
            return ();
        }
        pub fn Test2Bytes() -> () {
            let mut decoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(163 as u16)];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut encoded: crate::UTF8::ValidUTF8Bytes = valueOrError0.read().Extract();
            let mut _e014: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![194, 163];
            let mut _e114: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e014.clone() == _e114.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e014));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e114));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses2Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut redecoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            let mut _e015: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e115: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e015.clone() == _e115.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e015));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e115));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(169 as u16)];
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError2.read().Extract();
            let mut _e016: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![194, 169];
            let mut _e116: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e016.clone() == _e116.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e016));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e116));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses2Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError3.read().Extract();
            let mut _e017: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e117: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e017.clone() == _e117.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e017));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e117));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(174 as u16)];
            let mut valueOrError4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError4 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError4.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError4.read().Extract();
            let mut _e018: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![194, 174];
            let mut _e118: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e018.clone() == _e118.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e018));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e118));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses2Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError5 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError5 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError5.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError5.read().Extract();
            let mut _e019: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e119: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e019.clone() == _e119.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e019));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e119));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(960 as u16)];
            let mut valueOrError6 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError6 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError6.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError6.read().Extract();
            let mut _e020: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![207, 128];
            let mut _e120: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e020.clone() == _e120.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e020));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e120));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses2Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError7 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError7 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError7.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError7.read().Extract();
            let mut _e021: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e121: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e021.clone() == _e121.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e021));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e121));
                panic!("Halt")
            };
            return ();
        }
        pub fn Test3Bytes() -> () {
            let mut decoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(9094 as u16)];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut encoded: crate::UTF8::ValidUTF8Bytes = valueOrError0.read().Extract();
            let mut _e022: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![226, 142, 134];
            let mut _e122: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e022.clone() == _e122.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e022));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e122));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses3Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut redecoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            let mut _e023: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e123: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e023.clone() == _e123.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e023));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e123));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(9095 as u16)];
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError2.read().Extract();
            let mut _e024: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![226, 142, 135];
            let mut _e124: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e024.clone() == _e124.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e024));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e124));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses3Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError3.read().Extract();
            let mut _e025: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e125: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e025.clone() == _e125.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e025));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e125));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(8987 as u16)];
            let mut valueOrError4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError4 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError4.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError4.read().Extract();
            let mut _e026: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![226, 140, 155];
            let mut _e126: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e026.clone() == _e126.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e026));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e126));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses3Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError5 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError5 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError5.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError5.read().Extract();
            let mut _e027: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e127: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e027.clone() == _e127.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e027));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e127));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(7544 as u16)];
            let mut valueOrError6 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError6 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError6.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError6.read().Extract();
            let mut _e028: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![225, 181, 184];
            let mut _e128: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e028.clone() == _e128.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e028));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e128));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses3Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError7 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError7 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError7.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError7.read().Extract();
            let mut _e029: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e129: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e029.clone() == _e129.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e029));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e129));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![::dafny_runtime::DafnyCharUTF16(29483 as u16)];
            let mut valueOrError8 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError8 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError8.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError8.read().Extract();
            let mut _e030: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![231, 140, 171];
            let mut _e130: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e030.clone() == _e130.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e030));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e130));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses3Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError9 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError9 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError9.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError9.read().Extract();
            let mut _e031: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e131: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e031.clone() == _e131.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e031));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e131));
                panic!("Halt")
            };
            return ();
        }
        pub fn Test4Bytes() -> () {
            let mut decoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::seq![
                ::dafny_runtime::DafnyCharUTF16(55304 as u16),
                ::dafny_runtime::DafnyCharUTF16(56320 as u16)
            ];
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut encoded: crate::UTF8::ValidUTF8Bytes = valueOrError0.read().Extract();
            let mut _e032: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![240, 146, 128, 128];
            let mut _e132: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e032.clone() == _e132.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e032));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e132));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses4Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut redecoded: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            let mut _e033: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e133: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e033.clone() == _e133.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e033));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e133));
                panic!("Halt")
            };
            decoded = ::dafny_runtime::seq![
                ::dafny_runtime::DafnyCharUTF16(55349 as u16),
                ::dafny_runtime::DafnyCharUTF16(57281 as u16)
            ];
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        crate::UTF8::ValidUTF8Bytes,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Encode(&decoded));
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            encoded = valueOrError2.read().Extract();
            let mut _e034: ::dafny_runtime::Sequence<u8> =
                ::dafny_runtime::seq![240, 157, 159, 129];
            let mut _e134: crate::UTF8::ValidUTF8Bytes = encoded.clone();
            if !(_e034.clone() == _e134.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e034));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e134));
                panic!("Halt")
            };
            if !crate::UTF8::_default::Uses4Bytes(&encoded) {
                panic!("Halt")
            };
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 =
                ::dafny_runtime::MaybePlacebo::from(crate::UTF8::_default::Decode(&encoded));
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            redecoded = valueOrError3.read().Extract();
            let mut _e035: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                decoded.clone();
            let mut _e135: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                redecoded.clone();
            if !(_e035.clone() == _e135.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e035));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e135));
                panic!("Halt")
            };
            return ();
        }
    }
}
pub mod r#_TestTime_Compile {
    pub struct _default {}

    impl _default {
        pub fn TestNonDecreasing() -> () {
            let mut t1: i64 = <i64 as std::default::Default>::default();
            let mut _out0: i64 = <i64 as std::default::Default>::default();
            _out0 = crate::Time::_default::CurrentRelativeTime();
            t1 = _out0;
            let mut t2: i64 = <i64 as std::default::Default>::default();
            let mut _out1: i64 = <i64 as std::default::Default>::default();
            _out1 = crate::Time::_default::CurrentRelativeTime();
            t2 = _out1;
            if !(t2 >= t1) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestPositiveValues() -> () {
            let mut t1: i64 = <i64 as std::default::Default>::default();
            let mut _out2: i64 = <i64 as std::default::Default>::default();
            _out2 = crate::Time::_default::CurrentRelativeTime();
            t1 = _out2;
            let mut t2: i64 = <i64 as std::default::Default>::default();
            let mut _out3: i64 = <i64 as std::default::Default>::default();
            _out3 = crate::Time::_default::CurrentRelativeTime();
            t2 = _out3;
            if !((t2 - t1) >= 0) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestGetCurrentTimeStamp() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out4 =
                ::dafny_runtime::MaybePlacebo::from(crate::Time::_default::GetCurrentTimeStamp());
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out4.read());
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut CurrentTime: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            if !crate::r#_TestTime_Compile::_default::r#_ISO8601_q(&CurrentTime) {
                panic!("Halt")
            };
            return ();
        }
        pub fn r#_ISO8601_q(
            CreateTime: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
        ) -> bool {
            CreateTime.cardinality() == ::dafny_runtime::int!(27)
                && CreateTime.get(&::dafny_runtime::int!(4))
                    == ::dafny_runtime::DafnyCharUTF16(45 as u16)
                && CreateTime.get(&::dafny_runtime::int!(7))
                    == ::dafny_runtime::DafnyCharUTF16(45 as u16)
                && CreateTime.get(&::dafny_runtime::int!(10))
                    == ::dafny_runtime::DafnyCharUTF16(84 as u16)
                && CreateTime.get(&::dafny_runtime::int!(13))
                    == ::dafny_runtime::DafnyCharUTF16(58 as u16)
                && CreateTime.get(&::dafny_runtime::int!(16))
                    == ::dafny_runtime::DafnyCharUTF16(58 as u16)
                && CreateTime.get(&::dafny_runtime::int!(19))
                    == ::dafny_runtime::DafnyCharUTF16(46 as u16)
                && CreateTime.get(&::dafny_runtime::int!(26))
                    == ::dafny_runtime::DafnyCharUTF16(90 as u16)
        }
    }
}
pub mod r#_TestComputeSetToOrderedSequenceCharLess_Compile {
    pub struct _default {}

    impl _default {
        pub fn CharLess(
            x: &::dafny_runtime::DafnyCharUTF16,
            y: &::dafny_runtime::DafnyCharUTF16,
        ) -> bool {
            x.clone() < y.clone()
        }
        pub fn CharGreater(
            x: &::dafny_runtime::DafnyCharUTF16,
            y: &::dafny_runtime::DafnyCharUTF16,
        ) -> bool {
            y.clone() < x.clone()
        }
        pub fn TestSetToOrderedSequenceEmpty() -> () {
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out5 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out5 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &::dafny_runtime::set! {},
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out5.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &::dafny_runtime::set! {},
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            let mut _e036: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e136: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e036.clone() == _e136.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e036));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e136));
                panic!("Halt")
            };
            let mut _e037: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e137: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e037.clone() == _e137.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e037));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e137));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceOneItem() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("a")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out6 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out6 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out6.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![::dafny_runtime::string_utf16_of("a")];
            let mut _e038: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e138: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e038.clone() == _e138.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e038));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e138));
                panic!("Halt")
            };
            let mut _e039: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e139: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e039.clone() == _e139.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e039));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e139));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceSimple() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("ac"), ::dafny_runtime::string_utf16_of("ab")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out7 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out7 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out7.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("ab"),
                ::dafny_runtime::string_utf16_of("ac")
            ];
            let mut _e040: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e140: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e040.clone() == _e140.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e040));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e140));
                panic!("Halt")
            };
            let mut _e041: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e141: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e041.clone() == _e141.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e041));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e141));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequencePrefix() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("abc"), ::dafny_runtime::string_utf16_of("ab")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out8 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out8 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out8.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("ab"),
                ::dafny_runtime::string_utf16_of("abc")
            ];
            let mut _e042: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e142: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e042.clone() == _e142.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e042));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e142));
                panic!("Halt")
            };
            let mut _e043: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e143: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e043.clone() == _e143.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e043));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e143));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceComplex() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("abc"), ::dafny_runtime::string_utf16_of("bbc"), ::dafny_runtime::string_utf16_of("ab")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out9 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out9 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out9.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("ab"),
                ::dafny_runtime::string_utf16_of("abc"),
                ::dafny_runtime::string_utf16_of("bbc")
            ];
            let mut _e044: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e144: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e044.clone() == _e144.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e044));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e144));
                panic!("Halt")
            };
            let mut _e045: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e145: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e045.clone() == _e145.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e045));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e145));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceComplexReverse() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("abc"), ::dafny_runtime::string_utf16_of("bbc"), ::dafny_runtime::string_utf16_of("ab")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out10 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out10 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharGreater(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out10.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharGreater(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("bbc"),
                ::dafny_runtime::string_utf16_of("ab"),
                ::dafny_runtime::string_utf16_of("abc")
            ];
            let mut _e046: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e146: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e046.clone() == _e146.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e046));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e146));
                panic!("Halt")
            };
            let mut _e047: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e147: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e047.clone() == _e147.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e047));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e147));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetSequence() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("abc"), ::dafny_runtime::string_utf16_of("bbc"), ::dafny_runtime::string_utf16_of("ab")};
            let mut output: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToSequence::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            >(&a);
            let mut _e048: ::dafny_runtime::Multiset<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.as_dafny_multiset();
            let mut _e148: ::dafny_runtime::Multiset<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = a.as_dafny_multiset();
            if !(_e048.clone() == _e148.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e048));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e148));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedComplexUnicode() -> () {
            let mut a: ::dafny_runtime::Set<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::set! {::dafny_runtime::string_utf16_of("𐐷"), ::dafny_runtime::string_utf16_of("&"), ::dafny_runtime::string_utf16_of("Љ"), ::dafny_runtime::string_utf16_of("ᝀ"), ::dafny_runtime::string_utf16_of("🂡"), ::dafny_runtime::string_utf16_of("｡"), ::dafny_runtime::string_utf16_of("𐀂")};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            let mut _out11 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            >::new();
            _out11 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<::dafny_runtime::DafnyCharUTF16>(
                    &a,
                    &(::std::rc::Rc::new(
                        |x0: &::dafny_runtime::DafnyCharUTF16,
                         x1: &::dafny_runtime::DafnyCharUTF16| {
                            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                        },
                    ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out11.read());
            let mut output2: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = crate::SortedSets::_default::SetToOrderedSequence2::<::dafny_runtime::DafnyCharUTF16>(
                &a,
                &(::std::rc::Rc::new(
                    |x0: &::dafny_runtime::DafnyCharUTF16, x1: &::dafny_runtime::DafnyCharUTF16| {
                        crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::CharLess(x0, x1)
                    },
                ) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
            );
            let mut expected: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("&"),
                ::dafny_runtime::string_utf16_of("Љ"),
                ::dafny_runtime::string_utf16_of("ᝀ"),
                ::dafny_runtime::string_utf16_of("𐀂"),
                ::dafny_runtime::string_utf16_of("𐐷"),
                ::dafny_runtime::string_utf16_of("🂡"),
                ::dafny_runtime::string_utf16_of("｡")
            ];
            let mut _e049: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output.read();
            let mut _e149: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e049.clone() == _e149.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e049));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e149));
                panic!("Halt")
            };
            let mut _e050: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = output2.clone();
            let mut _e150: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = expected.clone();
            if !(_e050.clone() == _e150.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e050));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e150));
                panic!("Halt")
            };
            return ();
        }
    }
}
pub mod r#_Sets_Compile {
    pub struct _default {}

    impl _default {
        pub fn ExtractFromSingleton<_T: ::dafny_runtime::DafnyTypeEq>(
            s: &::dafny_runtime::Set<_T>,
        ) -> _T {
            (&({
                let mut s = s.clone();
                ::std::rc::Rc::new(move |r#__let_dummy_0: &::dafny_runtime::DafnyInt| -> _T {
                    let mut x = ::dafny_runtime::MaybePlacebo::<_T>::new();
                    'label_goto__ASSIGN_SUCH_THAT_0: loop {
                        for r#__assign_such_that_0 in (&s).iter().cloned() {
                            x = ::dafny_runtime::MaybePlacebo::from(r#__assign_such_that_0.clone());
                            if s.contains(&x.read()) {
                                break 'label_goto__ASSIGN_SUCH_THAT_0;
                            }
                        }
                        panic!("Halt");
                        break;
                    }
                    x.read()
                })
            }))(&::dafny_runtime::int!(0))
        }
        pub fn Map<_X: ::dafny_runtime::DafnyTypeEq, _Y: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Set<_X>,
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_X) -> _Y>,
        ) -> ::dafny_runtime::Set<_Y> {
            let mut ys: ::dafny_runtime::Set<_Y> = (&({
                let mut f = f.clone();
                let mut xs = xs.clone();
                ::std::rc::Rc::new(move || -> ::dafny_runtime::Set<_Y> {
                    let mut _coll0: ::dafny_runtime::SetBuilder<_Y> =
                        ::dafny_runtime::SetBuilder::<_Y>::new();
                    for r#__compr_0 in (&xs).iter().cloned() {
                        let mut x: _X = r#__compr_0.clone();
                        if xs.contains(&x) {
                            _coll0.add(&(&f)(&x))
                        }
                    }
                    _coll0.build()
                })
            }))();
            ys.clone()
        }
        pub fn Filter<_X: ::dafny_runtime::DafnyTypeEq>(
            xs: &::dafny_runtime::Set<_X>,
            f: &::std::rc::Rc<dyn ::std::ops::Fn(&_X) -> bool>,
        ) -> ::dafny_runtime::Set<_X> {
            let mut ys: ::dafny_runtime::Set<_X> = (&({
                let mut f = f.clone();
                let mut xs = xs.clone();
                ::std::rc::Rc::new(move || -> ::dafny_runtime::Set<_X> {
                    let mut _coll1: ::dafny_runtime::SetBuilder<_X> =
                        ::dafny_runtime::SetBuilder::<_X>::new();
                    for r#__compr_1 in (&xs).iter().cloned() {
                        let mut x: _X = r#__compr_1.clone();
                        if xs.contains(&x) && (&f)(&x) {
                            _coll1.add(&x)
                        }
                    }
                    _coll1.build()
                })
            }))();
            ys.clone()
        }
        pub fn SetRange(
            a: &::dafny_runtime::DafnyInt,
            b: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::Set<::dafny_runtime::DafnyInt> {
            let mut _accumulator: ::dafny_runtime::Set<::dafny_runtime::DafnyInt> =
                ::dafny_runtime::set! {};
            let mut a = a.clone();
            let mut b = b.clone();
            let mut _accumulator = _accumulator.clone();
            'TAIL_CALL_START: loop {
                if a.clone() == b.clone() {
                    return ::dafny_runtime::set! {}.merge(&_accumulator);
                } else {
                    _accumulator = _accumulator.merge(&::dafny_runtime::set! {a.clone()});
                    let mut _in0: ::dafny_runtime::DafnyInt = a.clone() + ::dafny_runtime::int!(1);
                    let mut _in1: ::dafny_runtime::DafnyInt = b.clone();
                    a = _in0.clone();
                    b = _in1.clone();
                    continue 'TAIL_CALL_START;
                }
            }
        }
        pub fn SetRangeZeroBound(
            n: &::dafny_runtime::DafnyInt,
        ) -> ::dafny_runtime::Set<::dafny_runtime::DafnyInt> {
            crate::r#_Sets_Compile::_default::SetRange(&::dafny_runtime::int!(0), n)
        }
    }
}
pub mod r#_TestHexStrings_Compile {
    pub struct _default {}

    impl _default {
        pub fn BasicTests() -> () {
            let mut _e051: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_HexStrings_Compile::_default::ToHexString(&::dafny_runtime::seq![
                    1, 2, 255
                ]);
            let mut _e151: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("0102ff");
            if !(_e051.clone() == _e151.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e051));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e151));
                panic!("Halt")
            };
            let mut _e052: ::dafny_runtime::Sequence<u8> =
                crate::r#_HexStrings_Compile::_default::FromHexString(
                    &::dafny_runtime::string_utf16_of("0102ff"),
                );
            let mut _e152: ::dafny_runtime::Sequence<u8> = ::dafny_runtime::seq![1, 2, 255];
            if !(_e052.clone() == _e152.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e052));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e152));
                panic!("Halt")
            };
            return ();
        }
    }
}
pub mod r#_FloatCompareTest_Compile {
    pub struct _default {}

    impl _default {
        pub fn TestCompareFloat(
            x: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            y: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            ret: i8,
        ) -> () {
            if crate::r#_FloatCompare_Compile::_default::CompareFloat(x, y) != ret {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "CompareFloat("
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(x));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(", "))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(y));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(") was "))
                );
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(
                        &crate::r#_FloatCompare_Compile::_default::CompareFloat(x, y)
                    )
                );
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        " but should have been "
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&ret));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
                )
            };
            if crate::r#_FloatCompare_Compile::_default::CompareFloat(y, x) != (0 - ret) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "CompareFloat("
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(y));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(", "))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(x));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(") was "))
                );
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(
                        &crate::r#_FloatCompare_Compile::_default::CompareFloat(y, x)
                    )
                );
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        " but should have been "
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&(0 - ret)));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
                )
            };
            let mut _e053: i8 = crate::r#_FloatCompare_Compile::_default::CompareFloat(x, y);
            let mut _e153: i8 = ret;
            if !(_e053 == _e153) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e053));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e153));
                panic!("Halt")
            };
            let mut _e054: i8 = crate::r#_FloatCompare_Compile::_default::CompareFloat(y, x);
            let mut _e154: i8 = 0 - ret;
            if !(_e054 == _e154) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e054));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e154));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestOneTwoZeroMatrix() -> () {
            let mut _hi0: ::dafny_runtime::DafnyInt =
                crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_TWO().cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi0.clone()) {
                let mut negativeTwo: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_TWO().get(&i);
                let mut _hi1: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_TWO().cardinality();
                for j in ::dafny_runtime::integer_range(i.clone(), _hi1.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_TWO().get(&j),
                        &negativeTwo,
                        crate::r#_FloatCompare_Compile::_default::Equal(),
                    )
                }
                let mut _hi2: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi2.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().get(&j),
                        &negativeTwo,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi3: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ZERO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi3.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ZERO().get(&j),
                        &negativeTwo,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi4: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ONE().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi4.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ONE().get(&j),
                        &negativeTwo,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi5: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi5.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::TWO().get(&j),
                        &negativeTwo,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
            }
            let mut _hi6: ::dafny_runtime::DafnyInt =
                crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi6.clone()) {
                let mut negativeOne: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().get(&i);
                let mut _hi7: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().cardinality();
                for j in ::dafny_runtime::integer_range(i.clone(), _hi7.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::NEGATIVE_ONE().get(&j),
                        &negativeOne,
                        crate::r#_FloatCompare_Compile::_default::Equal(),
                    )
                }
                let mut _hi8: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ZERO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi8.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ZERO().get(&j),
                        &negativeOne,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi9: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ONE().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi9.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ONE().get(&j),
                        &negativeOne,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi10: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi10.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::TWO().get(&j),
                        &negativeOne,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
            }
            let mut _hi11: ::dafny_runtime::DafnyInt =
                crate::r#_FloatCompareTest_Compile::_default::ZERO().cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi11.clone()) {
                let mut zero: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_FloatCompareTest_Compile::_default::ZERO().get(&i);
                let mut _hi12: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ZERO().cardinality();
                for j in ::dafny_runtime::integer_range(i.clone(), _hi12.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ZERO().get(&j),
                        &zero,
                        crate::r#_FloatCompare_Compile::_default::Equal(),
                    )
                }
                let mut _hi13: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ONE().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi13.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ONE().get(&j),
                        &zero,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
                let mut _hi14: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi14.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::TWO().get(&j),
                        &zero,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
            }
            let mut _hi15: ::dafny_runtime::DafnyInt =
                crate::r#_FloatCompareTest_Compile::_default::ONE().cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi15.clone()) {
                let mut one: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_FloatCompareTest_Compile::_default::ONE().get(&i);
                let mut _hi16: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::ONE().cardinality();
                for j in ::dafny_runtime::integer_range(i.clone(), _hi16.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::ONE().get(&j),
                        &one,
                        crate::r#_FloatCompare_Compile::_default::Equal(),
                    )
                }
                let mut _hi17: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
                for j in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi17.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::TWO().get(&j),
                        &one,
                        crate::r#_FloatCompare_Compile::_default::Greater(),
                    )
                }
            }
            let mut _hi18: ::dafny_runtime::DafnyInt =
                crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
            for i in ::dafny_runtime::integer_range(::dafny_runtime::int!(0), _hi18.clone()) {
                let mut two: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().get(&i);
                let mut _hi19: ::dafny_runtime::DafnyInt =
                    crate::r#_FloatCompareTest_Compile::_default::TWO().cardinality();
                for j in ::dafny_runtime::integer_range(i.clone(), _hi19.clone()) {
                    crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                        &crate::r#_FloatCompareTest_Compile::_default::TWO().get(&j),
                        &two,
                        crate::r#_FloatCompare_Compile::_default::Equal(),
                    )
                }
            }
            return ();
        }
        pub fn SimpleTests() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("2"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.1"),
                &::dafny_runtime::string_utf16_of("1.2"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.2"),
                &::dafny_runtime::string_utf16_of("1.2"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.35"),
                &::dafny_runtime::string_utf16_of("1.357"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.35e2"),
                &::dafny_runtime::string_utf16_of("13.5e1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.351e2"),
                &::dafny_runtime::string_utf16_of("13.5e1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.35e-1"),
                &::dafny_runtime::string_utf16_of("13.5e-2"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1"),
                &::dafny_runtime::string_utf16_of("-2"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.2e7"),
                &::dafny_runtime::string_utf16_of("2.3e2"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1.2e7"),
                &::dafny_runtime::string_utf16_of("2.3e2"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.2e7"),
                &::dafny_runtime::string_utf16_of("-2.3e2"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1.2e7"),
                &::dafny_runtime::string_utf16_of("-2.3e2"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            return ();
        }
        pub fn SignTests() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+1"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+1e+0"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+1e-0"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1"),
                &::dafny_runtime::string_utf16_of("+1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1"),
                &::dafny_runtime::string_utf16_of("-1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+1"),
                &::dafny_runtime::string_utf16_of("-1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            return ();
        }
        pub fn ExponentTests() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("2e0"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e0"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("3e0"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e-5"),
                &::dafny_runtime::string_utf16_of("1e5"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e5"),
                &::dafny_runtime::string_utf16_of("1e-5"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e5"),
                &::dafny_runtime::string_utf16_of("1e6"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e5"),
                &::dafny_runtime::string_utf16_of("1e4"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e-5"),
                &::dafny_runtime::string_utf16_of("1e-4"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1e-5"),
                &::dafny_runtime::string_utf16_of("1e-6"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e5"),
                &::dafny_runtime::string_utf16_of("-1e-5"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e-5"),
                &::dafny_runtime::string_utf16_of("-1e5"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e5"),
                &::dafny_runtime::string_utf16_of("-1e4"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e5"),
                &::dafny_runtime::string_utf16_of("-1e6"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e-5"),
                &::dafny_runtime::string_utf16_of("-1e-6"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-1e-5"),
                &::dafny_runtime::string_utf16_of("-1e-4"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("2"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("3"),
                &::dafny_runtime::string_utf16_of("2e0"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("20"),
                &::dafny_runtime::string_utf16_of("2e1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("19"),
                &::dafny_runtime::string_utf16_of("2e1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("21"),
                &::dafny_runtime::string_utf16_of("2e1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-20"),
                &::dafny_runtime::string_utf16_of("-2e1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-21"),
                &::dafny_runtime::string_utf16_of("-2e1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-19"),
                &::dafny_runtime::string_utf16_of("-2e1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.2"),
                &::dafny_runtime::string_utf16_of("2e-1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.02"),
                &::dafny_runtime::string_utf16_of("2e-2"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.02"),
                &::dafny_runtime::string_utf16_of(".2e-1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of(".1"),
                &::dafny_runtime::string_utf16_of("2e-1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of(".3"),
                &::dafny_runtime::string_utf16_of("2e-1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0.2"),
                &::dafny_runtime::string_utf16_of("-2e-1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0.02"),
                &::dafny_runtime::string_utf16_of("-2e-2"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0.02"),
                &::dafny_runtime::string_utf16_of("-.2e-1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-.3"),
                &::dafny_runtime::string_utf16_of("-2e-1"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-.1"),
                &::dafny_runtime::string_utf16_of("-2e-1"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            return ();
        }
        pub fn ZeroTests() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0"),
                &::dafny_runtime::string_utf16_of("0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+0"),
                &::dafny_runtime::string_utf16_of("0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("00"),
                &::dafny_runtime::string_utf16_of("0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.0"),
                &::dafny_runtime::string_utf16_of("0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("000"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of(".000"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.0"),
                &::dafny_runtime::string_utf16_of("000.00000"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("000.000e0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("0e+0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("0e-0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("0e99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0"),
                &::dafny_runtime::string_utf16_of("0e-99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0e+99"),
                &::dafny_runtime::string_utf16_of("0e-99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("+0e+99"),
                &::dafny_runtime::string_utf16_of("-0e-99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0e+99"),
                &::dafny_runtime::string_utf16_of("-0e-99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0e+99"),
                &::dafny_runtime::string_utf16_of("+0e-99"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("01"),
                &::dafny_runtime::string_utf16_of("1"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1"),
                &::dafny_runtime::string_utf16_of("001"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("1.0"),
                &::dafny_runtime::string_utf16_of("001.00000"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            return ();
        }
        pub fn ExtremeNumTest() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of(
                    "1234567890123456789012345678901234567800000000000000000000000000000",
                ),
                &::dafny_runtime::string_utf16_of(
                    "1234567890123456789012345678901234567800000000000000000000000000000",
                ),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of(
                    ".000000000000000000000000012345678901234567890123456789012345678",
                ),
                &::dafny_runtime::string_utf16_of(
                    "0.000000000000000000000000012345678901234567890123456789012345678",
                ),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345676"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345675"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345676"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345679"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345677"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345676"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-123456789.01234567890123456789012345678"),
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("123456789.01234567890123456789012345678"),
                &::dafny_runtime::string_utf16_of("-123456789.01234567890123456789012345678"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0000000000000000000000000012345.67e121"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("12345.67e121"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.00000001e133"), &::dafny_runtime::string_utf16_of("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.00000001e-122"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("1234567e-136"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001234567"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0000000000000000000000000012345.66e121"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0000000000000000000000000012345.68e121"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("12345.67e120"),
                &::dafny_runtime::string_utf16_of("12345.67e121"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("12345.67e122"),
                &::dafny_runtime::string_utf16_of("12345.67e121"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-12345.67e122"),
                &::dafny_runtime::string_utf16_of("-12345.67e121"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-12345.67e120"),
                &::dafny_runtime::string_utf16_of("-12345.67e121"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("12345.67e120"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("12345.67e122"), &::dafny_runtime::string_utf16_of("123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-12345.67e122"), &::dafny_runtime::string_utf16_of("-123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-12345.67e120"), &::dafny_runtime::string_utf16_of("-123456700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.00000001e-123"),
                &::dafny_runtime::string_utf16_of("0.00000001e-122"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("0.00000001e-121"),
                &::dafny_runtime::string_utf16_of("0.00000001e-122"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0.00000001e-121"),
                &::dafny_runtime::string_utf16_of("-0.00000001e-122"),
                crate::r#_FloatCompare_Compile::_default::Less(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("-0.00000001e-123"),
                &::dafny_runtime::string_utf16_of("-0.00000001e-122"),
                crate::r#_FloatCompare_Compile::_default::Greater(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.00000001e-123"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.00000001e-121"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-0.00000001e-121"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-0.00000001e-123"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("9.9999999999999999999999999999999999999E+125"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of(".99999999999999999999999999999999999999E+126"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("9.9999999999999999999999999999999999999E+124"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("9.9999999999999999999999999999999999999E+126"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("999999999999999999999999999999999999989999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), &::dafny_runtime::string_utf16_of("999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("1E-130"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("10E-131"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("1E-131"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("1E-129"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"), &::dafny_runtime::string_utf16_of("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-9.9999999999999999999999999999999999999E+125"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-.99999999999999999999999999999999999999E+126"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-9.9999999999999999999999999999999999999E+126"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-9.9999999999999999999999999999999999999E+124"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-99999999999999999999999999999999999998999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"), &::dafny_runtime::string_utf16_of("-999999999999999999999999999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-1E-130"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-10E-131"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Equal());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-1E-129"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-1E-131"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Less());
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(&::dafny_runtime::string_utf16_of("-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009"), &::dafny_runtime::string_utf16_of("-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), crate::r#_FloatCompare_Compile::_default::Greater());
            return ();
        }
        pub fn InvalidTests() -> () {
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("a"),
                &::dafny_runtime::string_utf16_of("0"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            crate::r#_FloatCompareTest_Compile::_default::TestCompareFloat(
                &::dafny_runtime::string_utf16_of("a"),
                &::dafny_runtime::string_utf16_of("b"),
                crate::r#_FloatCompare_Compile::_default::Equal(),
            );
            return ();
        }
        pub fn NEGATIVE_TWO(
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("-2"),
                ::dafny_runtime::string_utf16_of("-2."),
                ::dafny_runtime::string_utf16_of("-2.0"),
                ::dafny_runtime::string_utf16_of("-2e0"),
                ::dafny_runtime::string_utf16_of("-2.e0"),
                ::dafny_runtime::string_utf16_of("-2.0e0"),
                ::dafny_runtime::string_utf16_of("-2.0e+0"),
                ::dafny_runtime::string_utf16_of("-2.0e-0"),
                ::dafny_runtime::string_utf16_of("-.2e1"),
                ::dafny_runtime::string_utf16_of("-0.2e1"),
                ::dafny_runtime::string_utf16_of("-0.2e+1"),
                ::dafny_runtime::string_utf16_of("-0.02e2"),
                ::dafny_runtime::string_utf16_of("-20e-1"),
                ::dafny_runtime::string_utf16_of("-20.e-1"),
                ::dafny_runtime::string_utf16_of("-200.0e-2")
            ]
        }
        pub fn NEGATIVE_ONE(
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("-1"),
                ::dafny_runtime::string_utf16_of("-1."),
                ::dafny_runtime::string_utf16_of("-1.0"),
                ::dafny_runtime::string_utf16_of("-1e0"),
                ::dafny_runtime::string_utf16_of("-1.e0"),
                ::dafny_runtime::string_utf16_of("-1.0e0"),
                ::dafny_runtime::string_utf16_of("-1.0e+0"),
                ::dafny_runtime::string_utf16_of("-1.0e-0"),
                ::dafny_runtime::string_utf16_of("-.1e1"),
                ::dafny_runtime::string_utf16_of("-0.1e1"),
                ::dafny_runtime::string_utf16_of("-0.1e+1"),
                ::dafny_runtime::string_utf16_of("-0.01e2"),
                ::dafny_runtime::string_utf16_of("-10e-1"),
                ::dafny_runtime::string_utf16_of("-10.e-1"),
                ::dafny_runtime::string_utf16_of("-100.0e-2")
            ]
        }
        pub fn ZERO(
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("0"),
                ::dafny_runtime::string_utf16_of("+0"),
                ::dafny_runtime::string_utf16_of("-0"),
                ::dafny_runtime::string_utf16_of("0."),
                ::dafny_runtime::string_utf16_of("+0."),
                ::dafny_runtime::string_utf16_of("-0."),
                ::dafny_runtime::string_utf16_of("00"),
                ::dafny_runtime::string_utf16_of("+00"),
                ::dafny_runtime::string_utf16_of("-00"),
                ::dafny_runtime::string_utf16_of("0.0"),
                ::dafny_runtime::string_utf16_of("+0.0"),
                ::dafny_runtime::string_utf16_of("-0.0"),
                ::dafny_runtime::string_utf16_of("00.00"),
                ::dafny_runtime::string_utf16_of("+00.00"),
                ::dafny_runtime::string_utf16_of("-00.00"),
                ::dafny_runtime::string_utf16_of(".0"),
                ::dafny_runtime::string_utf16_of("+.0"),
                ::dafny_runtime::string_utf16_of("-.0"),
                ::dafny_runtime::string_utf16_of("0e0"),
                ::dafny_runtime::string_utf16_of("+0e0"),
                ::dafny_runtime::string_utf16_of("+0e+0"),
                ::dafny_runtime::string_utf16_of("+0e-0"),
                ::dafny_runtime::string_utf16_of("-0e0"),
                ::dafny_runtime::string_utf16_of("-0e+0"),
                ::dafny_runtime::string_utf16_of("-0e-0"),
                ::dafny_runtime::string_utf16_of("0e-99"),
                ::dafny_runtime::string_utf16_of("+0e-99"),
                ::dafny_runtime::string_utf16_of("-0e-99"),
                ::dafny_runtime::string_utf16_of("0e99"),
                ::dafny_runtime::string_utf16_of("+0e99"),
                ::dafny_runtime::string_utf16_of("-0e99"),
                ::dafny_runtime::string_utf16_of("0e+99"),
                ::dafny_runtime::string_utf16_of("+0e+99"),
                ::dafny_runtime::string_utf16_of("-0e+99")
            ]
        }
        pub fn ONE(
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("1"),
                ::dafny_runtime::string_utf16_of("1."),
                ::dafny_runtime::string_utf16_of("1.0"),
                ::dafny_runtime::string_utf16_of("1e0"),
                ::dafny_runtime::string_utf16_of("1.e0"),
                ::dafny_runtime::string_utf16_of("1.0e0"),
                ::dafny_runtime::string_utf16_of("1.0e+0"),
                ::dafny_runtime::string_utf16_of("1.0e-0"),
                ::dafny_runtime::string_utf16_of(".1e1"),
                ::dafny_runtime::string_utf16_of("0.1e1"),
                ::dafny_runtime::string_utf16_of("0.1e+1"),
                ::dafny_runtime::string_utf16_of("0.01e2"),
                ::dafny_runtime::string_utf16_of("10e-1"),
                ::dafny_runtime::string_utf16_of("10.e-1"),
                ::dafny_runtime::string_utf16_of("100.0e-2"),
                ::dafny_runtime::string_utf16_of("+1"),
                ::dafny_runtime::string_utf16_of("+1."),
                ::dafny_runtime::string_utf16_of("+1.0"),
                ::dafny_runtime::string_utf16_of("+1e0"),
                ::dafny_runtime::string_utf16_of("+1.e0"),
                ::dafny_runtime::string_utf16_of("+1.0e0"),
                ::dafny_runtime::string_utf16_of("+1.0e+0"),
                ::dafny_runtime::string_utf16_of("+1.0e-0"),
                ::dafny_runtime::string_utf16_of("+.1e1"),
                ::dafny_runtime::string_utf16_of("+0.1e1"),
                ::dafny_runtime::string_utf16_of("+0.1e+1"),
                ::dafny_runtime::string_utf16_of("+0.01e2"),
                ::dafny_runtime::string_utf16_of("+10e-1"),
                ::dafny_runtime::string_utf16_of("+10.e-1"),
                ::dafny_runtime::string_utf16_of("+100.0e-2")
            ]
        }
        pub fn TWO(
        ) -> ::dafny_runtime::Sequence<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>
        {
            ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("2"),
                ::dafny_runtime::string_utf16_of("2."),
                ::dafny_runtime::string_utf16_of("2.0"),
                ::dafny_runtime::string_utf16_of("2e0"),
                ::dafny_runtime::string_utf16_of("2.e0"),
                ::dafny_runtime::string_utf16_of("2.0e0"),
                ::dafny_runtime::string_utf16_of("2.0e+0"),
                ::dafny_runtime::string_utf16_of("2.0e-0"),
                ::dafny_runtime::string_utf16_of(".2e1"),
                ::dafny_runtime::string_utf16_of("0.2e1"),
                ::dafny_runtime::string_utf16_of("0.2e+1"),
                ::dafny_runtime::string_utf16_of("0.02e2"),
                ::dafny_runtime::string_utf16_of("20e-1"),
                ::dafny_runtime::string_utf16_of("20.e-1"),
                ::dafny_runtime::string_utf16_of("200.0e-2"),
                ::dafny_runtime::string_utf16_of("+2"),
                ::dafny_runtime::string_utf16_of("+2."),
                ::dafny_runtime::string_utf16_of("+2.0"),
                ::dafny_runtime::string_utf16_of("+2e0"),
                ::dafny_runtime::string_utf16_of("+2.e0"),
                ::dafny_runtime::string_utf16_of("+2.0e0"),
                ::dafny_runtime::string_utf16_of("+2.0e+0"),
                ::dafny_runtime::string_utf16_of("+2.0e-0"),
                ::dafny_runtime::string_utf16_of("+.2e1"),
                ::dafny_runtime::string_utf16_of("+0.2e1"),
                ::dafny_runtime::string_utf16_of("+0.2e+1"),
                ::dafny_runtime::string_utf16_of("+0.02e2"),
                ::dafny_runtime::string_utf16_of("+20e-1"),
                ::dafny_runtime::string_utf16_of("+20.e-1"),
                ::dafny_runtime::string_utf16_of("+200.0e-2")
            ]
        }
    }
}
pub mod r#_TestCallMany_Compile {
    pub use crate::ConcurrentCall::Callee;
    pub use dafny_runtime::UpcastObject;
    pub use std::any::Any;

    pub struct _default {}

    impl _default {
        pub fn TestBasic() -> () {
            let mut c = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Object<crate::r#_TestCallMany_Compile::MyCallee>,
            >::new();
            let mut _nw0: ::dafny_runtime::Object<crate::r#_TestCallMany_Compile::MyCallee> =
                crate::r#_TestCallMany_Compile::MyCallee::_allocate_object();
            crate::r#_TestCallMany_Compile::MyCallee::_ctor(&_nw0);
            c = ::dafny_runtime::MaybePlacebo::from(_nw0.clone());
            crate::ConcurrentCall::_default::ConcurrentCall(
                &::dafny_runtime::upcast_object::<
                    crate::r#_TestCallMany_Compile::MyCallee,
                    dyn crate::ConcurrentCall::Callee,
                >()(c.read()),
                2,
                3,
            );
            if !(2 <= ::dafny_runtime::rd!(c.read().clone()).count.clone()
                && ::dafny_runtime::rd!(c.read().clone()).count.clone() <= 6)
            {
                panic!("Halt")
            };
            return ();
        }
    }

    pub struct MyCallee {
        pub count: u32,
    }

    impl MyCallee {
        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
            ::dafny_runtime::allocate_object::<Self>()
        }
        pub fn _ctor(
            this: &::dafny_runtime::Object<crate::r#_TestCallMany_Compile::MyCallee>,
        ) -> () {
            let mut _set_count: bool = false;
            ::dafny_runtime::update_field_uninit_object!(this.clone(), count, _set_count, 0);
            return ();
        }
    }

    impl UpcastObject<dyn Any> for MyCallee {
        ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
    }

    impl Callee for MyCallee {
        fn call(&mut self, serialPos: u32, concurrentPos: u32) -> () {
            if self.count.clone() < crate::r#_BoundedInts_Compile::_default::UINT32_MAX() {
                self.count = self.count.clone() + 1;
            };
            return ();
        }
    }

    impl UpcastObject<dyn Callee> for MyCallee {
        ::dafny_runtime::UpcastObjectFn!(dyn crate::ConcurrentCall::Callee);
    }
}
pub mod r#_GetOptTest_Compile {
    pub struct _default {}

    impl _default {
        pub fn TestEmpty() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![::dafny_runtime::string_utf16_of("cmd")],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e055: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e155: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>>;
            if !(_e055.clone() == _e155.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e055));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e155));
                panic!("Halt")
            };
            let mut _e056: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e156: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e056.clone() == _e156.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e056));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e156));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestShort() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("-svsttt"),
                        ::dafny_runtime::string_utf16_of("-t"),
                        ::dafny_runtime::string_utf16_of("stuff"),
                        ::dafny_runtime::string_utf16_of("-v")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e057: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e157: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("six"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("seven"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("six"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("tt")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("seven"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                })
            ];
            if !(_e057.clone() == _e157.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e057));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e157));
                panic!("Halt")
            };
            let mut _e058: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e158: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e058.clone() == _e158.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e058));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e158));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestLong() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("file1"),
                        ::dafny_runtime::string_utf16_of("--bar"),
                        ::dafny_runtime::string_utf16_of("bar1"),
                        ::dafny_runtime::string_utf16_of("-"),
                        ::dafny_runtime::string_utf16_of("--bar=bar2=bar3"),
                        ::dafny_runtime::string_utf16_of("file3"),
                        ::dafny_runtime::string_utf16_of("--"),
                        ::dafny_runtime::string_utf16_of("--this"),
                        ::dafny_runtime::string_utf16_of("-that")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e059: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e159: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("bar1")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("bar2=bar3")
                    })
                })
            ];
            if !(_e059.clone() == _e159.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e059));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e159));
                panic!("Halt")
            };
            let mut _e060: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e160: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("file1"),
                ::dafny_runtime::string_utf16_of("-"),
                ::dafny_runtime::string_utf16_of("file3"),
                ::dafny_runtime::string_utf16_of("--this"),
                ::dafny_runtime::string_utf16_of("-that")
            ];
            if !(_e060.clone() == _e160.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e060));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e160));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestRequired() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::Required {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("file1"),
                        ::dafny_runtime::string_utf16_of("--bar"),
                        ::dafny_runtime::string_utf16_of("bar1"),
                        ::dafny_runtime::string_utf16_of("-"),
                        ::dafny_runtime::string_utf16_of("--bar=bar2=bar3"),
                        ::dafny_runtime::string_utf16_of("file3"),
                        ::dafny_runtime::string_utf16_of("--"),
                        ::dafny_runtime::string_utf16_of("--this"),
                        ::dafny_runtime::string_utf16_of("-that")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e061: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e161: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("bar1")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("bar2=bar3")
                    })
                })
            ];
            if !(_e061.clone() == _e161.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e061));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e161));
                panic!("Halt")
            };
            let mut _e062: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e162: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![
                ::dafny_runtime::string_utf16_of("file1"),
                ::dafny_runtime::string_utf16_of("-"),
                ::dafny_runtime::string_utf16_of("file3"),
                ::dafny_runtime::string_utf16_of("--this"),
                ::dafny_runtime::string_utf16_of("-that")
            ];
            if !(_e062.clone() == _e162.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e062));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e162));
                panic!("Halt")
            };
            let mut y: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::GetOptions(
                &MyOptions,
                &::dafny_runtime::seq![
                    ::dafny_runtime::string_utf16_of("cmd"),
                    ::dafny_runtime::string_utf16_of("--foo"),
                    ::dafny_runtime::string_utf16_of("file1"),
                    ::dafny_runtime::string_utf16_of("file3"),
                    ::dafny_runtime::string_utf16_of("--"),
                    ::dafny_runtime::string_utf16_of("--this"),
                    ::dafny_runtime::string_utf16_of("-that")
                ],
            );
            if !matches!(
                (&y).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            let mut _e063: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                y.error().clone();
            let mut _e163: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("Option 'bar' is required, but was not used.");
            if !(_e063.clone() == _e163.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e063));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e163));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestDeprecated() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Deprecated {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Deprecated {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Deprecated {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("--bar=baz"),
                        ::dafny_runtime::string_utf16_of("-svtstuff")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e064: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e164: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("seven"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                })
            ];
            if !(_e064.clone() == _e164.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e064));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e164));
                panic!("Halt")
            };
            let mut _e065: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e165: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e065.clone() == _e165.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e065));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e165));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestAlias() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::string_utf16_of("abc"),
                            longAlias: ::dafny_runtime::seq![
                                ::dafny_runtime::string_utf16_of("def"),
                                ::dafny_runtime::string_utf16_of("ghi")
                            ]
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Deprecated {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Deprecated {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("-abc"),
                        ::dafny_runtime::string_utf16_of("--def"),
                        ::dafny_runtime::string_utf16_of("--ghi")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e066: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e166: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                })
            ];
            if !(_e066.clone() == _e166.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e066));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e166));
                panic!("Halt")
            };
            let mut _e067: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e167: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e067.clone() == _e167.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e067));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e167));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestPositionalFail() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Maybe {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Yes {})
                        })
                    ],
                });
            let mut x: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::GetOptions(
                &MyOptions,
                &::dafny_runtime::seq![
                    ::dafny_runtime::string_utf16_of("cmd"),
                    ::dafny_runtime::string_utf16_of("stuff"),
                    ::dafny_runtime::string_utf16_of("-123"),
                    ::dafny_runtime::string_utf16_of("--foo")
                ],
            );
            if !matches!(
                (&x).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            let mut _e068: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.error().clone();
            let mut _e168: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> = ::dafny_runtime::string_utf16_of("Required positional argument 'bar' follows optional positional argument 'two'.");
            if !(_e068.clone() == _e168.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e068));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e168));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestPositional() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Yes {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::Maybe {})
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("stuff"),
                        ::dafny_runtime::string_utf16_of("-123"),
                        ::dafny_runtime::string_utf16_of("--foo")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e069: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e169: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("-123")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                })
            ];
            if !(_e069.clone() == _e169.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e069));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e169));
                panic!("Halt")
            };
            let mut _e070: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e170: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e070.clone() == _e170.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e070));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e170));
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("stuff"),
                        ::dafny_runtime::string_utf16_of("--two=-123"),
                        ::dafny_runtime::string_utf16_of("--foo")
                    ],
                ),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError1.read().Extract();
            let mut _e071: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e171: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("-123")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                })
            ];
            if !(_e071.clone() == _e171.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e071));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e171));
                panic!("Halt")
            };
            let mut _e072: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e172: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e072.clone() == _e172.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e072));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e172));
                panic!("Halt")
            };
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("stuff"),
                        ::dafny_runtime::string_utf16_of("--two=-123"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("--bar"),
                        ::dafny_runtime::string_utf16_of("more-stuff")
                    ],
                ),
            );
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError2.read().Extract();
            let mut _e073: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e173: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("-123")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("more-stuff")
                    })
                })
            ];
            if !(_e073.clone() == _e173.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e073));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e173));
                panic!("Halt")
            };
            let mut _e074: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e174: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e074.clone() == _e174.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e074));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e174));
                panic!("Halt")
            };
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("stuff")
                    ],
                ),
            );
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError3.read().Extract();
            let mut _e075: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e175: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![::std::rc::Rc::new(
                crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("bar"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("stuff")
                    })
                }
            )];
            if !(_e075.clone() == _e175.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e075));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e175));
                panic!("Halt")
            };
            let mut _e076: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e176: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e076.clone() == _e176.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e076));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e176));
                panic!("Halt")
            };
            let mut y: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::GetOptions(
                &MyOptions,
                &::dafny_runtime::seq![
                    ::dafny_runtime::string_utf16_of("cmd"),
                    ::dafny_runtime::string_utf16_of("--two=-123"),
                    ::dafny_runtime::string_utf16_of("--foo"),
                    ::dafny_runtime::string_utf16_of("--bar"),
                    ::dafny_runtime::string_utf16_of("more-stuff")
                ],
            );
            if !matches!(
                (&y).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            let mut _e077: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                y.error().clone();
            let mut _e177: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of(
                    "Positional arg bar matched with invalid positional value '--two=-123'.",
                );
            if !(_e077.clone() == _e177.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e077));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e177));
                panic!("Halt")
            };
            y = crate::r#_GetOpt_Compile::_default::GetOptions(
                &MyOptions,
                &::dafny_runtime::seq![::dafny_runtime::string_utf16_of("cmd")],
            );
            if !matches!(
                (&y).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            let mut _e078: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                y.error().clone();
            let mut _e178: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of(
                    "Positional arg 'bar' is required, but we've run out of arguments.",
                );
            if !(_e078.clone() == _e178.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e078));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e178));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestHelp() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--help")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 =
                ::dafny_runtime::MaybePlacebo::from(crate::r#_GetOpt_Compile::_default::NeedsHelp(
                    &MyOptions,
                    &x,
                    &::dafny_runtime::string_utf16_of(""),
                ));
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut y: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            print!("{}", ::dafny_runtime::DafnyPrintWrapper(&y));
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            return ();
        }
        pub fn TestHelpFail() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("bar"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            argName: ::dafny_runtime::string_utf16_of("arg"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("six"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(115 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("seven"),
                            help: ::dafny_runtime::string_utf16_of("helpText"),
                            short: ::dafny_runtime::DafnyCharUTF16(118 as u16),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        })
                    ],
                });
            let mut x: ::std::rc::Rc<
                crate::r#_Wrappers_Compile::Result<
                    ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >,
            > = crate::r#_GetOpt_Compile::_default::GetOptions(
                &MyOptions,
                &::dafny_runtime::seq![
                    ::dafny_runtime::string_utf16_of("cmd"),
                    ::dafny_runtime::string_utf16_of("--help"),
                    ::dafny_runtime::string_utf16_of("--foo")
                ],
            );
            if !matches!(
                (&x).as_ref(),
                crate::r#_Wrappers_Compile::Result::Failure { .. }
            ) {
                panic!("Halt")
            };
            let mut _e079: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.error().clone();
            let mut _e179: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of(
                    "Option 'help' used with other stuff, but must only be used alone.",
                );
            if !(_e079.clone() == _e179.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e079));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e179));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestNested() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("Does foo things"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("Does bar things to thingy"),
                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                            ),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("command"),
                                    help: ::dafny_runtime::string_utf16_of("Does command stuff"),
                                    params: ::dafny_runtime::seq![
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("five"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does five things to thingy"
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                                            short: ::dafny_runtime::DafnyCharUTF16(104 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }),
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                                            name: ::dafny_runtime::string_utf16_of("six"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does six things"
                                            ),
                                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                                            solo: false,
                                            inherit: true,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >
                                        })
                                    ]
                                }
                            )
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("other"),
                                    help: ::dafny_runtime::string_utf16_of("Does other stuff"),
                                    params: ::dafny_runtime::seq![
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("seven"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does seven things to thingy"
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                                            short: ::dafny_runtime::DafnyCharUTF16(104 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }),
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                                            name: ::dafny_runtime::string_utf16_of("eight"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does eight things"
                                            ),
                                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                                            solo: false,
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >
                                        })
                                    ]
                                }
                            )
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("MyProg"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("other"),
                        ::dafny_runtime::string_utf16_of("--seven=siete"),
                        ::dafny_runtime::string_utf16_of("--eight")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e080: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.command().clone();
            let mut _e180: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("MyProg");
            if !(_e080.clone() == _e180.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e080));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e180));
                panic!("Halt")
            };
            let mut _e081: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e181: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![::std::rc::Rc::new(
                crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }
            )];
            if !(_e081.clone() == _e181.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e081));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e181));
                panic!("Halt")
            };
            let mut _e082: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e182: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e082.clone() == _e182.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e082));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e182));
                panic!("Halt")
            };
            if !matches!(
                x.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                panic!("Halt")
            };
            let mut sub: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                x.subcommand().value().clone();
            let mut _e083: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                sub.command().clone();
            let mut _e183: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("other");
            if !(_e083.clone() == _e183.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e083));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e183));
                panic!("Halt")
            };
            let mut _e084: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = sub.params().clone();
            let mut _e184: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("seven"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("siete")
                    })
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("eight"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                })
            ];
            if !(_e084.clone() == _e184.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e084));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e184));
                panic!("Halt")
            };
            let mut _e085: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = sub.files().clone();
            let mut _e185: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e085.clone() == _e185.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e085));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e185));
                panic!("Halt")
            };
            if !matches!(
                sub.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("MyProg"),
                        ::dafny_runtime::string_utf16_of("--help")
                    ],
                ),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError1.read().Extract();
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 =
                ::dafny_runtime::MaybePlacebo::from(crate::r#_GetOpt_Compile::_default::NeedsHelp(
                    &MyOptions,
                    &x,
                    &::dafny_runtime::string_utf16_of(""),
                ));
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            let mut y: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError2.read().Extract();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            print!("{}", ::dafny_runtime::DafnyPrintWrapper(&y));
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("MyProg"),
                        ::dafny_runtime::string_utf16_of("command"),
                        ::dafny_runtime::string_utf16_of("--help")
                    ],
                ),
            );
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError3.read().Extract();
            let mut valueOrError4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Option<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError4 =
                ::dafny_runtime::MaybePlacebo::from(crate::r#_GetOpt_Compile::_default::NeedsHelp(
                    &MyOptions,
                    &x,
                    &::dafny_runtime::string_utf16_of(""),
                ));
            if !(!valueOrError4.read().IsFailure()) {
                panic!("Halt")
            };
            y = valueOrError4.read().Extract();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            print!("{}", ::dafny_runtime::DafnyPrintWrapper(&y));
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
            );
            return ();
        }
        pub fn TestDefault() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("MyProg"),
                    help: ::dafny_runtime::string_utf16_of("does stuff"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                            name: ::dafny_runtime::string_utf16_of("foo"),
                            help: ::dafny_runtime::string_utf16_of("Does foo things"),
                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                            solo: false,
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                            name: ::dafny_runtime::string_utf16_of("two"),
                            help: ::dafny_runtime::string_utf16_of("Does bar things to thingy"),
                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                            short: ::dafny_runtime::DafnyCharUTF16(116 as u16),
                            unused: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Unused::Default {
                                val: ::dafny_runtime::string_utf16_of("two_dflt")
                            }),
                            inherit: false,
                            vis: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                            ),
                            shortAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                            longAlias: ::dafny_runtime::seq![]
                                as ::dafny_runtime::Sequence<
                                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                                >,
                            positional: ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Tri::No {})
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("command"),
                                    help: ::dafny_runtime::string_utf16_of("Does command stuff"),
                                    params: ::dafny_runtime::seq![
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("five"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does five things to thingy"
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                                            short: ::dafny_runtime::DafnyCharUTF16(104 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::Default {
                                                    val: ::dafny_runtime::string_utf16_of(
                                                        "five_dflt"
                                                    )
                                                }
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }),
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                                            name: ::dafny_runtime::string_utf16_of("six"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does six things"
                                            ),
                                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                                            solo: false,
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >
                                        })
                                    ]
                                }
                            )
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("other"),
                                    help: ::dafny_runtime::string_utf16_of("Does other stuff"),
                                    params: ::dafny_runtime::seq![
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("seven"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does seven things to thingy"
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("thingy"),
                                            short: ::dafny_runtime::DafnyCharUTF16(104 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::Default {
                                                    val: ::dafny_runtime::string_utf16_of(
                                                        "seven_dflt"
                                                    )
                                                }
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }),
                                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Flag {
                                            name: ::dafny_runtime::string_utf16_of("eight"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Does eight things"
                                            ),
                                            short: crate::r#_GetOpt_Compile::_default::NullChar(),
                                            solo: false,
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >
                                        })
                                    ]
                                }
                            )
                        })
                    ],
                });
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("other"),
                        ::dafny_runtime::string_utf16_of("--eight")
                    ],
                ),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut x: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                valueOrError0.read().Extract();
            let mut _e086: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.command().clone();
            let mut _e186: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("cmd");
            if !(_e086.clone() == _e186.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e086));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e186));
                panic!("Halt")
            };
            let mut _e087: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e187: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("two_dflt")
                    })
                })
            ];
            if !(_e087.clone() == _e187.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e087));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e187));
                panic!("Halt")
            };
            let mut _e088: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e188: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e088.clone() == _e188.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e088));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e188));
                panic!("Halt")
            };
            if !matches!(
                x.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                panic!("Halt")
            };
            let mut sub: ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed> =
                x.subcommand().value().clone();
            let mut _e089: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                sub.command().clone();
            let mut _e189: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("other");
            if !(_e089.clone() == _e189.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e089));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e189));
                panic!("Halt")
            };
            let mut _e090: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = sub.params().clone();
            let mut _e190: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("eight"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("seven"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("seven_dflt")
                    })
                })
            ];
            if !(_e090.clone() == _e190.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e090));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e190));
                panic!("Halt")
            };
            let mut _e091: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = sub.files().clone();
            let mut _e191: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e091.clone() == _e191.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e091));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e191));
                panic!("Halt")
            };
            if !matches!(
                sub.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo"),
                        ::dafny_runtime::string_utf16_of("command"),
                        ::dafny_runtime::string_utf16_of("--six")
                    ],
                ),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError1.read().Extract();
            let mut _e092: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.command().clone();
            let mut _e192: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("cmd");
            if !(_e092.clone() == _e192.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e092));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e192));
                panic!("Halt")
            };
            let mut _e093: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e193: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("two_dflt")
                    })
                })
            ];
            if !(_e093.clone() == _e193.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e093));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e193));
                panic!("Halt")
            };
            let mut _e094: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e194: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e094.clone() == _e194.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e094));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e194));
                panic!("Halt")
            };
            if !matches!(
                x.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::Some { .. }
            ) {
                panic!("Halt")
            };
            sub = x.subcommand().value().clone();
            let mut _e095: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                sub.command().clone();
            let mut _e195: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("command");
            if !(_e095.clone() == _e195.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e095));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e195));
                panic!("Halt")
            };
            let mut _e096: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = sub.params().clone();
            let mut _e196: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("six"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("five"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("five_dflt")
                    })
                })
            ];
            if !(_e096.clone() == _e196.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e096));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e196));
                panic!("Halt")
            };
            let mut _e097: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = sub.files().clone();
            let mut _e197: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e097.clone() == _e197.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e097));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e197));
                panic!("Halt")
            };
            if !matches!(
                sub.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                panic!("Halt")
            };
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::std::rc::Rc<crate::r#_GetOpt_Compile::Parsed>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 = ::dafny_runtime::MaybePlacebo::from(
                crate::r#_GetOpt_Compile::_default::GetOptions(
                    &MyOptions,
                    &::dafny_runtime::seq![
                        ::dafny_runtime::string_utf16_of("cmd"),
                        ::dafny_runtime::string_utf16_of("--foo")
                    ],
                ),
            );
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            x = valueOrError2.read().Extract();
            let mut _e098: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                x.command().clone();
            let mut _e198: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                ::dafny_runtime::string_utf16_of("cmd");
            if !(_e098.clone() == _e198.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e098));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e198));
                panic!("Halt")
            };
            let mut _e099: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = x.params().clone();
            let mut _e199: ::dafny_runtime::Sequence<
                ::std::rc::Rc<crate::r#_GetOpt_Compile::OneArg>,
            > = ::dafny_runtime::seq![
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("foo"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::None {})
                }),
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::OneArg::OneArg {
                    name: ::dafny_runtime::string_utf16_of("two"),
                    value: ::std::rc::Rc::new(crate::r#_Wrappers_Compile::Option::<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >::Some {
                        value: ::dafny_runtime::string_utf16_of("two_dflt")
                    })
                })
            ];
            if !(_e099.clone() == _e199.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e099));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e199));
                panic!("Halt")
            };
            let mut _e0100: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = x.files().clone();
            let mut _e1100: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
            > = ::dafny_runtime::seq![]
                as ::dafny_runtime::Sequence<
                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                >;
            if !(_e0100.clone() == _e1100.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0100));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1100));
                panic!("Halt")
            };
            if !matches!(
                x.subcommand().as_ref(),
                crate::r#_Wrappers_Compile::Option::None { .. }
            ) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestDdbec() -> () {
            let mut MyOptions: ::std::rc::Rc<crate::r#_GetOpt_Compile::Options> =
                ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Options::Options {
                    name: ::dafny_runtime::string_utf16_of("ddbec"),
                    help: ::dafny_runtime::string_utf16_of("Test the ddbec"),
                    params: ::dafny_runtime::seq![
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("encrypt"),
                                    help: ::dafny_runtime::string_utf16_of("Encrypts record"),
                                    params: ::dafny_runtime::seq![::std::rc::Rc::new(
                                        crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("output"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "Write encrypted records to fileName."
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("fileName"),
                                            short: ::dafny_runtime::DafnyCharUTF16(111 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }
                                    )]
                                }
                            )
                        }),
                        ::std::rc::Rc::new(crate::r#_GetOpt_Compile::Param::Command {
                            options: ::std::rc::Rc::new(
                                crate::r#_GetOpt_Compile::Options::Options {
                                    name: ::dafny_runtime::string_utf16_of("decrypt"),
                                    help: ::dafny_runtime::string_utf16_of("Decrypts Records"),
                                    params: ::dafny_runtime::seq![::std::rc::Rc::new(
                                        crate::r#_GetOpt_Compile::Param::Opt {
                                            name: ::dafny_runtime::string_utf16_of("expected"),
                                            help: ::dafny_runtime::string_utf16_of(
                                                "fileName contains expected plaintext records."
                                            ),
                                            argName: ::dafny_runtime::string_utf16_of("fileName"),
                                            short: ::dafny_runtime::DafnyCharUTF16(101 as u16),
                                            unused: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Unused::UnusedOk {}
                                            ),
                                            inherit: false,
                                            vis: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Visibility::Normal {}
                                            ),
                                            shortAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::DafnyCharUTF16,
                                                >,
                                            longAlias: ::dafny_runtime::seq![]
                                                as ::dafny_runtime::Sequence<
                                                    ::dafny_runtime::Sequence<
                                                        ::dafny_runtime::DafnyCharUTF16,
                                                    >,
                                                >,
                                            positional: ::std::rc::Rc::new(
                                                crate::r#_GetOpt_Compile::Tri::No {}
                                            )
                                        }
                                    )]
                                }
                            )
                        })
                    ],
                });
            return ();
        }
    }
}
pub mod r#_TestUUID_Compile {
    pub struct _default {}

    impl _default {
        pub fn TestFromBytesSuccess() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UUID::_default::FromByteArray(
                    &crate::r#_TestUUID_Compile::_default::byteUuid(),
                ));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut fromBytes: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            let mut _e0101: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                fromBytes.clone();
            let mut _e1101: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_TestUUID_Compile::_default::uuid();
            if !(_e0101.clone() == _e1101.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0101));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1101));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestFromBytesFailure() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UUID::_default::FromByteArray(
                    &crate::r#_TestUUID_Compile::_default::wrongByteUuid(),
                ));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut fromBytes: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            if !(fromBytes.clone() != crate::r#_TestUUID_Compile::_default::uuid()) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestToBytesSuccess() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&crate::r#_TestUUID_Compile::_default::uuid()),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut toBytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            let mut _e0102: ::dafny_runtime::Sequence<u8> = toBytes.clone();
            let mut _e1102: ::dafny_runtime::Sequence<u8> =
                crate::r#_TestUUID_Compile::_default::byteUuid();
            if !(_e0102.clone() == _e1102.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0102));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1102));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestToBytesFailure() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&crate::r#_TestUUID_Compile::_default::uuid()),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut toBytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            if !(toBytes.clone() != crate::r#_TestUUID_Compile::_default::wrongByteUuid()) {
                panic!("Halt")
            };
            return ();
        }
        pub fn TestRoundTripStringConversion() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&crate::r#_TestUUID_Compile::_default::uuid()),
            );
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut stringToBytes: ::dafny_runtime::Sequence<u8> = valueOrError0.read().Extract();
            let mut _e0103: ::dafny_runtime::DafnyInt = stringToBytes.cardinality();
            let mut _e1103: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(16);
            if !(_e0103.clone() == _e1103.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0103));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1103));
                panic!("Halt")
            };
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::FromByteArray(&stringToBytes),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut bytesToString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError1.read().Extract();
            let mut _e0104: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                bytesToString.clone();
            let mut _e1104: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                crate::r#_TestUUID_Compile::_default::uuid();
            if !(_e0104.clone() == _e1104.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0104));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1104));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestRoundTripByteConversion() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError0 =
                ::dafny_runtime::MaybePlacebo::from(crate::UUID::_default::FromByteArray(
                    &crate::r#_TestUUID_Compile::_default::byteUuid(),
                ));
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut bytesToString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&bytesToString),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut stringToBytes: ::dafny_runtime::Sequence<u8> = valueOrError1.read().Extract();
            let mut _e0105: ::dafny_runtime::DafnyInt = stringToBytes.cardinality();
            let mut _e1105: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(16);
            if !(_e0105.clone() == _e1105.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0105));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1105));
                panic!("Halt")
            };
            let mut _e0106: ::dafny_runtime::Sequence<u8> = stringToBytes.clone();
            let mut _e1106: ::dafny_runtime::Sequence<u8> =
                crate::r#_TestUUID_Compile::_default::byteUuid();
            if !(_e0106.clone() == _e1106.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0106));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1106));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestGenerateAndConversion() -> () {
            let mut valueOrError0 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            let mut _out12 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            _out12 = ::dafny_runtime::MaybePlacebo::from(crate::UUID::_default::GenerateUUID());
            valueOrError0 = ::dafny_runtime::MaybePlacebo::from(_out12.read());
            if !(!valueOrError0.read().IsFailure()) {
                panic!("Halt")
            };
            let mut uuidString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError0.read().Extract();
            let mut valueOrError1 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError1 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&uuidString),
            );
            if !(!valueOrError1.read().IsFailure()) {
                panic!("Halt")
            };
            let mut uuidBytes: ::dafny_runtime::Sequence<u8> = valueOrError1.read().Extract();
            let mut valueOrError2 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError2 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::FromByteArray(&uuidBytes),
            );
            if !(!valueOrError2.read().IsFailure()) {
                panic!("Halt")
            };
            let mut bytesToString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError2.read().Extract();
            let mut valueOrError3 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError3 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&bytesToString),
            );
            if !(!valueOrError3.read().IsFailure()) {
                panic!("Halt")
            };
            let mut stringToBytes: ::dafny_runtime::Sequence<u8> = valueOrError3.read().Extract();
            let mut _e0107: ::dafny_runtime::DafnyInt = stringToBytes.cardinality();
            let mut _e1107: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(16);
            if !(_e0107.clone() == _e1107.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0107));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1107));
                panic!("Halt")
            };
            let mut _e0108: ::dafny_runtime::Sequence<u8> = stringToBytes.clone();
            let mut _e1108: ::dafny_runtime::Sequence<u8> = uuidBytes.clone();
            if !(_e0108.clone() == _e1108.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0108));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1108));
                panic!("Halt")
            };
            let mut valueOrError4 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<u8>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError4 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::ToByteArray(&uuidString),
            );
            if !(!valueOrError4.read().IsFailure()) {
                panic!("Halt")
            };
            let mut uuidStringToBytes: ::dafny_runtime::Sequence<u8> =
                valueOrError4.read().Extract();
            let mut _e0109: ::dafny_runtime::DafnyInt = uuidStringToBytes.cardinality();
            let mut _e1109: ::dafny_runtime::DafnyInt = ::dafny_runtime::int!(16);
            if !(_e0109.clone() == _e1109.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0109));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1109));
                panic!("Halt")
            };
            let mut valueOrError5 = ::dafny_runtime::MaybePlacebo::<
                ::std::rc::Rc<
                    crate::r#_Wrappers_Compile::Result<
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
                    >,
                >,
            >::new();
            valueOrError5 = ::dafny_runtime::MaybePlacebo::from(
                crate::UUID::_default::FromByteArray(&uuidStringToBytes),
            );
            if !(!valueOrError5.read().IsFailure()) {
                panic!("Halt")
            };
            let mut uuidBytesToString: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                valueOrError5.read().Extract();
            let mut _e0110: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                uuidBytesToString.clone();
            let mut _e1110: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> =
                uuidString.clone();
            if !(_e0110.clone() == _e1110.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0110));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1110));
                panic!("Halt")
            };
            return ();
        }
        pub fn byteUuid() -> ::dafny_runtime::Sequence<u8> {
            ::dafny_runtime::seq![
                146, 56, 38, 88, 183, 160, 77, 151, 156, 73, 206, 228, 230, 114, 163, 179
            ]
        }
        pub fn uuid() -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
            ::dafny_runtime::string_utf16_of("92382658-b7a0-4d97-9c49-cee4e672a3b3")
        }
        pub fn wrongByteUuid() -> ::dafny_runtime::Sequence<u8> {
            ::dafny_runtime::seq![
                146, 56, 38, 88, 183, 160, 77, 151, 156, 73, 206, 228, 230, 114, 163, 178
            ]
        }
    }
}
pub mod r#_TestComputeSetToOrderedSequenceUInt8Less_Compile {
    pub struct _default {}

    impl _default {
        pub fn UInt8Greater(x: u8, y: u8) -> bool {
            y < x
        }
        pub fn TestSetToOrderedSequenceEmpty() -> () {
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out13 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out13 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &::dafny_runtime::set! {},
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out13.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &::dafny_runtime::set! {},
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::seq![] as ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>;
            let mut _e0111: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1111: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0111.clone() == _e1111.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0111));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1111));
                panic!("Halt")
            };
            let mut _e0112: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1112: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0112.clone() == _e1112.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0112));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1112));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceOneItem() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::set! {::dafny_runtime::seq![0]};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out14 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out14 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out14.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::seq![::dafny_runtime::seq![0]];
            let mut _e0113: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1113: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0113.clone() == _e1113.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0113));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1113));
                panic!("Halt")
            };
            let mut _e0114: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1114: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0114.clone() == _e1114.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0114));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1114));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceSimple() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::set! {::dafny_runtime::seq![0, 2], ::dafny_runtime::seq![0, 1]};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out15 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out15 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out15.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::seq![::dafny_runtime::seq![0, 1], ::dafny_runtime::seq![0, 2]];
            let mut _e0115: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1115: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0115.clone() == _e1115.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0115));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1115));
                panic!("Halt")
            };
            let mut _e0116: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1116: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0116.clone() == _e1116.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0116));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1116));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequencePrefix() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::set! {::dafny_runtime::seq![0, 1, 2], ::dafny_runtime::seq![0, 1]};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out16 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out16 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out16.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                ::dafny_runtime::seq![::dafny_runtime::seq![0, 1], ::dafny_runtime::seq![0, 1, 2]];
            let mut _e0117: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1117: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0117.clone() == _e1117.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0117));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1117));
                panic!("Halt")
            };
            let mut _e0118: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1118: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0118.clone() == _e1118.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0118));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1118));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceComplex() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> = ::dafny_runtime::set! {::dafny_runtime::seq![0, 1, 2], ::dafny_runtime::seq![1, 1, 2], ::dafny_runtime::seq![0, 1]};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out17 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out17 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out17.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> = ::dafny_runtime::seq![
                ::dafny_runtime::seq![0, 1],
                ::dafny_runtime::seq![0, 1, 2],
                ::dafny_runtime::seq![1, 1, 2]
            ];
            let mut _e0119: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1119: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0119.clone() == _e1119.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0119));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1119));
                panic!("Halt")
            };
            let mut _e0120: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1120: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0120.clone() == _e1120.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0120));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1120));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceComplexReverse() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> = ::dafny_runtime::set! {::dafny_runtime::seq![0, 1, 2], ::dafny_runtime::seq![1, 1, 2], ::dafny_runtime::seq![0, 1]};
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out18 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out18 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::UInt8Greater(x0.clone(), x1.clone())
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out18.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::UInt8Greater(x0.clone(), x1.clone())
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> = ::dafny_runtime::seq![
                ::dafny_runtime::seq![1, 1, 2],
                ::dafny_runtime::seq![0, 1],
                ::dafny_runtime::seq![0, 1, 2]
            ];
            let mut _e0121: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1121: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0121.clone() == _e1121.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0121));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1121));
                panic!("Halt")
            };
            let mut _e0122: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1122: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0122.clone() == _e1122.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0122));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1122));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetSequence() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>> = ::dafny_runtime::set! {::dafny_runtime::seq![::dafny_runtime::int!(0), ::dafny_runtime::int!(1), ::dafny_runtime::int!(2)], ::dafny_runtime::seq![::dafny_runtime::int!(1), ::dafny_runtime::int!(1), ::dafny_runtime::int!(2)], ::dafny_runtime::seq![::dafny_runtime::int!(0), ::dafny_runtime::int!(1)]};
            let mut output: ::dafny_runtime::Sequence<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
            > = crate::SortedSets::_default::SetToSequence::<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
            >(&a);
            let mut _e0123: ::dafny_runtime::Multiset<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
            > = output.as_dafny_multiset();
            let mut _e1123: ::dafny_runtime::Multiset<
                ::dafny_runtime::Sequence<::dafny_runtime::DafnyInt>,
            > = a.as_dafny_multiset();
            if !(_e0123.clone() == _e1123.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0123));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1123));
                panic!("Halt")
            };
            return ();
        }
        pub fn TestSetToOrderedSequenceManyItems() -> () {
            let mut a: ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> = (&({
                ::std::rc::Rc::new(
                    move || -> ::dafny_runtime::Set<::dafny_runtime::Sequence<u8>> {
                        let mut _coll2: ::dafny_runtime::SetBuilder<::dafny_runtime::Sequence<u8>> =
                            ::dafny_runtime::SetBuilder::<::dafny_runtime::Sequence<u8>>::new();
                        for r#__compr_2 in ::dafny_runtime::integer_range(
                            ::dafny_runtime::int!(0),
                            crate::r#_BoundedInts_Compile::_default::TWO_TO_THE_16(),
                        )
                        .map(::std::convert::Into::<u16>::into)
                        {
                            let mut x: u16 = r#__compr_2;
                            if true {
                                if 0 <= x && x < 65535 {
                                    _coll2.add(&crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt16ToSeq(x))
                                }
                            }
                        }
                        _coll2.build()
                    },
                )
            }))();
            let mut output = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            let mut _out19 = ::dafny_runtime::MaybePlacebo::<
                ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>>,
            >::new();
            _out19 = ::dafny_runtime::MaybePlacebo::from(
                crate::SortedSets::_default::SetToOrderedSequence::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                ),
            );
            output = ::dafny_runtime::MaybePlacebo::from(_out19.read());
            let mut output2: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                crate::SortedSets::_default::SetToOrderedSequence2::<u8>(
                    &a,
                    &(::std::rc::Rc::new(|x0: &u8, x1: &u8| {
                        crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt8Less(
                            x0.clone(),
                            x1.clone(),
                        )
                    }) as ::std::rc::Rc<dyn ::std::ops::Fn(&_, &_) -> _>),
                );
            let mut expected: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> = {
                let _initializer = {
                    ::std::rc::Rc::new(
                        move |i: &::dafny_runtime::DafnyInt| -> ::dafny_runtime::Sequence<u8> {
                            crate::r#_StandardLibrary_Compile::r#_UInt_Compile::_default::UInt16ToSeq(::dafny_runtime::truncate!(i.clone(), u16))
                        },
                    )
                };
                ::dafny_runtime::integer_range(
                    ::dafny_runtime::Zero::zero(),
                    ::dafny_runtime::int!(b"65535"),
                )
                .map(|i| _initializer(&i))
                .collect::<::dafny_runtime::Sequence<_>>()
            };
            let mut _e0124: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output.read();
            let mut _e1124: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0124.clone() == _e1124.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0124));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1124));
                panic!("Halt")
            };
            let mut _e0125: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                output2.clone();
            let mut _e1125: ::dafny_runtime::Sequence<::dafny_runtime::Sequence<u8>> =
                expected.clone();
            if !(_e0125.clone() == _e1125.clone()) {
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Left:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e0125));
                print!(
                    "{}",
                    ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                        "Right:\n"
                    ))
                );
                print!("{}", ::dafny_runtime::DafnyPrintWrapper(&_e1125));
                panic!("Halt")
            };
            return ();
        }
    }
}
pub mod _module {
    pub struct _default {}

    impl _default {
        pub fn _Test__Main_() -> () {
            let mut success: bool = true;
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.TestEncodeHappyCase: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::TestEncodeHappyCase();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.TestEncodeInvalidUnicode: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::TestEncodeInvalidUnicode();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.TestDecodeHappyCase: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::TestDecodeHappyCase();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.TestDecodeInvalidUnicode: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::TestDecodeInvalidUnicode();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.Test1Byte: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::Test1Byte();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.Test2Bytes: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::Test2Bytes();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.Test3Bytes: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::Test3Bytes();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUTF8.Test4Bytes: "#
                ))
            );
            crate::r#_TestUTF8_Compile::_default::Test4Bytes();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestTime.TestNonDecreasing: "#
                ))
            );
            crate::r#_TestTime_Compile::_default::TestNonDecreasing();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestTime.TestPositiveValues: "#
                ))
            );
            crate::r#_TestTime_Compile::_default::TestPositiveValues();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestTime.TestGetCurrentTimeStamp: "#
                ))
            );
            crate::r#_TestTime_Compile::_default::TestGetCurrentTimeStamp();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequenceEmpty: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequenceEmpty();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequenceOneItem: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequenceOneItem();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequenceSimple: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequenceSimple();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequencePrefix: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequencePrefix();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequenceComplex: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequenceComplex();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedSequenceComplexReverse: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedSequenceComplexReverse();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetSequence: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetSequence();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceCharLess.TestSetToOrderedComplexUnicode: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceCharLess_Compile::_default::TestSetToOrderedComplexUnicode();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestHexStrings.BasicTests: "#
                ))
            );
            crate::r#_TestHexStrings_Compile::_default::BasicTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.TestOneTwoZeroMatrix: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::TestOneTwoZeroMatrix();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.SimpleTests: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::SimpleTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.SignTests: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::SignTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.ExponentTests: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::ExponentTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.ZeroTests: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::ZeroTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.ExtremeNumTest: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::ExtremeNumTest();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"FloatCompareTest.InvalidTests: "#
                ))
            );
            crate::r#_FloatCompareTest_Compile::_default::InvalidTests();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestCallMany.TestBasic: "#
                ))
            );
            crate::r#_TestCallMany_Compile::_default::TestBasic();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestEmpty: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestEmpty();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestShort: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestShort();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestLong: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestLong();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestRequired: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestRequired();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestDeprecated: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestDeprecated();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestAlias: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestAlias();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestPositionalFail: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestPositionalFail();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestPositional: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestPositional();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestHelp: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestHelp();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestHelpFail: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestHelpFail();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestNested: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestNested();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestDefault: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestDefault();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"GetOptTest.TestDdbec: "#
                ))
            );
            crate::r#_GetOptTest_Compile::_default::TestDdbec();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestFromBytesSuccess: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestFromBytesSuccess();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestFromBytesFailure: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestFromBytesFailure();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestToBytesSuccess: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestToBytesSuccess();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestToBytesFailure: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestToBytesFailure();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestRoundTripStringConversion: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestRoundTripStringConversion();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestRoundTripByteConversion: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestRoundTripByteConversion();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestUUID.TestGenerateAndConversion: "#
                ))
            );
            crate::r#_TestUUID_Compile::_default::TestGenerateAndConversion();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceEmpty: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceEmpty();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceOneItem: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceOneItem();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceSimple: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceSimple();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequencePrefix: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequencePrefix();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceComplex: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceComplex();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceComplexReverse: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceComplexReverse();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetSequence: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetSequence();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"TestComputeSetToOrderedSequenceUInt8Less.TestSetToOrderedSequenceManyItems: "#
                ))
            );
            crate::r#_TestComputeSetToOrderedSequenceUInt8Less_Compile::_default::TestSetToOrderedSequenceManyItems();
            print!(
                "{}",
                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of(
                    r#"PASSED
"#
                ))
            );
            if !success {
                panic!("Halt")
            };
            return ();
        }
    }
    #[test]
    fn test_main() {
        _default::_Test__Main_();
    }
}
